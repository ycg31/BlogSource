{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1503075152033},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1503075152033},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1503075152049},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1503075152049},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1503075152049},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1503075152049},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1503075152049},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1503075152049},{"_id":"themes/next/README.cn.md","hash":"59e323ce21535d561507c9ecc984b7c4dcb61514","modified":1503075152049},{"_id":"themes/next/README.md","hash":"44563e8285c48dcb4da42855e31ea108608a6235","modified":1503075152049},{"_id":"themes/next/_config.yml","hash":"3dc2b3c339f0542873caf7d0f805442ce9ea645e","modified":1503177008830},{"_id":"themes/next/bower.json","hash":"63c38f50fb54b25bf5101f566189f9e5b3a6ef0e","modified":1503075152049},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1503075152049},{"_id":"themes/next/package.json","hash":"85a77bafb3d1e958b82e52528b7a95fcd59efda9","modified":1503075152080},{"_id":"source/_posts/GIT相关命令.md","hash":"6d503fa5a971b903a34f74d4bf4e7be8ea70ff62","modified":1503207973694},{"_id":"source/_posts/Git远程操作详解.md","hash":"b839b3f9669f8602422960b1e69fc9ed46cf5128","modified":1503208099466},{"_id":"source/_posts/Linux TCP加速工具 —— LotServer(锐速母公司) 一键安装脚本.md","hash":"acfc1f19035cc8ad7c2f4f9e4e807589d9354213","modified":1503208216851},{"_id":"source/_posts/V2ray使用TLS.md","hash":"ecd4e50fe09c78452d5355b53b592cabd3ce897c","modified":1503207701701},{"_id":"source/_posts/git pull和clone的区别及用法.md","hash":"4b31bd21380e65afb30f47e107333339c0516efc","modified":1503208069850},{"_id":"source/_posts/mi.md","hash":"4ec84e9992dc21dc05cf6fbbca39304558c663cc","modified":1503207746919},{"_id":"source/_posts/v2ray.md","hash":"26d06b6f0e99d722d732ed0dc9feaf9998cd9a47","modified":1503212145980},{"_id":"source/_posts/使用AppVeyor自动部署Hexo到Github.md","hash":"48b00b071b8a5aea1f564b94374b42ed3875d756","modified":1503208051909},{"_id":"source/_posts/使用Travis-CI自动部署Hexo.md","hash":"b87706c0fca4f781ed5320f4e880a251c93c9e7f","modified":1503211539365},{"_id":"source/_posts/使用Travis自动部署hexo.md","hash":"b043b50b02d5e660252a86962e11fb79fbfa3b08","modified":1503207971138},{"_id":"source/_posts/远程GitHub中的灰色图标的解决办法.md","hash":"2c9aec08ac7e53208eba9e468755ef9b3c851f92","modified":1503208082687},{"_id":"source/tags/index.md","hash":"6eff05097ef2369cefe482fdf8245c7f9154973d","modified":1503172702728},{"_id":"source/categories/index.md","hash":"e9582e5fde1ad79113efeb1a787d1e9b6febb7af","modified":1503172859669},{"_id":"themes/next/languages/de.yml","hash":"ee6262473faa1fa55e3dc7b0bb6542f4f6a275c8","modified":1503075152049},{"_id":"themes/next/languages/en.yml","hash":"2443657cf60284ecf01c60a5e20acd406f321d88","modified":1503075152049},{"_id":"themes/next/languages/default.yml","hash":"2443657cf60284ecf01c60a5e20acd406f321d88","modified":1503075152049},{"_id":"themes/next/languages/fr-FR.yml","hash":"c6f3a38a6c27d0815ef72d66020805408aa24019","modified":1503075152049},{"_id":"themes/next/languages/id.yml","hash":"58c9886ccd224cee3db6f9b9e1a86dcd4ff47995","modified":1503075152049},{"_id":"themes/next/languages/ja.yml","hash":"6ba8858255b4cae5e00f5fabd1cfaea3c98a34c2","modified":1503075152049},{"_id":"themes/next/languages/ko.yml","hash":"fbfad308103fb95c635609419bfa3420cb69d646","modified":1503075152049},{"_id":"themes/next/languages/pt-BR.yml","hash":"5e160fa8c8bd1f16b50db161d5bc8ae2ebd6a0c5","modified":1503075152049},{"_id":"themes/next/languages/pt.yml","hash":"1141a4896986de6e2383c5694c0359eaa22fb9b4","modified":1503075152049},{"_id":"themes/next/languages/ru.yml","hash":"43a8fb18dbfeaeed71268d75eb4c542061766419","modified":1503075152049},{"_id":"themes/next/languages/zh-Hans.yml","hash":"0b9ce7d62e7d55235a2770817a40e84577ce38c1","modified":1503075152049},{"_id":"themes/next/languages/zh-hk.yml","hash":"13b2808d632c27748a38a752457d4538c37b8ebb","modified":1503075152049},{"_id":"themes/next/languages/zh-tw.yml","hash":"a91f6c8fa19044afac162a1c73e03836e9460bc5","modified":1503075152049},{"_id":"themes/next/layout/_layout.swig","hash":"a6572e0ec12a014938a9a6bb2896a38abd443838","modified":1503075152064},{"_id":"themes/next/layout/archive.swig","hash":"c2be7c95af6205c7501a261f2fc9702c57107f89","modified":1503075152080},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1503075152080},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1503075152080},{"_id":"themes/next/layout/page.swig","hash":"dbff0302b4bfabb51556a197bf65190eb30361f0","modified":1503075152080},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1503075152080},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1503075152080},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1503075152080},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1503075152080},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1503075152080},{"_id":"themes/next/source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1503075932433},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1503075152181},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1503075152181},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1503075152181},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503075152129},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1503075152049},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1503075152049},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1503075152064},{"_id":"themes/next/layout/_macro/post.swig","hash":"9896b34a7edc112c03b393a1602a616710a66ae1","modified":1503075152064},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5b1e91c2f6f88fbecd426cd0727e7b7854c6cc1d","modified":1503075152064},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0f59a51b5cea3e8a7c078db486626cddc2978622","modified":1503075152064},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"f10ca698e8ea0c31ff72a6cffa832c3cd703a133","modified":1503075152064},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1503075152064},{"_id":"themes/next/layout/_partials/comments.swig","hash":"fc0ff72b3a8ab25029a070acee066d9eaa0b0493","modified":1503075152064},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1694faba317f4a67dfd8dc725223ac3da3ea46ef","modified":1503075152064},{"_id":"themes/next/layout/_partials/head.swig","hash":"476e6c2452732c2741f518004d336bc348e710d7","modified":1503075152064},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1503075152064},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1503075152064},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1503075152064},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1503075152064},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1503075152064},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1503075152064},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1503075152064},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1503075152080},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1503075152080},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1503075152080},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1503075152080},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1503075152080},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1503075152080},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1503075152080},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1503075152080},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1503075152080},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1503075152080},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1503075152080},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1503075152080},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1503075152080},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1503075152080},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1503075152080},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1503075152128},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1503075152129},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1503075152129},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1503075152130},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1503075152131},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1503075152131},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1503075152132},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1503075152132},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1503075152132},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1503075152133},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503075152133},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503075152133},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1503075152133},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1503075152134},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1503075152134},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503075152064},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503075152064},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503075152117},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503075152117},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503075152118},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503075152127},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1503075152128},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1503075152064},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1503075152064},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1503075152064},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1503075152064},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1503075152064},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1503075152064},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1503075152064},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1503075152064},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"8ed117eeeac17d562a54ec6be556988be0ec67ba","modified":1503075152064},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1503075152064},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1503075152064},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1503075152064},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1503075152064},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1503075152064},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1503075152064},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1503075152080},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1503075152080},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1503075152080},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1503075152080},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1503075152080},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1503075152080},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1503075152080},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1503075152080},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1503075152080},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1503075152080},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1503075152080},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1503075152080},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1503075152080},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"92ea45b877b1fec2010c7b409f121c986ee5075b","modified":1503075152080},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1503075152080},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"602104d7ac47f7888d97e810419e58593a79e8ba","modified":1503075152080},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1503075152080},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1503075152080},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1503075152080},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1503075152080},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1503075152080},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1503075152117},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1503075152117},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1503075152118},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1503075152118},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"38a9f43973704afe7e8ca50f35a25940ea96e3cf","modified":1503075152125},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1503075152127},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"89f88b9c9a191dd980f799fc36b83b63290d3ac9","modified":1503075152128},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a627633d3bb70b8501572b18037def478beb7017","modified":1503075152128},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1503075152134},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1503075152134},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"96c8b5fe1999de1b3a46730d9812787dfcd65884","modified":1503075152134},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1503075152134},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1503075152134},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1503075152134},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1503075152134},{"_id":"themes/next/source/js/src/motion.js","hash":"dda8c76fce91d7f140c06de2583ba806810f12c2","modified":1503075152134},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1503075152134},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1503075152134},{"_id":"themes/next/source/js/src/utils.js","hash":"f90c7611dc665b5e321cb81c0bd689445bab438a","modified":1503075152134},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1503075152134},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1503075152134},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1503075152134},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1503075152134},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1503075152134},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1503075152150},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1503075152150},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1503075152150},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1503075152150},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1503075152165},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1503075152150},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1503075152150},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1503075152150},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1503075152150},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1503075152150},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1503075152165},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1503075152165},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1503075152165},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1503075152165},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1503075152165},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1503075152165},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1503075152165},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1503075152165},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1503075152165},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1503075152165},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1503075152165},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1503075152165},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1503075152165},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1503075152165},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1503075152165},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1503075152165},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1503075152165},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1503075152165},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1503075152165},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1503075152165},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1503075152165},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1503075152165},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1503075152181},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1503075152181},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1503075152181},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1503075152181},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1503075152181},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1503075152181},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1503075152165},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1503075152080},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1503075152080},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b0e2a0e27a32f72cb283fe4b33d010d485113379","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1503075152096},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"c9b6e70e67a0b2c41a03181302379afdc26da5b6","modified":1503075152114},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"be4e44ab7b407c379cdba56fd5595a273c578598","modified":1503075152115},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1503075152115},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a45ed506274f655b11995c408cc566b16dada79","modified":1503075152116},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1503075152116},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1503075152116},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1503075152116},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a509016ac0227a1903d7f0ca3a825cf9ac7fde33","modified":1503075152119},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1503075152119},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1503075152119},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1503075152120},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1503075152120},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1503075152120},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1503075152120},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1503075152121},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1503075152122},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1503075152122},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1503075152122},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1503075152123},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1503075152123},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1503075152124},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"d4cf54b33e1bb8746a77ce2446d581d01be5329d","modified":1503075152124},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1503075152124},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1503075152124},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"36026bc6e8d3a631f109d766fdd21857697650a0","modified":1503075152125},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1503075152125},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1503075152134},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1503075152134},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1503075152134},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1503075152134},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1503075152134},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1503075152134},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1503075152150},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1503075152134},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1503075152150},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1503075152150},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1503075152150},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1503075152150},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1503075152150},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1503075152150},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1503075152150},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1503075152150},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1503075152150},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1503075152150},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1503075152181},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1503075152181},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1503075152134},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1503075152165},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1503075152165},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1503075152181},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"f363a544aa800a2a5ed97c40887fe9743f67b03b","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"23c7a129452f7708fe7e29ce7ef2df969de9951d","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"5f3510419161ec22ca88cce6a181ddad61de9e86","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1503075152096},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1503075152111},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"962b654f8f7cbd18a298126a403d236ed4540516","modified":1503075152111},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1503075152111},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1503075152111},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1503075152112},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1503075152112},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1503075152113},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1503075152113},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1503075152113},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1503075152114},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1503075152114},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1503075152114},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1503075152121},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1503075152121},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1503075152123},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1503075152134},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1503075152134},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1503075152134},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1503075152134},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1503075152150},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1503075152150},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1503075152150},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1503075152150},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1503075152150},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1503075152150},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1503075152150},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1503075152150},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1503075152165},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1503075152134},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1503075152181},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1503075152165},{"_id":"public/tags/index.html","hash":"56985674c0eb622d825f6803a4ac088d68f673bf","modified":1503215342734},{"_id":"public/categories/index.html","hash":"e0e44489377d08d0874ee9a80cbad6f348b08172","modified":1503215342735},{"_id":"public/page/2/index.html","hash":"0a5547f16c9f8b609ab0ccb51aabee52c2b22f43","modified":1503215342735},{"_id":"public/categories/网站相关/index.html","hash":"c5a1fbcb74fa11490f8fb9e093ae796c3989b876","modified":1503215342735},{"_id":"public/categories/代理技术/index.html","hash":"d42b3bf46b8ce955531ec5bd1d0c253ea2ede346","modified":1503215342735},{"_id":"public/archives/page/2/index.html","hash":"dc53025f79a40e7c258760a281ffefd720aeacd3","modified":1503215342735},{"_id":"public/archives/2017/page/2/index.html","hash":"f976e5580cafa89ab6393863c35f8204d5c262b3","modified":1503215342735},{"_id":"public/archives/2017/08/page/2/index.html","hash":"91071d3a62d60a5d9441c7e031298dafda2f7bb7","modified":1503215342735},{"_id":"public/tags/git/index.html","hash":"6aeb1b482c3bb7aba58a92cf6ba7811bdc7fa4a7","modified":1503215342735},{"_id":"public/tags/hexo/index.html","hash":"249bb9fa9dd036bc711fc751afb92cd40f91e3e5","modified":1503215342736},{"_id":"public/tags/Linux/index.html","hash":"4a6757f26decf6b160299d24073ccc08f45531ce","modified":1503215342736},{"_id":"public/tags/速锐/index.html","hash":"729a002d4d1deba292b275c12a38c0c046427a1e","modified":1503215342736},{"_id":"public/tags/v2ray/index.html","hash":"32bd8d854030eef63e74145174dc0d882028c23d","modified":1503215342736},{"_id":"public/tags/appveyor/index.html","hash":"f89f704910faade3cc1b563fad91f70609765b73","modified":1503215342736},{"_id":"public/tags/Travis/index.html","hash":"b760d30ded42b75d723f1a2d88628f938fa7f143","modified":1503215342736},{"_id":"public/2017/08/20/Git远程操作详解/index.html","hash":"c154db17e220b573fa7b605c1fa9d17f00386655","modified":1503215342736},{"_id":"public/2017/08/20/远程GitHub中的灰色图标的解决办法/index.html","hash":"5463f2dd112514cc59cad1b8f6232d3fe42b9259","modified":1503215342736},{"_id":"public/2017/08/20/git pull和clone的区别及用法/index.html","hash":"a656a2f836ed11c0ef4b7f3480e9679063f87394","modified":1503215342736},{"_id":"public/2017/08/20/使用AppVeyor自动部署Hexo到Github/index.html","hash":"483a171cbe70e310894c7588e0d5245fbef26fbe","modified":1503215342736},{"_id":"public/2017/08/20/使用Travis-CI自动部署Hexo/index.html","hash":"5968c70896fd82886511bbe64b90f91b72c464c1","modified":1503215342736},{"_id":"public/2017/08/20/GIT相关命令/index.html","hash":"c63e3067d5a487eacbe75a457caab77abb26735e","modified":1503215342736},{"_id":"public/2017/08/20/使用Travis自动部署hexo/index.html","hash":"f2d8d7033ba936e6e33e200b7ba2a2bc301a1208","modified":1503215342736},{"_id":"public/2017/08/20/mi/index.html","hash":"f5adcb1bd582acd479fabbca96d9e69f843bd5a2","modified":1503215342736},{"_id":"public/2017/08/19/v2ray/index.html","hash":"2bdb10c207576e743b247533557dd16630ba88e1","modified":1503215342736},{"_id":"public/2017/08/19/V2ray使用TLS/index.html","hash":"04b17e71d40d731ddadc2494759fa42b4cc31575","modified":1503215342736},{"_id":"public/2017/08/19/Linux TCP加速工具 —— LotServer(锐速母公司) 一键安装脚本/index.html","hash":"0f8781ff6df761eafb07c164763c5dbca54c8866","modified":1503215342736},{"_id":"public/index.html","hash":"9359f636c152ec976b643d6ade460a1ff72c50f8","modified":1503215342739},{"_id":"public/categories/网络技术/index.html","hash":"10a9fafebc443769a7ad6420767917202b35bf16","modified":1503215342737},{"_id":"public/archives/index.html","hash":"5a2550608a90ff0908c79ff22e30dc00b4323ab5","modified":1503215342737},{"_id":"public/archives/2017/index.html","hash":"5ee343a4051abb5782a24a2499058e50fa7875bd","modified":1503215342737},{"_id":"public/archives/2017/08/index.html","hash":"5e543d00317f1aec9b23c2902596622fb75c8fa9","modified":1503215342737},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1503215090888},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1503215090889},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1503215090889},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1503215090889},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1503215090889},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1503215090889},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1503215090889},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1503215090889},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1503215090889},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503215090889},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1503215090889},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1503215090889},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1503215090889},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1503215090889},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1503215090889},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1503215090889},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1503215090889},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1503215090890},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1503215090890},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1503215090890},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1503215090890},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1503215090890},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1503215090890},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1503215090890},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1503215090890},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1503215090890},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1503215090890},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1503215090890},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1503215091678},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1503215091685},{"_id":"public/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1503215091697},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1503215091697},{"_id":"public/js/src/bootstrap.js","hash":"6117f97b4984b8e33f21c726132da64ba678e4ed","modified":1503215091697},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1503215091697},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1503215091697},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1503215091697},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1503215091698},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1503215091698},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1503215091698},{"_id":"public/js/src/motion.js","hash":"dc0365b2fb315a8b43d3ef19b59d3a82a366fcc1","modified":1503215091698},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1503215091698},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1503215091698},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1503215091698},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1503215091698},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1503215091698},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1503215091698},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1503215091698},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1503215091698},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1503215091698},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1503215091698},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1503215091698},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1503215091698},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1503215091698},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1503215091698},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1503215091698},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1503215091698},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1503215091699},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1503215091699},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1503215091699},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1503215091699},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1503215091699},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1503215091699},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1503215091699},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1503215091699},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1503215091699},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1503215091699},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1503215091699},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1503215091699},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1503215091699},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1503215091699},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1503215091699},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1503215091699},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1503215091699},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1503215091699},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1503215091699},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1503215091699},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1503215091700},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1503215091700},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1503215091700},{"_id":"public/css/main.css","hash":"0d530512908a8c45bd63bbe02cfaae08d1fd17a3","modified":1503215091700},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1503215091700},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1503215091700},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1503215091700},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1503215091700},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1503215091700},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1503215091700},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1503215091700},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1503215091700},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1503215091700},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1503215091700},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1503215091700},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1503215091700},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1503215091700},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1503215091700},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1503215091701},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1503215091701},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1503215091701},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1503215091701},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1503215091701},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1503215091701},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1503215091701},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1503215091714}],"Category":[{"name":"网络技术","_id":"cj6kfg8rb0004ygkvkx0m3q3m"},{"name":"网站相关","_id":"cj6kfg8rz000lygkv2w9hva0r"},{"name":"代理技术","_id":"cj6kfg8s6000rygkv7leur758"}],"Data":[],"Page":[{"title":"标签","date":"2017-08-19T19:57:11.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-08-20 03:57:11\ntype: \"tags\"\n---\n","updated":"2017-08-19T19:58:22.728Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj6kfg8qy0001ygkvjsj8s0jr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2017-08-19T20:00:21.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-08-20 04:00:21\ntype: \"categories\"\n---\n","updated":"2017-08-19T20:00:59.669Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj6kfg8r20003ygkvi92vgwcg","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Git远程操作详解","date":"2017-08-19T23:22:09.000Z","_content":"[Git](http://zh.wikipedia.org/wiki/Git)是目前最流行的[版本管理系统](http://www.ruanyifeng.com/blog/2008/12/a_visual_guide_to_version_control.html)，学会Git几乎成了开发者的必备技能。\n\nGit有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。\n\n- git clone\n- git remote\n- git fetch\n- git pull\n- git push\n\n本文针对初级用户，从最简单的讲起，但是需要读者对Git的基本用法有所了解。同时，本文覆盖了上面5个命令的几乎所有的常用用法，所以对于熟练用户也有参考价值。\n\n![git](http://image.beekka.com/blog/2014/bg2014061202.jpg)\n\n## 一、git clone\n\n远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到`git clone`命令。\n\n> ```\n> $ git clone <版本库的网址>\n>\n> ```\n\n比如，克隆jQuery的版本库。\n\n> ```\n> $ git clone https://github.com/jquery/jquery.git\n>\n> ```\n\n该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为`git clone`命令的第二个参数。\n\n> ```\n> $ git clone <版本库的网址> <本地目录名>\n>\n> ```\n\n`git clone`支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。\n\n> ```\n> $ git clone http[s]://example.com/path/to/repo.git/\n> $ git clone ssh://example.com/path/to/repo.git/\n> $ git clone git://example.com/path/to/repo.git/\n> $ git clone /opt/git/project.git \n> $ git clone file:///opt/git/project.git\n> $ git clone ftp[s]://example.com/path/to/repo.git/\n> $ git clone rsync://example.com/path/to/repo.git/\n>\n> ```\n\nSSH协议还有另一种写法。\n\n> ```\n> $ git clone [user@]example.com:path/to/repo.git/\n>\n> ```\n\n通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考[官方文档](http://git-scm.com/book/en/Git-on-the-Server-The-Protocols)。\n\n## 二、git remote\n\n为了便于管理，Git要求每个远程主机都必须指定一个主机名。`git remote`命令就用于管理主机名。\n\n不带选项的时候，`git remote`命令列出所有远程主机。\n\n> ```\n> $ git remote\n> origin\n>\n> ```\n\n使用`-v`选项，可以参看远程主机的网址。\n\n> ```\n> $ git remote -v\n> origin  git@github.com:jquery/jquery.git (fetch)\n> origin  git@github.com:jquery/jquery.git (push)\n>\n> ```\n\n上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。\n\n克隆版本库的时候，所使用的远程主机自动被Git命名为`origin`。如果想用其他的主机名，需要用`git clone`命令的`-o`选项指定。\n\n> ```\n> $ git clone -o jQuery https://github.com/jquery/jquery.git\n> $ git remote\n> jQuery\n>\n> ```\n\n上面命令表示，克隆的时候，指定远程主机叫做jQuery。\n\n`git remote show`命令加上主机名，可以查看该主机的详细信息。\n\n> ```\n> $ git remote show <主机名>\n>\n> ```\n\n`git remote add`命令用于添加远程主机。\n\n> ```\n> $ git remote add <主机名> <网址>\n>\n> ```\n\n`git remote rm`命令用于删除远程主机。\n\n> ```\n> $ git remote rm <主机名>\n>\n> ```\n\n`git remote rename`命令用于远程主机的改名。\n\n> ```\n> $ git remote rename <原主机名> <新主机名>\n>\n> ```\n\n## 三、git fetch\n\n一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到`git fetch`命令。\n\n> ```\n> $ git fetch <远程主机名>\n>\n> ```\n\n上面命令将某个远程主机的更新，全部取回本地。\n\n`git fetch`命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。\n\n默认情况下，`git fetch`取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。\n\n> ```\n> $ git fetch <远程主机名> <分支名>\n>\n> ```\n\n比如，取回`origin`主机的`master`分支。\n\n> ```\n> $ git fetch origin master\n>\n> ```\n\n所取回的更新，在本地主机上要用\"远程主机名/分支名\"的形式读取。比如`origin`主机的`master`，就要用`origin/master`读取。\n\n`git branch`命令的`-r`选项，可以用来查看远程分支，`-a`选项查看所有分支。\n\n> ```\n> $ git branch -r\n> origin/master\n>\n> $ git branch -a\n> * master\n>   remotes/origin/master\n>\n> ```\n\n上面命令表示，本地主机的当前分支是`master`，远程分支是`origin/master`。\n\n取回远程主机的更新以后，可以在它的基础上，使用`git checkout`命令创建一个新的分支。\n\n> ```\n> $ git checkout -b newBrach origin/master\n>\n> ```\n\n上面命令表示，在`origin/master`的基础上，创建一个新分支。\n\n此外，也可以使用`git merge`命令或者`git rebase`命令，在本地分支上合并远程分支。\n\n> ```\n> $ git merge origin/master\n> # 或者\n> $ git rebase origin/master\n>\n> ```\n\n上面命令表示在当前分支上，合并`origin/master`。\n\n## 四、git pull\n\n`git pull`命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。\n\n> ```\n> $ git pull <远程主机名> <远程分支名>:<本地分支名>\n>\n> ```\n\n比如，取回`origin`主机的`next`分支，与本地的`master`分支合并，需要写成下面这样。\n\n> ```\n> $ git pull origin next:master\n>\n> ```\n\n如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\n\n> ```\n> $ git pull origin next\n>\n> ```\n\n上面命令表示，取回`origin/next`分支，再与当前分支合并。实质上，这等同于先做`git fetch`，再做`git merge`。\n\n> ```\n> $ git fetch origin\n> $ git merge origin/next\n>\n> ```\n\n在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在`git clone`的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的`master`分支自动\"追踪\"`origin/master`分支。\n\nGit也允许手动建立追踪关系。\n\n> ```\n> git branch --set-upstream master origin/next\n>\n> ```\n\n上面命令指定`master`分支追踪`origin/next`分支。\n\n如果当前分支与远程分支存在追踪关系，`git pull`就可以省略远程分支名。\n\n> ```\n> $ git pull origin\n>\n> ```\n\n上面命令表示，本地的当前分支自动与对应的`origin`主机\"追踪分支\"（remote-tracking branch）进行合并。\n\n如果当前分支只有一个追踪分支，连远程主机名都可以省略。\n\n> ```\n> $ git pull\n>\n> ```\n\n上面命令表示，当前分支自动与唯一一个追踪分支进行合并。\n\n如果合并需要采用rebase模式，可以使用`--rebase`选项。\n\n> ```\n> $ git pull --rebase <远程主机名> <远程分支名>:<本地分支名>\n>\n> ```\n\n如果远程主机删除了某个分支，默认情况下，`git pull` 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致`git pull`不知不觉删除了本地分支。\n\n但是，你可以改变这个行为，加上参数 `-p` 就会在本地删除远程已经删除的分支。\n\n> ```\n> $ git pull -p\n> # 等同于下面的命令\n> $ git fetch --prune origin \n> $ git fetch -p\n>\n> ```\n\n## 五、git push\n\n`git push`命令用于将本地分支的更新，推送到远程主机。它的格式与`git pull`命令相仿。\n\n> ```\n> $ git push <远程主机名> <本地分支名>:<远程分支名>\n>\n> ```\n\n注意，分支推送顺序的写法是<来源地>:<目的地>，所以`git pull`是<远程分支>:<本地分支>，而`git push`是<本地分支>:<远程分支>。\n\n如果省略远程分支名，则表示将本地分支推送与之存在\"追踪关系\"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。\n\n> ```\n> $ git push origin master\n>\n> ```\n\n上面命令表示，将本地的`master`分支推送到`origin`主机的`master`分支。如果后者不存在，则会被新建。\n\n如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。\n\n> ```\n> $ git push origin :master\n> # 等同于\n> $ git push origin --delete master\n>\n> ```\n\n上面命令表示删除`origin`主机的`master`分支。\n\n如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。\n\n> ```\n> $ git push origin\n>\n> ```\n\n上面命令表示，将当前分支推送到`origin`主机的对应分支。\n\n如果当前分支只有一个追踪分支，那么主机名都可以省略。\n\n> ```\n> $ git push\n>\n> ```\n\n如果当前分支与多个主机存在追踪关系，则可以使用`-u`选项指定一个默认主机，这样后面就可以不加任何参数使用`git push`。\n\n> ```\n> $ git push -u origin master\n>\n> ```\n\n上面命令将本地的`master`分支推送到`origin`主机，同时指定`origin`为默认主机，后面就可以不加任何参数使用`git push`了。\n\n不带任何参数的`git push`，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用`git config`命令。\n\n> ```\n> $ git config --global push.default matching\n> # 或者\n> $ git config --global push.default simple\n>\n> ```\n\n还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用`--all`选项。\n\n> ```\n> $ git push --all origin\n>\n> ```\n\n上面命令表示，将所有本地分支都推送到`origin`主机。\n\n如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做`git pull`合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用`--force`选项。\n\n> ```\n> $ git push --force origin \n>\n> ```\n\n上面命令使用`--force`选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用`--force`选项。\n\n最后，`git push`不会推送标签（tag），除非使用`--tags`选项。\n\n> ```\n> $ git push origin --tags\n>\n> ```\n\n（完）","source":"_posts/Git远程操作详解.md","raw":"---\ntitle: Git远程操作详解\ntag: git\ncategories: 网络技术\ndate: 2017-08-20 07:22:09\n---\n[Git](http://zh.wikipedia.org/wiki/Git)是目前最流行的[版本管理系统](http://www.ruanyifeng.com/blog/2008/12/a_visual_guide_to_version_control.html)，学会Git几乎成了开发者的必备技能。\n\nGit有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。\n\n- git clone\n- git remote\n- git fetch\n- git pull\n- git push\n\n本文针对初级用户，从最简单的讲起，但是需要读者对Git的基本用法有所了解。同时，本文覆盖了上面5个命令的几乎所有的常用用法，所以对于熟练用户也有参考价值。\n\n![git](http://image.beekka.com/blog/2014/bg2014061202.jpg)\n\n## 一、git clone\n\n远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到`git clone`命令。\n\n> ```\n> $ git clone <版本库的网址>\n>\n> ```\n\n比如，克隆jQuery的版本库。\n\n> ```\n> $ git clone https://github.com/jquery/jquery.git\n>\n> ```\n\n该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为`git clone`命令的第二个参数。\n\n> ```\n> $ git clone <版本库的网址> <本地目录名>\n>\n> ```\n\n`git clone`支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。\n\n> ```\n> $ git clone http[s]://example.com/path/to/repo.git/\n> $ git clone ssh://example.com/path/to/repo.git/\n> $ git clone git://example.com/path/to/repo.git/\n> $ git clone /opt/git/project.git \n> $ git clone file:///opt/git/project.git\n> $ git clone ftp[s]://example.com/path/to/repo.git/\n> $ git clone rsync://example.com/path/to/repo.git/\n>\n> ```\n\nSSH协议还有另一种写法。\n\n> ```\n> $ git clone [user@]example.com:path/to/repo.git/\n>\n> ```\n\n通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考[官方文档](http://git-scm.com/book/en/Git-on-the-Server-The-Protocols)。\n\n## 二、git remote\n\n为了便于管理，Git要求每个远程主机都必须指定一个主机名。`git remote`命令就用于管理主机名。\n\n不带选项的时候，`git remote`命令列出所有远程主机。\n\n> ```\n> $ git remote\n> origin\n>\n> ```\n\n使用`-v`选项，可以参看远程主机的网址。\n\n> ```\n> $ git remote -v\n> origin  git@github.com:jquery/jquery.git (fetch)\n> origin  git@github.com:jquery/jquery.git (push)\n>\n> ```\n\n上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。\n\n克隆版本库的时候，所使用的远程主机自动被Git命名为`origin`。如果想用其他的主机名，需要用`git clone`命令的`-o`选项指定。\n\n> ```\n> $ git clone -o jQuery https://github.com/jquery/jquery.git\n> $ git remote\n> jQuery\n>\n> ```\n\n上面命令表示，克隆的时候，指定远程主机叫做jQuery。\n\n`git remote show`命令加上主机名，可以查看该主机的详细信息。\n\n> ```\n> $ git remote show <主机名>\n>\n> ```\n\n`git remote add`命令用于添加远程主机。\n\n> ```\n> $ git remote add <主机名> <网址>\n>\n> ```\n\n`git remote rm`命令用于删除远程主机。\n\n> ```\n> $ git remote rm <主机名>\n>\n> ```\n\n`git remote rename`命令用于远程主机的改名。\n\n> ```\n> $ git remote rename <原主机名> <新主机名>\n>\n> ```\n\n## 三、git fetch\n\n一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到`git fetch`命令。\n\n> ```\n> $ git fetch <远程主机名>\n>\n> ```\n\n上面命令将某个远程主机的更新，全部取回本地。\n\n`git fetch`命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。\n\n默认情况下，`git fetch`取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。\n\n> ```\n> $ git fetch <远程主机名> <分支名>\n>\n> ```\n\n比如，取回`origin`主机的`master`分支。\n\n> ```\n> $ git fetch origin master\n>\n> ```\n\n所取回的更新，在本地主机上要用\"远程主机名/分支名\"的形式读取。比如`origin`主机的`master`，就要用`origin/master`读取。\n\n`git branch`命令的`-r`选项，可以用来查看远程分支，`-a`选项查看所有分支。\n\n> ```\n> $ git branch -r\n> origin/master\n>\n> $ git branch -a\n> * master\n>   remotes/origin/master\n>\n> ```\n\n上面命令表示，本地主机的当前分支是`master`，远程分支是`origin/master`。\n\n取回远程主机的更新以后，可以在它的基础上，使用`git checkout`命令创建一个新的分支。\n\n> ```\n> $ git checkout -b newBrach origin/master\n>\n> ```\n\n上面命令表示，在`origin/master`的基础上，创建一个新分支。\n\n此外，也可以使用`git merge`命令或者`git rebase`命令，在本地分支上合并远程分支。\n\n> ```\n> $ git merge origin/master\n> # 或者\n> $ git rebase origin/master\n>\n> ```\n\n上面命令表示在当前分支上，合并`origin/master`。\n\n## 四、git pull\n\n`git pull`命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。\n\n> ```\n> $ git pull <远程主机名> <远程分支名>:<本地分支名>\n>\n> ```\n\n比如，取回`origin`主机的`next`分支，与本地的`master`分支合并，需要写成下面这样。\n\n> ```\n> $ git pull origin next:master\n>\n> ```\n\n如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\n\n> ```\n> $ git pull origin next\n>\n> ```\n\n上面命令表示，取回`origin/next`分支，再与当前分支合并。实质上，这等同于先做`git fetch`，再做`git merge`。\n\n> ```\n> $ git fetch origin\n> $ git merge origin/next\n>\n> ```\n\n在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在`git clone`的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的`master`分支自动\"追踪\"`origin/master`分支。\n\nGit也允许手动建立追踪关系。\n\n> ```\n> git branch --set-upstream master origin/next\n>\n> ```\n\n上面命令指定`master`分支追踪`origin/next`分支。\n\n如果当前分支与远程分支存在追踪关系，`git pull`就可以省略远程分支名。\n\n> ```\n> $ git pull origin\n>\n> ```\n\n上面命令表示，本地的当前分支自动与对应的`origin`主机\"追踪分支\"（remote-tracking branch）进行合并。\n\n如果当前分支只有一个追踪分支，连远程主机名都可以省略。\n\n> ```\n> $ git pull\n>\n> ```\n\n上面命令表示，当前分支自动与唯一一个追踪分支进行合并。\n\n如果合并需要采用rebase模式，可以使用`--rebase`选项。\n\n> ```\n> $ git pull --rebase <远程主机名> <远程分支名>:<本地分支名>\n>\n> ```\n\n如果远程主机删除了某个分支，默认情况下，`git pull` 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致`git pull`不知不觉删除了本地分支。\n\n但是，你可以改变这个行为，加上参数 `-p` 就会在本地删除远程已经删除的分支。\n\n> ```\n> $ git pull -p\n> # 等同于下面的命令\n> $ git fetch --prune origin \n> $ git fetch -p\n>\n> ```\n\n## 五、git push\n\n`git push`命令用于将本地分支的更新，推送到远程主机。它的格式与`git pull`命令相仿。\n\n> ```\n> $ git push <远程主机名> <本地分支名>:<远程分支名>\n>\n> ```\n\n注意，分支推送顺序的写法是<来源地>:<目的地>，所以`git pull`是<远程分支>:<本地分支>，而`git push`是<本地分支>:<远程分支>。\n\n如果省略远程分支名，则表示将本地分支推送与之存在\"追踪关系\"的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。\n\n> ```\n> $ git push origin master\n>\n> ```\n\n上面命令表示，将本地的`master`分支推送到`origin`主机的`master`分支。如果后者不存在，则会被新建。\n\n如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。\n\n> ```\n> $ git push origin :master\n> # 等同于\n> $ git push origin --delete master\n>\n> ```\n\n上面命令表示删除`origin`主机的`master`分支。\n\n如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。\n\n> ```\n> $ git push origin\n>\n> ```\n\n上面命令表示，将当前分支推送到`origin`主机的对应分支。\n\n如果当前分支只有一个追踪分支，那么主机名都可以省略。\n\n> ```\n> $ git push\n>\n> ```\n\n如果当前分支与多个主机存在追踪关系，则可以使用`-u`选项指定一个默认主机，这样后面就可以不加任何参数使用`git push`。\n\n> ```\n> $ git push -u origin master\n>\n> ```\n\n上面命令将本地的`master`分支推送到`origin`主机，同时指定`origin`为默认主机，后面就可以不加任何参数使用`git push`了。\n\n不带任何参数的`git push`，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用`git config`命令。\n\n> ```\n> $ git config --global push.default matching\n> # 或者\n> $ git config --global push.default simple\n>\n> ```\n\n还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用`--all`选项。\n\n> ```\n> $ git push --all origin\n>\n> ```\n\n上面命令表示，将所有本地分支都推送到`origin`主机。\n\n如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做`git pull`合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用`--force`选项。\n\n> ```\n> $ git push --force origin \n>\n> ```\n\n上面命令使用`--force`选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用`--force`选项。\n\n最后，`git push`不会推送标签（tag），除非使用`--tags`选项。\n\n> ```\n> $ git push origin --tags\n>\n> ```\n\n（完）","slug":"Git远程操作详解","published":1,"updated":"2017-08-20T05:48:19.466Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kfg8qs0000ygkvfmbb0376","content":"<p><a href=\"http://zh.wikipedia.org/wiki/Git\" target=\"_blank\" rel=\"external\">Git</a>是目前最流行的<a href=\"http://www.ruanyifeng.com/blog/2008/12/a_visual_guide_to_version_control.html\" target=\"_blank\" rel=\"external\">版本管理系统</a>，学会Git几乎成了开发者的必备技能。</p>\n<p>Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。</p>\n<ul>\n<li>git clone</li>\n<li>git remote</li>\n<li>git fetch</li>\n<li>git pull</li>\n<li>git push</li>\n</ul>\n<p>本文针对初级用户，从最简单的讲起，但是需要读者对Git的基本用法有所了解。同时，本文覆盖了上面5个命令的几乎所有的常用用法，所以对于熟练用户也有参考价值。</p>\n<p><img src=\"http://image.beekka.com/blog/2014/bg2014061202.jpg\" alt=\"git\"></p>\n<h2 id=\"一、git-clone\"><a href=\"#一、git-clone\" class=\"headerlink\" title=\"一、git clone\"></a>一、git clone</h2><p>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到<code>git clone</code>命令。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> &lt;版本库的网址&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>比如，克隆jQuery的版本库。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> https://github.com/jquery/jquery.git</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为<code>git clone</code>命令的第二个参数。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> &lt;版本库的网址&gt; &lt;本地目录名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p><code>git clone</code>支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> http[s]://example.com/path/to/repo.git/</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> ssh://example.com/path/to/repo.git/</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> git://example.com/path/to/repo.git/</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> /opt/git/project.git </span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> file:///opt/git/project.git</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> ftp[s]://example.com/path/to/repo.git/</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> rsync://example.com/path/to/repo.git/</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>SSH协议还有另一种写法。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> [user@]example.com:path/to/repo.git/</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考<a href=\"http://git-scm.com/book/en/Git-on-the-Server-The-Protocols\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<h2 id=\"二、git-remote\"><a href=\"#二、git-remote\" class=\"headerlink\" title=\"二、git remote\"></a>二、git remote</h2><p>为了便于管理，Git要求每个远程主机都必须指定一个主机名。<code>git remote</code>命令就用于管理主机名。</p>\n<p>不带选项的时候，<code>git remote</code>命令列出所有远程主机。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git remote</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> origin</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>使用<code>-v</code>选项，可以参看远程主机的网址。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git remote -v</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> origin  git@github.com:jquery/jquery.git (fetch)</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> origin  git@github.com:jquery/jquery.git (push)</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。</p>\n<p>克隆版本库的时候，所使用的远程主机自动被Git命名为<code>origin</code>。如果想用其他的主机名，需要用<code>git clone</code>命令的<code>-o</code>选项指定。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> -o jQuery https://github.com/jquery/jquery.git</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git remote</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> jQuery</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，克隆的时候，指定远程主机叫做jQuery。</p>\n<p><code>git remote show</code>命令加上主机名，可以查看该主机的详细信息。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git remote show &lt;主机名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p><code>git remote add</code>命令用于添加远程主机。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git remote add &lt;主机名&gt; &lt;网址&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p><code>git remote rm</code>命令用于删除远程主机。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git remote rm &lt;主机名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p><code>git remote rename</code>命令用于远程主机的改名。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"三、git-fetch\"><a href=\"#三、git-fetch\" class=\"headerlink\" title=\"三、git fetch\"></a>三、git fetch</h2><p>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到<code>git fetch</code>命令。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git fetch &lt;远程主机名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令将某个远程主机的更新，全部取回本地。</p>\n<p><code>git fetch</code>命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。</p>\n<p>默认情况下，<code>git fetch</code>取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>比如，取回<code>origin</code>主机的<code>master</code>分支。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git fetch origin master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如<code>origin</code>主机的<code>master</code>，就要用<code>origin/master</code>读取。</p>\n<p><code>git branch</code>命令的<code>-r</code>选项，可以用来查看远程分支，<code>-a</code>选项查看所有分支。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git branch -r</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> origin/master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git branch -a</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> * master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">   remotes/origin/master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，本地主机的当前分支是<code>master</code>，远程分支是<code>origin/master</code>。</p>\n<p>取回远程主机的更新以后，可以在它的基础上，使用<code>git checkout</code>命令创建一个新的分支。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git checkout -b newBrach origin/master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，在<code>origin/master</code>的基础上，创建一个新分支。</p>\n<p>此外，也可以使用<code>git merge</code>命令或者<code>git rebase</code>命令，在本地分支上合并远程分支。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git merge origin/master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> <span class=\"comment\"># 或者</span></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git rebase origin/master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示在当前分支上，合并<code>origin/master</code>。</p>\n<h2 id=\"四、git-pull\"><a href=\"#四、git-pull\" class=\"headerlink\" title=\"四、git pull\"></a>四、git pull</h2><p><code>git pull</code>命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>比如，取回<code>origin</code>主机的<code>next</code>分支，与本地的<code>master</code>分支合并，需要写成下面这样。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git pull origin next:master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git pull origin next</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，取回<code>origin/next</code>分支，再与当前分支合并。实质上，这等同于先做<code>git fetch</code>，再做<code>git merge</code>。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git fetch origin</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git merge origin/next</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在<code>git clone</code>的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的<code>master</code>分支自动”追踪”<code>origin/master</code>分支。</p>\n<p>Git也允许手动建立追踪关系。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> git branch --<span class=\"built_in\">set</span>-upstream master origin/next</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令指定<code>master</code>分支追踪<code>origin/next</code>分支。</p>\n<p>如果当前分支与远程分支存在追踪关系，<code>git pull</code>就可以省略远程分支名。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git pull origin</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，本地的当前分支自动与对应的<code>origin</code>主机”追踪分支”（remote-tracking branch）进行合并。</p>\n<p>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git pull</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。</p>\n<p>如果合并需要采用rebase模式，可以使用<code>--rebase</code>选项。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>如果远程主机删除了某个分支，默认情况下，<code>git pull</code> 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致<code>git pull</code>不知不觉删除了本地分支。</p>\n<p>但是，你可以改变这个行为，加上参数 <code>-p</code> 就会在本地删除远程已经删除的分支。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git pull -p</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> <span class=\"comment\"># 等同于下面的命令</span></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git fetch --prune origin </span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git fetch -p</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"五、git-push\"><a href=\"#五、git-push\" class=\"headerlink\" title=\"五、git push\"></a>五、git push</h2><p><code>git push</code>命令用于将本地分支的更新，推送到远程主机。它的格式与<code>git pull</code>命令相仿。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以<code>git pull</code>是&lt;远程分支&gt;:&lt;本地分支&gt;，而<code>git push</code>是&lt;本地分支&gt;:&lt;远程分支&gt;。</p>\n<p>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push origin master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，将本地的<code>master</code>分支推送到<code>origin</code>主机的<code>master</code>分支。如果后者不存在，则会被新建。</p>\n<p>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push origin :master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> <span class=\"comment\"># 等同于</span></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push origin --delete master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示删除<code>origin</code>主机的<code>master</code>分支。</p>\n<p>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push origin</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，将当前分支推送到<code>origin</code>主机的对应分支。</p>\n<p>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>如果当前分支与多个主机存在追踪关系，则可以使用<code>-u</code>选项指定一个默认主机，这样后面就可以不加任何参数使用<code>git push</code>。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push -u origin master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令将本地的<code>master</code>分支推送到<code>origin</code>主机，同时指定<code>origin</code>为默认主机，后面就可以不加任何参数使用<code>git push</code>了。</p>\n<p>不带任何参数的<code>git push</code>，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用<code>git config</code>命令。</p>\n<blockquote>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; $ git<span class=\"built_in\"> config </span>--global push.default matching</div><div class=\"line\">&gt; # 或者</div><div class=\"line\">&gt; $ git<span class=\"built_in\"> config </span>--global push.default simple</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用<code>--all</code>选项。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push --all origin</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，将所有本地分支都推送到<code>origin</code>主机。</p>\n<p>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做<code>git pull</code>合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用<code>--force</code>选项。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push --force origin </span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令使用<code>--force</code>选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用<code>--force</code>选项。</p>\n<p>最后，<code>git push</code>不会推送标签（tag），除非使用<code>--tags</code>选项。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push origin --tags</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>（完）</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://zh.wikipedia.org/wiki/Git\" target=\"_blank\" rel=\"external\">Git</a>是目前最流行的<a href=\"http://www.ruanyifeng.com/blog/2008/12/a_visual_guide_to_version_control.html\" target=\"_blank\" rel=\"external\">版本管理系统</a>，学会Git几乎成了开发者的必备技能。</p>\n<p>Git有很多优势，其中之一就是远程操作非常简便。本文详细介绍5个Git命令，它们的概念和用法，理解了这些内容，你就会完全掌握Git远程操作。</p>\n<ul>\n<li>git clone</li>\n<li>git remote</li>\n<li>git fetch</li>\n<li>git pull</li>\n<li>git push</li>\n</ul>\n<p>本文针对初级用户，从最简单的讲起，但是需要读者对Git的基本用法有所了解。同时，本文覆盖了上面5个命令的几乎所有的常用用法，所以对于熟练用户也有参考价值。</p>\n<p><img src=\"http://image.beekka.com/blog/2014/bg2014061202.jpg\" alt=\"git\"></p>\n<h2 id=\"一、git-clone\"><a href=\"#一、git-clone\" class=\"headerlink\" title=\"一、git clone\"></a>一、git clone</h2><p>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到<code>git clone</code>命令。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> &lt;版本库的网址&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>比如，克隆jQuery的版本库。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> https://github.com/jquery/jquery.git</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为<code>git clone</code>命令的第二个参数。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> &lt;版本库的网址&gt; &lt;本地目录名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p><code>git clone</code>支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> http[s]://example.com/path/to/repo.git/</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> ssh://example.com/path/to/repo.git/</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> git://example.com/path/to/repo.git/</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> /opt/git/project.git </span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> file:///opt/git/project.git</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> ftp[s]://example.com/path/to/repo.git/</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> rsync://example.com/path/to/repo.git/</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>SSH协议还有另一种写法。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> [user@]example.com:path/to/repo.git/</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。各种协议优劣的详细讨论请参考<a href=\"http://git-scm.com/book/en/Git-on-the-Server-The-Protocols\" target=\"_blank\" rel=\"external\">官方文档</a>。</p>\n<h2 id=\"二、git-remote\"><a href=\"#二、git-remote\" class=\"headerlink\" title=\"二、git remote\"></a>二、git remote</h2><p>为了便于管理，Git要求每个远程主机都必须指定一个主机名。<code>git remote</code>命令就用于管理主机名。</p>\n<p>不带选项的时候，<code>git remote</code>命令列出所有远程主机。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git remote</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> origin</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>使用<code>-v</code>选项，可以参看远程主机的网址。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git remote -v</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> origin  git@github.com:jquery/jquery.git (fetch)</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> origin  git@github.com:jquery/jquery.git (push)</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，当前只有一台远程主机，叫做origin，以及它的网址。</p>\n<p>克隆版本库的时候，所使用的远程主机自动被Git命名为<code>origin</code>。如果想用其他的主机名，需要用<code>git clone</code>命令的<code>-o</code>选项指定。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git <span class=\"built_in\">clone</span> -o jQuery https://github.com/jquery/jquery.git</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git remote</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> jQuery</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，克隆的时候，指定远程主机叫做jQuery。</p>\n<p><code>git remote show</code>命令加上主机名，可以查看该主机的详细信息。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git remote show &lt;主机名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p><code>git remote add</code>命令用于添加远程主机。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git remote add &lt;主机名&gt; &lt;网址&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p><code>git remote rm</code>命令用于删除远程主机。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git remote rm &lt;主机名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p><code>git remote rename</code>命令用于远程主机的改名。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"三、git-fetch\"><a href=\"#三、git-fetch\" class=\"headerlink\" title=\"三、git fetch\"></a>三、git fetch</h2><p>一旦远程主机的版本库有了更新（Git术语叫做commit），需要将这些更新取回本地，这时就要用到<code>git fetch</code>命令。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git fetch &lt;远程主机名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令将某个远程主机的更新，全部取回本地。</p>\n<p><code>git fetch</code>命令通常用来查看其他人的进程，因为它取回的代码对你本地的开发代码没有影响。</p>\n<p>默认情况下，<code>git fetch</code>取回所有分支（branch）的更新。如果只想取回特定分支的更新，可以指定分支名。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>比如，取回<code>origin</code>主机的<code>master</code>分支。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git fetch origin master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如<code>origin</code>主机的<code>master</code>，就要用<code>origin/master</code>读取。</p>\n<p><code>git branch</code>命令的<code>-r</code>选项，可以用来查看远程分支，<code>-a</code>选项查看所有分支。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git branch -r</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> origin/master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git branch -a</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> * master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">   remotes/origin/master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，本地主机的当前分支是<code>master</code>，远程分支是<code>origin/master</code>。</p>\n<p>取回远程主机的更新以后，可以在它的基础上，使用<code>git checkout</code>命令创建一个新的分支。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git checkout -b newBrach origin/master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，在<code>origin/master</code>的基础上，创建一个新分支。</p>\n<p>此外，也可以使用<code>git merge</code>命令或者<code>git rebase</code>命令，在本地分支上合并远程分支。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git merge origin/master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> <span class=\"comment\"># 或者</span></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git rebase origin/master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示在当前分支上，合并<code>origin/master</code>。</p>\n<h2 id=\"四、git-pull\"><a href=\"#四、git-pull\" class=\"headerlink\" title=\"四、git pull\"></a>四、git pull</h2><p><code>git pull</code>命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。它的完整格式稍稍有点复杂。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>比如，取回<code>origin</code>主机的<code>next</code>分支，与本地的<code>master</code>分支合并，需要写成下面这样。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git pull origin next:master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git pull origin next</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，取回<code>origin/next</code>分支，再与当前分支合并。实质上，这等同于先做<code>git fetch</code>，再做<code>git merge</code>。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git fetch origin</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git merge origin/next</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系（tracking）。比如，在<code>git clone</code>的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的<code>master</code>分支自动”追踪”<code>origin/master</code>分支。</p>\n<p>Git也允许手动建立追踪关系。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> git branch --<span class=\"built_in\">set</span>-upstream master origin/next</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令指定<code>master</code>分支追踪<code>origin/next</code>分支。</p>\n<p>如果当前分支与远程分支存在追踪关系，<code>git pull</code>就可以省略远程分支名。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git pull origin</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，本地的当前分支自动与对应的<code>origin</code>主机”追踪分支”（remote-tracking branch）进行合并。</p>\n<p>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git pull</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，当前分支自动与唯一一个追踪分支进行合并。</p>\n<p>如果合并需要采用rebase模式，可以使用<code>--rebase</code>选项。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>如果远程主机删除了某个分支，默认情况下，<code>git pull</code> 不会在拉取远程分支的时候，删除对应的本地分支。这是为了防止，由于其他人操作了远程主机，导致<code>git pull</code>不知不觉删除了本地分支。</p>\n<p>但是，你可以改变这个行为，加上参数 <code>-p</code> 就会在本地删除远程已经删除的分支。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git pull -p</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> <span class=\"comment\"># 等同于下面的命令</span></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git fetch --prune origin </span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git fetch -p</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"五、git-push\"><a href=\"#五、git-push\" class=\"headerlink\" title=\"五、git push\"></a>五、git push</h2><p><code>git push</code>命令用于将本地分支的更新，推送到远程主机。它的格式与<code>git pull</code>命令相仿。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>注意，分支推送顺序的写法是&lt;来源地&gt;:&lt;目的地&gt;，所以<code>git pull</code>是&lt;远程分支&gt;:&lt;本地分支&gt;，而<code>git push</code>是&lt;本地分支&gt;:&lt;远程分支&gt;。</p>\n<p>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push origin master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，将本地的<code>master</code>分支推送到<code>origin</code>主机的<code>master</code>分支。如果后者不存在，则会被新建。</p>\n<p>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push origin :master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> <span class=\"comment\"># 等同于</span></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push origin --delete master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示删除<code>origin</code>主机的<code>master</code>分支。</p>\n<p>如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push origin</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，将当前分支推送到<code>origin</code>主机的对应分支。</p>\n<p>如果当前分支只有一个追踪分支，那么主机名都可以省略。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>如果当前分支与多个主机存在追踪关系，则可以使用<code>-u</code>选项指定一个默认主机，这样后面就可以不加任何参数使用<code>git push</code>。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push -u origin master</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令将本地的<code>master</code>分支推送到<code>origin</code>主机，同时指定<code>origin</code>为默认主机，后面就可以不加任何参数使用<code>git push</code>了。</p>\n<p>不带任何参数的<code>git push</code>，默认只推送当前分支，这叫做simple方式。此外，还有一种matching方式，会推送所有有对应的远程分支的本地分支。Git 2.0版本之前，默认采用matching方法，现在改为默认采用simple方式。如果要修改这个设置，可以采用<code>git config</code>命令。</p>\n<blockquote>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; $ git<span class=\"built_in\"> config </span>--global push.default matching</div><div class=\"line\">&gt; # 或者</div><div class=\"line\">&gt; $ git<span class=\"built_in\"> config </span>--global push.default simple</div><div class=\"line\">&gt;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n</blockquote>\n<p>还有一种情况，就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要使用<code>--all</code>选项。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push --all origin</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令表示，将所有本地分支都推送到<code>origin</code>主机。</p>\n<p>如果远程主机的版本比本地版本更新，推送时Git会报错，要求先在本地做<code>git pull</code>合并差异，然后再推送到远程主机。这时，如果你一定要推送，可以使用<code>--force</code>选项。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push --force origin </span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>上面命令使用<code>--force</code>选项，结果导致远程主机上更新的版本被覆盖。除非你很确定要这样做，否则应该尽量避免使用<code>--force</code>选项。</p>\n<p>最后，<code>git push</code>不会推送标签（tag），除非使用<code>--tags</code>选项。</p>\n<blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> $ git push origin --tags</span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n</blockquote>\n<p>（完）</p>\n"},{"title":"GIT相关命令","date":"2017-08-19T19:24:09.000Z","_content":"# 查看所有分支\n~~~bash\ngit branch -a  \n~~~\n# 查看本地分支\n~~~bash\ngit branch   \n~~~\n\n#  查看远程分支\n\n```bash\n git remote \n\n git remote -v     # 带详细信息\n```\n\n# 添加远程仓库\n\n```bash\ngit remote add [shortname][url]\ngit remote add pb git://github.com/paulboone/ticgit.git \n#名字为pb  地址为git://github.com/paulboone/ticgit.git\n```\n\n\n\n# 创建分支\n\n```bash\ngit branch  test   #  text为分支名称\n```\n\n# 切换分支\n\n```bash\ngit checkout test \n```\n\n# 当前分支推送到远程分支\n\n```bash\ngit checkout test \n```\n\n# 删除本地分支\n\n```bash\ngit branch -d  xxxxx\n\n或 git  br -d  xxxxx\n```\n\n# 删除远程版本\n\n```bash\ngit push origin :br-1.0.0 \n```\n\n# 删除远程分支  \n\n```bash\ngit branch -r -d origin/branch-name  \n\ngit push origin :branch-name   #推送一个空的本地分支到远程分支就是删除远程分支\n```\n\n","source":"_posts/GIT相关命令.md","raw":"---\ntitle: GIT相关命令\ntag: git\ncategories: 网络技术\ndate: 2017-08-20 03:24:09\n---\n# 查看所有分支\n~~~bash\ngit branch -a  \n~~~\n# 查看本地分支\n~~~bash\ngit branch   \n~~~\n\n#  查看远程分支\n\n```bash\n git remote \n\n git remote -v     # 带详细信息\n```\n\n# 添加远程仓库\n\n```bash\ngit remote add [shortname][url]\ngit remote add pb git://github.com/paulboone/ticgit.git \n#名字为pb  地址为git://github.com/paulboone/ticgit.git\n```\n\n\n\n# 创建分支\n\n```bash\ngit branch  test   #  text为分支名称\n```\n\n# 切换分支\n\n```bash\ngit checkout test \n```\n\n# 当前分支推送到远程分支\n\n```bash\ngit checkout test \n```\n\n# 删除本地分支\n\n```bash\ngit branch -d  xxxxx\n\n或 git  br -d  xxxxx\n```\n\n# 删除远程版本\n\n```bash\ngit push origin :br-1.0.0 \n```\n\n# 删除远程分支  \n\n```bash\ngit branch -r -d origin/branch-name  \n\ngit push origin :branch-name   #推送一个空的本地分支到远程分支就是删除远程分支\n```\n\n","slug":"GIT相关命令","published":1,"updated":"2017-08-20T05:46:13.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kfg8r00002ygkv6rmgswh7","content":"<h1 id=\"查看所有分支\"><a href=\"#查看所有分支\" class=\"headerlink\" title=\"查看所有分支\"></a>查看所有分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -a</div></pre></td></tr></table></figure>\n<h1 id=\"查看本地分支\"><a href=\"#查看本地分支\" class=\"headerlink\" title=\"查看本地分支\"></a>查看本地分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch</div></pre></td></tr></table></figure>\n<h1 id=\"查看远程分支\"><a href=\"#查看远程分支\" class=\"headerlink\" title=\"查看远程分支\"></a>查看远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote </div><div class=\"line\"></div><div class=\"line\">git remote -v     <span class=\"comment\"># 带详细信息</span></div></pre></td></tr></table></figure>\n<h1 id=\"添加远程仓库\"><a href=\"#添加远程仓库\" class=\"headerlink\" title=\"添加远程仓库\"></a>添加远程仓库</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add [shortname][url]</div><div class=\"line\">git remote add pb git://github.com/paulboone/ticgit.git </div><div class=\"line\"><span class=\"comment\">#名字为pb  地址为git://github.com/paulboone/ticgit.git</span></div></pre></td></tr></table></figure>\n<h1 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch  <span class=\"built_in\">test</span>   <span class=\"comment\">#  text为分支名称</span></div></pre></td></tr></table></figure>\n<h1 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout <span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n<h1 id=\"当前分支推送到远程分支\"><a href=\"#当前分支推送到远程分支\" class=\"headerlink\" title=\"当前分支推送到远程分支\"></a>当前分支推送到远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout <span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n<h1 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -d  xxxxx</div><div class=\"line\"></div><div class=\"line\">或 git  br -d  xxxxx</div></pre></td></tr></table></figure>\n<h1 id=\"删除远程版本\"><a href=\"#删除远程版本\" class=\"headerlink\" title=\"删除远程版本\"></a>删除远程版本</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin :br-1.0.0</div></pre></td></tr></table></figure>\n<h1 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -r -d origin/branch-name  </div><div class=\"line\"></div><div class=\"line\">git push origin :branch-name   <span class=\"comment\">#推送一个空的本地分支到远程分支就是删除远程分支</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"查看所有分支\"><a href=\"#查看所有分支\" class=\"headerlink\" title=\"查看所有分支\"></a>查看所有分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -a</div></pre></td></tr></table></figure>\n<h1 id=\"查看本地分支\"><a href=\"#查看本地分支\" class=\"headerlink\" title=\"查看本地分支\"></a>查看本地分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch</div></pre></td></tr></table></figure>\n<h1 id=\"查看远程分支\"><a href=\"#查看远程分支\" class=\"headerlink\" title=\"查看远程分支\"></a>查看远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote </div><div class=\"line\"></div><div class=\"line\">git remote -v     <span class=\"comment\"># 带详细信息</span></div></pre></td></tr></table></figure>\n<h1 id=\"添加远程仓库\"><a href=\"#添加远程仓库\" class=\"headerlink\" title=\"添加远程仓库\"></a>添加远程仓库</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add [shortname][url]</div><div class=\"line\">git remote add pb git://github.com/paulboone/ticgit.git </div><div class=\"line\"><span class=\"comment\">#名字为pb  地址为git://github.com/paulboone/ticgit.git</span></div></pre></td></tr></table></figure>\n<h1 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch  <span class=\"built_in\">test</span>   <span class=\"comment\">#  text为分支名称</span></div></pre></td></tr></table></figure>\n<h1 id=\"切换分支\"><a href=\"#切换分支\" class=\"headerlink\" title=\"切换分支\"></a>切换分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout <span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n<h1 id=\"当前分支推送到远程分支\"><a href=\"#当前分支推送到远程分支\" class=\"headerlink\" title=\"当前分支推送到远程分支\"></a>当前分支推送到远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout <span class=\"built_in\">test</span></div></pre></td></tr></table></figure>\n<h1 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -d  xxxxx</div><div class=\"line\"></div><div class=\"line\">或 git  br -d  xxxxx</div></pre></td></tr></table></figure>\n<h1 id=\"删除远程版本\"><a href=\"#删除远程版本\" class=\"headerlink\" title=\"删除远程版本\"></a>删除远程版本</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin :br-1.0.0</div></pre></td></tr></table></figure>\n<h1 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git branch -r -d origin/branch-name  </div><div class=\"line\"></div><div class=\"line\">git push origin :branch-name   <span class=\"comment\">#推送一个空的本地分支到远程分支就是删除远程分支</span></div></pre></td></tr></table></figure>\n"},{"title":"git pull 和 clone的区别及用法","date":"2017-08-19T21:22:09.000Z","_content":"# 一、git pull\ngit pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。\n\n完整格式：$ git pull <远程主机名> <远程分支名>:<本地分支名>\n\n完整格式举例：比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样，\n\n## （1）$ git pull origin next:master：如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\n\n\n\n## （2）$ git pull origin next：上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。\n\n\n\n\n```bash\n$ git fetch origin\n$ git merge origin/next\n```\n\n在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。\n\nGit也允许手动建立追踪关系，git branch --set-upstream master origin/next\n上面命令指定master分支追踪origin/next分支。如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。\n\n```\n$ git pull origin\n```\n\n\n上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”(remote-tracking branch)进行合并。\n如果当前分支只有一个追踪分支，连远程主机名都可以省略。\n\n# 二、get clone\n远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。\n##（1）$ git clone <版本库的网址>\n比如，克隆jQuery的版本库。\n```bash\n$ git clone https://github.com/jquery/jquery.git\n```\n\n\n该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。\n## （2）$ git clone <版本库的网址> <本地目录名>\ngit clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。\n```bash\n$ git clone http[s]://example.com/path/to/repo.git/\n$ git clone ssh://example.com/path/to/repo.git/\n$ git clone git://example.com/path/to/repo.git/\n$ git clone /opt/git/project.git\n$ git clone file:///opt/git/project.git\n$ git clone ftp[s]://example.com/path/to/repo.git/\n$ git clone rsync://example.com/path/to/repo.git/\n```\n\n\n## （3）SSH协议还有另一种写法。\n```bash\n$ git clone [user@]example.com:path/to/repo.git/\n```\n\n\n通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。\n","source":"_posts/git pull和clone的区别及用法.md","raw":"---\ntitle: git pull 和 clone的区别及用法\ntag: git\ncategories: 网络技术\ndate: 2017-08-20 05:22:09\n---\n# 一、git pull\ngit pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。\n\n完整格式：$ git pull <远程主机名> <远程分支名>:<本地分支名>\n\n完整格式举例：比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样，\n\n## （1）$ git pull origin next:master：如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\n\n\n\n## （2）$ git pull origin next：上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。\n\n\n\n\n```bash\n$ git fetch origin\n$ git merge origin/next\n```\n\n在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。\n\nGit也允许手动建立追踪关系，git branch --set-upstream master origin/next\n上面命令指定master分支追踪origin/next分支。如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。\n\n```\n$ git pull origin\n```\n\n\n上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”(remote-tracking branch)进行合并。\n如果当前分支只有一个追踪分支，连远程主机名都可以省略。\n\n# 二、get clone\n远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。\n##（1）$ git clone <版本库的网址>\n比如，克隆jQuery的版本库。\n```bash\n$ git clone https://github.com/jquery/jquery.git\n```\n\n\n该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。\n## （2）$ git clone <版本库的网址> <本地目录名>\ngit clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。\n```bash\n$ git clone http[s]://example.com/path/to/repo.git/\n$ git clone ssh://example.com/path/to/repo.git/\n$ git clone git://example.com/path/to/repo.git/\n$ git clone /opt/git/project.git\n$ git clone file:///opt/git/project.git\n$ git clone ftp[s]://example.com/path/to/repo.git/\n$ git clone rsync://example.com/path/to/repo.git/\n```\n\n\n## （3）SSH协议还有另一种写法。\n```bash\n$ git clone [user@]example.com:path/to/repo.git/\n```\n\n\n通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。\n","slug":"git pull和clone的区别及用法","published":1,"updated":"2017-08-20T05:47:49.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kfg8ri0006ygkv05wl6z5d","content":"<h1 id=\"一、git-pull\"><a href=\"#一、git-pull\" class=\"headerlink\" title=\"一、git pull\"></a>一、git pull</h1><p>git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。</p>\n<p>完整格式：$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</p>\n<p>完整格式举例：比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样，</p>\n<h2 id=\"（1）-git-pull-origin-next-master：如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\"><a href=\"#（1）-git-pull-origin-next-master：如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\" class=\"headerlink\" title=\"（1）$ git pull origin next:master：如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\"></a>（1）$ git pull origin next:master：如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</h2><h2 id=\"（2）-git-pull-origin-next：上面命令表示，取回origin-next分支，再与当前分支合并。实质上，这等同于先做git-fetch，再做git-merge。\"><a href=\"#（2）-git-pull-origin-next：上面命令表示，取回origin-next分支，再与当前分支合并。实质上，这等同于先做git-fetch，再做git-merge。\" class=\"headerlink\" title=\"（2）$ git pull origin next：上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。\"></a>（2）$ git pull origin next：上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git fetch origin</div><div class=\"line\">$ git merge origin/next</div></pre></td></tr></table></figure>\n<p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。</p>\n<p>Git也允许手动建立追踪关系，git branch –set-upstream master origin/next<br>上面命令指定master分支追踪origin/next分支。如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull origin</span></div></pre></td></tr></table></figure>\n<p>上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”(remote-tracking branch)进行合并。<br>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p>\n<h1 id=\"二、get-clone\"><a href=\"#二、get-clone\" class=\"headerlink\" title=\"二、get clone\"></a>二、get clone</h1><p>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。</p>\n<p>##（1）$ git clone &lt;版本库的网址&gt;<br>比如，克隆jQuery的版本库。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/jquery/jquery.git</div></pre></td></tr></table></figure></p>\n<p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。</p>\n<h2 id=\"（2）-git-clone-lt-版本库的网址-gt-lt-本地目录名-gt\"><a href=\"#（2）-git-clone-lt-版本库的网址-gt-lt-本地目录名-gt\" class=\"headerlink\" title=\"（2）$ git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;\"></a>（2）$ git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</h2><p>git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> http[s]://example.com/path/to/repo.git/</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> ssh://example.com/path/to/repo.git/</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> git://example.com/path/to/repo.git/</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> /opt/git/project.git</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> file:///opt/git/project.git</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> ftp[s]://example.com/path/to/repo.git/</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> rsync://example.com/path/to/repo.git/</div></pre></td></tr></table></figure></p>\n<h2 id=\"（3）SSH协议还有另一种写法。\"><a href=\"#（3）SSH协议还有另一种写法。\" class=\"headerlink\" title=\"（3）SSH协议还有另一种写法。\"></a>（3）SSH协议还有另一种写法。</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> [user@]example.com:path/to/repo.git/</div></pre></td></tr></table></figure>\n<p>通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、git-pull\"><a href=\"#一、git-pull\" class=\"headerlink\" title=\"一、git pull\"></a>一、git pull</h1><p>git pull命令的作用是，取回远程主机某个分支的更新，再与本地的指定分支合并。</p>\n<p>完整格式：$ git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</p>\n<p>完整格式举例：比如，取回origin主机的next分支，与本地的master分支合并，需要写成下面这样，</p>\n<h2 id=\"（1）-git-pull-origin-next-master：如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\"><a href=\"#（1）-git-pull-origin-next-master：如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\" class=\"headerlink\" title=\"（1）$ git pull origin next:master：如果远程分支是与当前分支合并，则冒号后面的部分可以省略。\"></a>（1）$ git pull origin next:master：如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</h2><h2 id=\"（2）-git-pull-origin-next：上面命令表示，取回origin-next分支，再与当前分支合并。实质上，这等同于先做git-fetch，再做git-merge。\"><a href=\"#（2）-git-pull-origin-next：上面命令表示，取回origin-next分支，再与当前分支合并。实质上，这等同于先做git-fetch，再做git-merge。\" class=\"headerlink\" title=\"（2）$ git pull origin next：上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。\"></a>（2）$ git pull origin next：上面命令表示，取回origin/next分支，再与当前分支合并。实质上，这等同于先做git fetch，再做git merge。</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git fetch origin</div><div class=\"line\">$ git merge origin/next</div></pre></td></tr></table></figure>\n<p>在某些场合，Git会自动在本地分支与远程分支之间，建立一种追踪关系(tracking)。比如，在git clone的时候，所有本地分支默认与远程主机的同名分支，建立追踪关系，也就是说，本地的master分支自动”追踪”origin/master分支。</p>\n<p>Git也允许手动建立追踪关系，git branch –set-upstream master origin/next<br>上面命令指定master分支追踪origin/next分支。如果当前分支与远程分支存在追踪关系，git pull就可以省略远程分支名。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git pull origin</span></div></pre></td></tr></table></figure>\n<p>上面命令表示，本地的当前分支自动与对应的origin主机”追踪分支”(remote-tracking branch)进行合并。<br>如果当前分支只有一个追踪分支，连远程主机名都可以省略。</p>\n<h1 id=\"二、get-clone\"><a href=\"#二、get-clone\" class=\"headerlink\" title=\"二、get clone\"></a>二、get clone</h1><p>远程操作的第一步，通常是从远程主机克隆一个版本库，这时就要用到git clone命令。</p>\n<p>##（1）$ git clone &lt;版本库的网址&gt;<br>比如，克隆jQuery的版本库。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/jquery/jquery.git</div></pre></td></tr></table></figure></p>\n<p>该命令会在本地主机生成一个目录，与远程主机的版本库同名。如果要指定不同的目录名，可以将目录名作为git clone命令的第二个参数。</p>\n<h2 id=\"（2）-git-clone-lt-版本库的网址-gt-lt-本地目录名-gt\"><a href=\"#（2）-git-clone-lt-版本库的网址-gt-lt-本地目录名-gt\" class=\"headerlink\" title=\"（2）$ git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;\"></a>（2）$ git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</h2><p>git clone支持多种协议，除了HTTP(s)以外，还支持SSH、Git、本地文件协议等，下面是一些例子。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> http[s]://example.com/path/to/repo.git/</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> ssh://example.com/path/to/repo.git/</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> git://example.com/path/to/repo.git/</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> /opt/git/project.git</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> file:///opt/git/project.git</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> ftp[s]://example.com/path/to/repo.git/</div><div class=\"line\">$ git <span class=\"built_in\">clone</span> rsync://example.com/path/to/repo.git/</div></pre></td></tr></table></figure></p>\n<h2 id=\"（3）SSH协议还有另一种写法。\"><a href=\"#（3）SSH协议还有另一种写法。\" class=\"headerlink\" title=\"（3）SSH协议还有另一种写法。\"></a>（3）SSH协议还有另一种写法。</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git <span class=\"built_in\">clone</span> [user@]example.com:path/to/repo.git/</div></pre></td></tr></table></figure>\n<p>通常来说，Git协议下载速度最快，SSH协议用于需要用户认证的场合。</p>\n"},{"title":"（转）Hexo添加文章时自动打开编辑器","date":"2017-08-19T19:20:09.000Z","_content":"\n[![阅读全文](http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/hexo_logo.jpg)](https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html)\n\n[](https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html)\n\n在`Hexo`中新建一篇博文非常简单，只需要在命令行中键入以下命令然后回车即可：\n\n```\nhexo new \"The title of your blog\"\n```\n\n此后Hexo便会在Hexo的根目录的`source`文件夹下的`_posts`目录下自动帮你创建相应的md文件。然后我们打开该目录，找到刚刚Hexo自动生成的文件打开编辑即可。\n\n但是当我们的博文比较多，这样我们就需要在成堆的Markdown文件中找到刚才自动生成的文件，这样做显然是一件比较痛苦的事情。\n\n\n\n- 首先在Hexo目录下的`scripts`目录中创建一个JavaScript脚本文件。\n- 如果没有这个`scripts`目录，则新建一个。\n- `scripts`目录新建的JavaScript脚本文件可以任意取名。\n\n通过这个脚本，我们用其来监听`hexo new`这个动作，并在检测到`hexo new`之后，执行编辑器打开的命令。\n\n如果你是windows平台的Hexo用户，则将下列内容写入你的脚本：\n\n```\nvar spawn = require('child_process').exec;\n\n// Hexo 2.x 用户复制这段\nhexo.on('new', function(path){\n  spawn('start  \"markdown编辑器绝对路径.exe\" ' + path);\n});\n\n// Hexo 3 用户复制这段\nhexo.on('new', function(data){\n  spawn('start  \"markdown编辑器绝对路径.exe\" ' + data.path);\n});\n```\n\n如果你是Mac平台Hexo用户，则将下列内容写入你的脚本：\n\n```\nvar exec = require('child_process').exec;\n\n// Hexo 2.x 用户复制这段\nhexo.on('new', function(path){\n    exec('open -a \"markdown编辑器绝对路径.app\" ' + path);\n});\n// Hexo 3 用户复制这段\nhexo.on('new', function(data){\n    exec('open -a \"markdown编辑器绝对路径.app\" ' + data.path);\n});\n```\n\n保存并退出脚本之后，在命令行中键入：\n\n```\nhexo new \"auto open editor test\"\n```\n\n是不是就顺利的自动打开了自动生成的md文件啦~\n\nEnjoy it！\n\n- **本文作者：** 夏末\n- **本文链接：** [https://notes.wanghao.work/2015-06-29-Hexo添加文章时自动打开编辑器.html](https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html)\n- **版权声明： **本博客所有文章除特别声明外，均采用 [CC BY-NC-SA 3.0](https://creativecommons.org/licenses/by-nc-sa/3.0/) 许可协议。转载请注明出处！","source":"_posts/mi.md","raw":"---\ntitle: （转）Hexo添加文章时自动打开编辑器\ndate: 2017-08-20 03:20:09\ntags: hexo\ncategories: 网站相关\n---\n\n[![阅读全文](http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/hexo_logo.jpg)](https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html)\n\n[](https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html)\n\n在`Hexo`中新建一篇博文非常简单，只需要在命令行中键入以下命令然后回车即可：\n\n```\nhexo new \"The title of your blog\"\n```\n\n此后Hexo便会在Hexo的根目录的`source`文件夹下的`_posts`目录下自动帮你创建相应的md文件。然后我们打开该目录，找到刚刚Hexo自动生成的文件打开编辑即可。\n\n但是当我们的博文比较多，这样我们就需要在成堆的Markdown文件中找到刚才自动生成的文件，这样做显然是一件比较痛苦的事情。\n\n\n\n- 首先在Hexo目录下的`scripts`目录中创建一个JavaScript脚本文件。\n- 如果没有这个`scripts`目录，则新建一个。\n- `scripts`目录新建的JavaScript脚本文件可以任意取名。\n\n通过这个脚本，我们用其来监听`hexo new`这个动作，并在检测到`hexo new`之后，执行编辑器打开的命令。\n\n如果你是windows平台的Hexo用户，则将下列内容写入你的脚本：\n\n```\nvar spawn = require('child_process').exec;\n\n// Hexo 2.x 用户复制这段\nhexo.on('new', function(path){\n  spawn('start  \"markdown编辑器绝对路径.exe\" ' + path);\n});\n\n// Hexo 3 用户复制这段\nhexo.on('new', function(data){\n  spawn('start  \"markdown编辑器绝对路径.exe\" ' + data.path);\n});\n```\n\n如果你是Mac平台Hexo用户，则将下列内容写入你的脚本：\n\n```\nvar exec = require('child_process').exec;\n\n// Hexo 2.x 用户复制这段\nhexo.on('new', function(path){\n    exec('open -a \"markdown编辑器绝对路径.app\" ' + path);\n});\n// Hexo 3 用户复制这段\nhexo.on('new', function(data){\n    exec('open -a \"markdown编辑器绝对路径.app\" ' + data.path);\n});\n```\n\n保存并退出脚本之后，在命令行中键入：\n\n```\nhexo new \"auto open editor test\"\n```\n\n是不是就顺利的自动打开了自动生成的md文件啦~\n\nEnjoy it！\n\n- **本文作者：** 夏末\n- **本文链接：** [https://notes.wanghao.work/2015-06-29-Hexo添加文章时自动打开编辑器.html](https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html)\n- **版权声明： **本博客所有文章除特别声明外，均采用 [CC BY-NC-SA 3.0](https://creativecommons.org/licenses/by-nc-sa/3.0/) 许可协议。转载请注明出处！","slug":"mi","published":1,"updated":"2017-08-20T05:42:26.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kfg8rj0007ygkv1iceamt2","content":"<p><a href=\"https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html\" target=\"_blank\" rel=\"external\"><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/hexo_logo.jpg\" alt=\"阅读全文\"></a></p>\n<p><a href=\"https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html\" target=\"_blank\" rel=\"external\"></a></p>\n<p>在<code>Hexo</code>中新建一篇博文非常简单，只需要在命令行中键入以下命令然后回车即可：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"The title of your blog\"</span></div></pre></td></tr></table></figure>\n<p>此后Hexo便会在Hexo的根目录的<code>source</code>文件夹下的<code>_posts</code>目录下自动帮你创建相应的md文件。然后我们打开该目录，找到刚刚Hexo自动生成的文件打开编辑即可。</p>\n<p>但是当我们的博文比较多，这样我们就需要在成堆的Markdown文件中找到刚才自动生成的文件，这样做显然是一件比较痛苦的事情。</p>\n<ul>\n<li>首先在Hexo目录下的<code>scripts</code>目录中创建一个JavaScript脚本文件。</li>\n<li>如果没有这个<code>scripts</code>目录，则新建一个。</li>\n<li><code>scripts</code>目录新建的JavaScript脚本文件可以任意取名。</li>\n</ul>\n<p>通过这个脚本，我们用其来监听<code>hexo new</code>这个动作，并在检测到<code>hexo new</code>之后，执行编辑器打开的命令。</p>\n<p>如果你是windows平台的Hexo用户，则将下列内容写入你的脚本：</p>\n<figure class=\"highlight scilab\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var spawn = require(<span class=\"string\">'child_process'</span>).<span class=\"built_in\">exec</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Hexo 2.x 用户复制这段</span></div><div class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(path)</span>&#123;</span></div><div class=\"line\">  spawn(<span class=\"string\">'start  \"</span>markdown编辑器绝对路径.exe<span class=\"string\">\" '</span> + path);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Hexo 3 用户复制这段</span></div><div class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(data)</span>&#123;</span></div><div class=\"line\">  spawn(<span class=\"string\">'start  \"</span>markdown编辑器绝对路径.exe<span class=\"string\">\" '</span> + data.path);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果你是Mac平台Hexo用户，则将下列内容写入你的脚本：</p>\n<figure class=\"highlight scilab\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var <span class=\"built_in\">exec</span> = require(<span class=\"string\">'child_process'</span>).<span class=\"built_in\">exec</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Hexo 2.x 用户复制这段</span></div><div class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(path)</span>&#123;</span></div><div class=\"line\">    <span class=\"built_in\">exec</span>(<span class=\"string\">'open -a \"</span>markdown编辑器绝对路径.app<span class=\"string\">\" '</span> + path);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// Hexo 3 用户复制这段</span></div><div class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(data)</span>&#123;</span></div><div class=\"line\">    <span class=\"built_in\">exec</span>(<span class=\"string\">'open -a \"</span>markdown编辑器绝对路径.app<span class=\"string\">\" '</span> + data.path);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>保存并退出脚本之后，在命令行中键入：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"auto open editor test\"</span></div></pre></td></tr></table></figure>\n<p>是不是就顺利的自动打开了自动生成的md文件啦~</p>\n<p>Enjoy it！</p>\n<ul>\n<li><strong>本文作者：</strong> 夏末</li>\n<li><strong>本文链接：</strong> <a href=\"https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html\" target=\"_blank\" rel=\"external\">https://notes.wanghao.work/2015-06-29-Hexo添加文章时自动打开编辑器.html</a></li>\n<li><strong>版权声明： </strong>本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" target=\"_blank\" rel=\"external\">CC BY-NC-SA 3.0</a> 许可协议。转载请注明出处！</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html\" target=\"_blank\" rel=\"external\"><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/hexo_logo.jpg\" alt=\"阅读全文\"></a></p>\n<p><a href=\"https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html\" target=\"_blank\" rel=\"external\"></a></p>\n<p>在<code>Hexo</code>中新建一篇博文非常简单，只需要在命令行中键入以下命令然后回车即可：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"The title of your blog\"</span></div></pre></td></tr></table></figure>\n<p>此后Hexo便会在Hexo的根目录的<code>source</code>文件夹下的<code>_posts</code>目录下自动帮你创建相应的md文件。然后我们打开该目录，找到刚刚Hexo自动生成的文件打开编辑即可。</p>\n<p>但是当我们的博文比较多，这样我们就需要在成堆的Markdown文件中找到刚才自动生成的文件，这样做显然是一件比较痛苦的事情。</p>\n<ul>\n<li>首先在Hexo目录下的<code>scripts</code>目录中创建一个JavaScript脚本文件。</li>\n<li>如果没有这个<code>scripts</code>目录，则新建一个。</li>\n<li><code>scripts</code>目录新建的JavaScript脚本文件可以任意取名。</li>\n</ul>\n<p>通过这个脚本，我们用其来监听<code>hexo new</code>这个动作，并在检测到<code>hexo new</code>之后，执行编辑器打开的命令。</p>\n<p>如果你是windows平台的Hexo用户，则将下列内容写入你的脚本：</p>\n<figure class=\"highlight scilab\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">var spawn = require(<span class=\"string\">'child_process'</span>).<span class=\"built_in\">exec</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Hexo 2.x 用户复制这段</span></div><div class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(path)</span>&#123;</span></div><div class=\"line\">  spawn(<span class=\"string\">'start  \"</span>markdown编辑器绝对路径.exe<span class=\"string\">\" '</span> + path);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Hexo 3 用户复制这段</span></div><div class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(data)</span>&#123;</span></div><div class=\"line\">  spawn(<span class=\"string\">'start  \"</span>markdown编辑器绝对路径.exe<span class=\"string\">\" '</span> + data.path);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>如果你是Mac平台Hexo用户，则将下列内容写入你的脚本：</p>\n<figure class=\"highlight scilab\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var <span class=\"built_in\">exec</span> = require(<span class=\"string\">'child_process'</span>).<span class=\"built_in\">exec</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Hexo 2.x 用户复制这段</span></div><div class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(path)</span>&#123;</span></div><div class=\"line\">    <span class=\"built_in\">exec</span>(<span class=\"string\">'open -a \"</span>markdown编辑器绝对路径.app<span class=\"string\">\" '</span> + path);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// Hexo 3 用户复制这段</span></div><div class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(data)</span>&#123;</span></div><div class=\"line\">    <span class=\"built_in\">exec</span>(<span class=\"string\">'open -a \"</span>markdown编辑器绝对路径.app<span class=\"string\">\" '</span> + data.path);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>保存并退出脚本之后，在命令行中键入：</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"auto open editor test\"</span></div></pre></td></tr></table></figure>\n<p>是不是就顺利的自动打开了自动生成的md文件啦~</p>\n<p>Enjoy it！</p>\n<ul>\n<li><strong>本文作者：</strong> 夏末</li>\n<li><strong>本文链接：</strong> <a href=\"https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html\" target=\"_blank\" rel=\"external\">https://notes.wanghao.work/2015-06-29-Hexo添加文章时自动打开编辑器.html</a></li>\n<li><strong>版权声明： </strong>本博客所有文章除特别声明外，均采用 <a href=\"https://creativecommons.org/licenses/by-nc-sa/3.0/\" target=\"_blank\" rel=\"external\">CC BY-NC-SA 3.0</a> 许可协议。转载请注明出处！</li>\n</ul>\n"},{"title":"Linux TCP加速工具 —— LotServer(锐速母公司) 一键安装脚本","date":"2017-08-19T05:20:09.000Z","_content":"\n# Linux TCP加速工具 —— LotServer(锐速母公司) 一键安装脚本\n\n锐速(ServerSpeeder)可以说是LotServer的马甲，是针对民用的，而LotServer则是针对企业用户的，锐速现在基本上已经关了，而这个LotServer还在持续运营。\n\n**Only for Linux.**\n\n**从根本原因上解决锐速断流问题，断流的根本原因是没有完整破解验证机制。**\n\n1. 支持自动检测公网网卡，多个网卡也能区分。\n2. 支持自动适配内核 (需锐速支持)。\n3. 添加询问是否开启accppp功能 (实测并开启后没有效果)。\n4. 默认设置为G口宽带 (听说设置大点可以提高速度)。\n5. 支持一键完全卸载 (此脚本安装的无残留)。\n6. **所需文件均来自 GiuHub，不放心可自行查阅 (完全公开)。**\n7. 不支持自动更换内核，请自行更换(网上教程非常多)。\n8. **不支持OpenVZ，不需要尝试，会告诉你找不到网卡。**\n\n```\n注意：OVZ虚拟化的VPS并不支持锐速加速器的安装，KVM和XEN应该基本都可以。\n```\n\n**作者博客：https://moeclub.org/2017/03/08/14/**\n\n安装文件 **appex.zip** 为 LotServer 的，(感谢 LotServer 提供安装文件)。\n\n使用前请日常` apt-get update / yum update `，欢迎反馈bug(各种安装错误)。\n\n**使用前建议先查看linux支持内核列表，对照一下系统和内核是否可以安装 LotServer！**\n\n服务器使用`uname -r`命令来查询内核版本，例如返回的是`3.2.0-4-amd64`，`3.2.0-4-amd64`就是你的内核版本。\n\n> 强烈推荐大家使用 **Debian7 x64系统 | 3.2.0-4-amd64内核** ，这个系统和内核无论是锐速、Lotserver还是BBR，除了配置太低的我都没安装失败过！\n\n## 安装LotServer\n\n```bash\nwget --no-check-certificate -qO /tmp/appex.sh \"https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh\" && bash /tmp/appex.sh 'install'\n\n\n```\n\n安装一开始的时候，会提示：\n\n```bash\nPress Enter to Continue...\n# 这个是提示你按回车键继续\n\n\n```\n\n如果安装过程中没问题的话，最后会提示：\n\n```bash\nAccelerate VPN (PPTP,L2TP,etc.)? [n]:\n# 是否加速VPN\n \nAuto load ServerSpeeder on linux start-up? [y]:\n# 是否开机启动\n \nRun ServerSpeeder now? [y]:\n# 是否现在启动锐速\n \n# 全部默认回车即可。\n\n\n```\n\n最后出现这样的提示就说明安装并启动成功：\n\n```bash\n[Running Status]\nServerSpeeder is running!\nversion              3.11.20.4\n \n[License Information]\nLicense              6001ADDF578B6C0E (valid on current device)\nMaxSession           unlimited\nMaxTcpAccSession     unlimited\nMaxBandwidth(kbps)   1024000\nExpireDate           2035-12-31\n....\n# 以下省略....\n\n```\n\n## 卸载LotServer\n\n```bash\nwget --no-check-certificate -qO /tmp/appex.sh \"https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh\" && bash /tmp/appex.sh 'uninstall'\n\n```\n\n## 使用说明\n\n```bash\n/appex/bin/serverSpeeder.sh start\n# 启动 LotServer\n \n/appex/bin/serverSpeeder.sh stop\n# 停止 LotServer\n \n/appex/bin/serverSpeeder.sh restart\n# 重启 LotServer\n \n/appex/bin/serverSpeeder.sh status\n# 状态查询\n \n/appex/bin/serverSpeeder.sh renewLic\n# 更新许可\n\n\n```\n\n[代码托管地址](https://github.com/0oVicero0/serverSpeeser_Install)\n\n[LotServer 完整使用介绍 PDF手册](https://github.com/0oVicero0/serverSpeeder_Install/blob/master/lotServer.pdf)\n\n**安装完了，想要自己修改配置最大化加速效果，那么请看：锐速(ServerSpeeder/LotServer)配置参数简单说明，合理修改配置 提高加速效果**\n\n这个LotServer与锐速(ServerSpeeder)的加速区别并不大，不过91yun的破解版因为破解不完整导致会出现断流等情况，而这个 LotServer 则没有这种问题。","source":"_posts/Linux TCP加速工具 —— LotServer(锐速母公司) 一键安装脚本.md","raw":"---\ntitle: Linux TCP加速工具 —— LotServer(锐速母公司) 一键安装脚本\ntag:  \n - Linux\n - 速锐\ncategories: 代理技术\ndate: 2017-08-19 13:20:09\n---\n\n# Linux TCP加速工具 —— LotServer(锐速母公司) 一键安装脚本\n\n锐速(ServerSpeeder)可以说是LotServer的马甲，是针对民用的，而LotServer则是针对企业用户的，锐速现在基本上已经关了，而这个LotServer还在持续运营。\n\n**Only for Linux.**\n\n**从根本原因上解决锐速断流问题，断流的根本原因是没有完整破解验证机制。**\n\n1. 支持自动检测公网网卡，多个网卡也能区分。\n2. 支持自动适配内核 (需锐速支持)。\n3. 添加询问是否开启accppp功能 (实测并开启后没有效果)。\n4. 默认设置为G口宽带 (听说设置大点可以提高速度)。\n5. 支持一键完全卸载 (此脚本安装的无残留)。\n6. **所需文件均来自 GiuHub，不放心可自行查阅 (完全公开)。**\n7. 不支持自动更换内核，请自行更换(网上教程非常多)。\n8. **不支持OpenVZ，不需要尝试，会告诉你找不到网卡。**\n\n```\n注意：OVZ虚拟化的VPS并不支持锐速加速器的安装，KVM和XEN应该基本都可以。\n```\n\n**作者博客：https://moeclub.org/2017/03/08/14/**\n\n安装文件 **appex.zip** 为 LotServer 的，(感谢 LotServer 提供安装文件)。\n\n使用前请日常` apt-get update / yum update `，欢迎反馈bug(各种安装错误)。\n\n**使用前建议先查看linux支持内核列表，对照一下系统和内核是否可以安装 LotServer！**\n\n服务器使用`uname -r`命令来查询内核版本，例如返回的是`3.2.0-4-amd64`，`3.2.0-4-amd64`就是你的内核版本。\n\n> 强烈推荐大家使用 **Debian7 x64系统 | 3.2.0-4-amd64内核** ，这个系统和内核无论是锐速、Lotserver还是BBR，除了配置太低的我都没安装失败过！\n\n## 安装LotServer\n\n```bash\nwget --no-check-certificate -qO /tmp/appex.sh \"https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh\" && bash /tmp/appex.sh 'install'\n\n\n```\n\n安装一开始的时候，会提示：\n\n```bash\nPress Enter to Continue...\n# 这个是提示你按回车键继续\n\n\n```\n\n如果安装过程中没问题的话，最后会提示：\n\n```bash\nAccelerate VPN (PPTP,L2TP,etc.)? [n]:\n# 是否加速VPN\n \nAuto load ServerSpeeder on linux start-up? [y]:\n# 是否开机启动\n \nRun ServerSpeeder now? [y]:\n# 是否现在启动锐速\n \n# 全部默认回车即可。\n\n\n```\n\n最后出现这样的提示就说明安装并启动成功：\n\n```bash\n[Running Status]\nServerSpeeder is running!\nversion              3.11.20.4\n \n[License Information]\nLicense              6001ADDF578B6C0E (valid on current device)\nMaxSession           unlimited\nMaxTcpAccSession     unlimited\nMaxBandwidth(kbps)   1024000\nExpireDate           2035-12-31\n....\n# 以下省略....\n\n```\n\n## 卸载LotServer\n\n```bash\nwget --no-check-certificate -qO /tmp/appex.sh \"https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh\" && bash /tmp/appex.sh 'uninstall'\n\n```\n\n## 使用说明\n\n```bash\n/appex/bin/serverSpeeder.sh start\n# 启动 LotServer\n \n/appex/bin/serverSpeeder.sh stop\n# 停止 LotServer\n \n/appex/bin/serverSpeeder.sh restart\n# 重启 LotServer\n \n/appex/bin/serverSpeeder.sh status\n# 状态查询\n \n/appex/bin/serverSpeeder.sh renewLic\n# 更新许可\n\n\n```\n\n[代码托管地址](https://github.com/0oVicero0/serverSpeeser_Install)\n\n[LotServer 完整使用介绍 PDF手册](https://github.com/0oVicero0/serverSpeeder_Install/blob/master/lotServer.pdf)\n\n**安装完了，想要自己修改配置最大化加速效果，那么请看：锐速(ServerSpeeder/LotServer)配置参数简单说明，合理修改配置 提高加速效果**\n\n这个LotServer与锐速(ServerSpeeder)的加速区别并不大，不过91yun的破解版因为破解不完整导致会出现断流等情况，而这个 LotServer 则没有这种问题。","slug":"Linux TCP加速工具 —— LotServer(锐速母公司) 一键安装脚本","published":1,"updated":"2017-08-20T05:50:16.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kfg8rm0008ygkvyxc46h3j","content":"<h1 id=\"Linux-TCP加速工具-——-LotServer-锐速母公司-一键安装脚本\"><a href=\"#Linux-TCP加速工具-——-LotServer-锐速母公司-一键安装脚本\" class=\"headerlink\" title=\"Linux TCP加速工具 —— LotServer(锐速母公司) 一键安装脚本\"></a>Linux TCP加速工具 —— LotServer(锐速母公司) 一键安装脚本</h1><p>锐速(ServerSpeeder)可以说是LotServer的马甲，是针对民用的，而LotServer则是针对企业用户的，锐速现在基本上已经关了，而这个LotServer还在持续运营。</p>\n<p><strong>Only for Linux.</strong></p>\n<p><strong>从根本原因上解决锐速断流问题，断流的根本原因是没有完整破解验证机制。</strong></p>\n<ol>\n<li>支持自动检测公网网卡，多个网卡也能区分。</li>\n<li>支持自动适配内核 (需锐速支持)。</li>\n<li>添加询问是否开启accppp功能 (实测并开启后没有效果)。</li>\n<li>默认设置为G口宽带 (听说设置大点可以提高速度)。</li>\n<li>支持一键完全卸载 (此脚本安装的无残留)。</li>\n<li><strong>所需文件均来自 GiuHub，不放心可自行查阅 (完全公开)。</strong></li>\n<li>不支持自动更换内核，请自行更换(网上教程非常多)。</li>\n<li><strong>不支持OpenVZ，不需要尝试，会告诉你找不到网卡。</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意：OVZ虚拟化的VPS并不支持锐速加速器的安装，KVM和XEN应该基本都可以。</div></pre></td></tr></table></figure>\n<p><strong>作者博客：<a href=\"https://moeclub.org/2017/03/08/14/\" target=\"_blank\" rel=\"external\">https://moeclub.org/2017/03/08/14/</a></strong></p>\n<p>安装文件 <strong>appex.zip</strong> 为 LotServer 的，(感谢 LotServer 提供安装文件)。</p>\n<p>使用前请日常<code>apt-get update / yum update</code>，欢迎反馈bug(各种安装错误)。</p>\n<p><strong>使用前建议先查看linux支持内核列表，对照一下系统和内核是否可以安装 LotServer！</strong></p>\n<p>服务器使用<code>uname -r</code>命令来查询内核版本，例如返回的是<code>3.2.0-4-amd64</code>，<code>3.2.0-4-amd64</code>就是你的内核版本。</p>\n<blockquote>\n<p>强烈推荐大家使用 <strong>Debian7 x64系统 | 3.2.0-4-amd64内核</strong> ，这个系统和内核无论是锐速、Lotserver还是BBR，除了配置太低的我都没安装失败过！</p>\n</blockquote>\n<h2 id=\"安装LotServer\"><a href=\"#安装LotServer\" class=\"headerlink\" title=\"安装LotServer\"></a>安装LotServer</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget --no-check-certificate -qO /tmp/appex.sh <span class=\"string\">\"https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh\"</span> &amp;&amp; bash /tmp/appex.sh <span class=\"string\">'install'</span></div></pre></td></tr></table></figure>\n<p>安装一开始的时候，会提示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Press Enter to Continue...</div><div class=\"line\"><span class=\"comment\"># 这个是提示你按回车键继续</span></div></pre></td></tr></table></figure>\n<p>如果安装过程中没问题的话，最后会提示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accelerate VPN (PPTP,L2TP,etc.)? [n]:</div><div class=\"line\"><span class=\"comment\"># 是否加速VPN</span></div><div class=\"line\"> </div><div class=\"line\">Auto load ServerSpeeder on linux start-up? [y]:</div><div class=\"line\"><span class=\"comment\"># 是否开机启动</span></div><div class=\"line\"> </div><div class=\"line\">Run ServerSpeeder now? [y]:</div><div class=\"line\"><span class=\"comment\"># 是否现在启动锐速</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 全部默认回车即可。</span></div></pre></td></tr></table></figure>\n<p>最后出现这样的提示就说明安装并启动成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Running Status]</div><div class=\"line\">ServerSpeeder is running!</div><div class=\"line\">version              3.11.20.4</div><div class=\"line\"> </div><div class=\"line\">[License Information]</div><div class=\"line\">License              6001ADDF578B6C0E (valid on current device)</div><div class=\"line\">MaxSession           unlimited</div><div class=\"line\">MaxTcpAccSession     unlimited</div><div class=\"line\">MaxBandwidth(kbps)   1024000</div><div class=\"line\">ExpireDate           2035-12-31</div><div class=\"line\">....</div><div class=\"line\"><span class=\"comment\"># 以下省略....</span></div></pre></td></tr></table></figure>\n<h2 id=\"卸载LotServer\"><a href=\"#卸载LotServer\" class=\"headerlink\" title=\"卸载LotServer\"></a>卸载LotServer</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget --no-check-certificate -qO /tmp/appex.sh <span class=\"string\">\"https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh\"</span> &amp;&amp; bash /tmp/appex.sh <span class=\"string\">'uninstall'</span></div></pre></td></tr></table></figure>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">/appex/bin/serverSpeeder.sh start</div><div class=\"line\"><span class=\"comment\"># 启动 LotServer</span></div><div class=\"line\"> </div><div class=\"line\">/appex/bin/serverSpeeder.sh stop</div><div class=\"line\"><span class=\"comment\"># 停止 LotServer</span></div><div class=\"line\"> </div><div class=\"line\">/appex/bin/serverSpeeder.sh restart</div><div class=\"line\"><span class=\"comment\"># 重启 LotServer</span></div><div class=\"line\"> </div><div class=\"line\">/appex/bin/serverSpeeder.sh status</div><div class=\"line\"><span class=\"comment\"># 状态查询</span></div><div class=\"line\"> </div><div class=\"line\">/appex/bin/serverSpeeder.sh renewLic</div><div class=\"line\"><span class=\"comment\"># 更新许可</span></div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/0oVicero0/serverSpeeser_Install\" target=\"_blank\" rel=\"external\">代码托管地址</a></p>\n<p><a href=\"https://github.com/0oVicero0/serverSpeeder_Install/blob/master/lotServer.pdf\" target=\"_blank\" rel=\"external\">LotServer 完整使用介绍 PDF手册</a></p>\n<p><strong>安装完了，想要自己修改配置最大化加速效果，那么请看：锐速(ServerSpeeder/LotServer)配置参数简单说明，合理修改配置 提高加速效果</strong></p>\n<p>这个LotServer与锐速(ServerSpeeder)的加速区别并不大，不过91yun的破解版因为破解不完整导致会出现断流等情况，而这个 LotServer 则没有这种问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux-TCP加速工具-——-LotServer-锐速母公司-一键安装脚本\"><a href=\"#Linux-TCP加速工具-——-LotServer-锐速母公司-一键安装脚本\" class=\"headerlink\" title=\"Linux TCP加速工具 —— LotServer(锐速母公司) 一键安装脚本\"></a>Linux TCP加速工具 —— LotServer(锐速母公司) 一键安装脚本</h1><p>锐速(ServerSpeeder)可以说是LotServer的马甲，是针对民用的，而LotServer则是针对企业用户的，锐速现在基本上已经关了，而这个LotServer还在持续运营。</p>\n<p><strong>Only for Linux.</strong></p>\n<p><strong>从根本原因上解决锐速断流问题，断流的根本原因是没有完整破解验证机制。</strong></p>\n<ol>\n<li>支持自动检测公网网卡，多个网卡也能区分。</li>\n<li>支持自动适配内核 (需锐速支持)。</li>\n<li>添加询问是否开启accppp功能 (实测并开启后没有效果)。</li>\n<li>默认设置为G口宽带 (听说设置大点可以提高速度)。</li>\n<li>支持一键完全卸载 (此脚本安装的无残留)。</li>\n<li><strong>所需文件均来自 GiuHub，不放心可自行查阅 (完全公开)。</strong></li>\n<li>不支持自动更换内核，请自行更换(网上教程非常多)。</li>\n<li><strong>不支持OpenVZ，不需要尝试，会告诉你找不到网卡。</strong></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">注意：OVZ虚拟化的VPS并不支持锐速加速器的安装，KVM和XEN应该基本都可以。</div></pre></td></tr></table></figure>\n<p><strong>作者博客：<a href=\"https://moeclub.org/2017/03/08/14/\" target=\"_blank\" rel=\"external\">https://moeclub.org/2017/03/08/14/</a></strong></p>\n<p>安装文件 <strong>appex.zip</strong> 为 LotServer 的，(感谢 LotServer 提供安装文件)。</p>\n<p>使用前请日常<code>apt-get update / yum update</code>，欢迎反馈bug(各种安装错误)。</p>\n<p><strong>使用前建议先查看linux支持内核列表，对照一下系统和内核是否可以安装 LotServer！</strong></p>\n<p>服务器使用<code>uname -r</code>命令来查询内核版本，例如返回的是<code>3.2.0-4-amd64</code>，<code>3.2.0-4-amd64</code>就是你的内核版本。</p>\n<blockquote>\n<p>强烈推荐大家使用 <strong>Debian7 x64系统 | 3.2.0-4-amd64内核</strong> ，这个系统和内核无论是锐速、Lotserver还是BBR，除了配置太低的我都没安装失败过！</p>\n</blockquote>\n<h2 id=\"安装LotServer\"><a href=\"#安装LotServer\" class=\"headerlink\" title=\"安装LotServer\"></a>安装LotServer</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget --no-check-certificate -qO /tmp/appex.sh <span class=\"string\">\"https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh\"</span> &amp;&amp; bash /tmp/appex.sh <span class=\"string\">'install'</span></div></pre></td></tr></table></figure>\n<p>安装一开始的时候，会提示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Press Enter to Continue...</div><div class=\"line\"><span class=\"comment\"># 这个是提示你按回车键继续</span></div></pre></td></tr></table></figure>\n<p>如果安装过程中没问题的话，最后会提示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accelerate VPN (PPTP,L2TP,etc.)? [n]:</div><div class=\"line\"><span class=\"comment\"># 是否加速VPN</span></div><div class=\"line\"> </div><div class=\"line\">Auto load ServerSpeeder on linux start-up? [y]:</div><div class=\"line\"><span class=\"comment\"># 是否开机启动</span></div><div class=\"line\"> </div><div class=\"line\">Run ServerSpeeder now? [y]:</div><div class=\"line\"><span class=\"comment\"># 是否现在启动锐速</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\"># 全部默认回车即可。</span></div></pre></td></tr></table></figure>\n<p>最后出现这样的提示就说明安装并启动成功：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">[Running Status]</div><div class=\"line\">ServerSpeeder is running!</div><div class=\"line\">version              3.11.20.4</div><div class=\"line\"> </div><div class=\"line\">[License Information]</div><div class=\"line\">License              6001ADDF578B6C0E (valid on current device)</div><div class=\"line\">MaxSession           unlimited</div><div class=\"line\">MaxTcpAccSession     unlimited</div><div class=\"line\">MaxBandwidth(kbps)   1024000</div><div class=\"line\">ExpireDate           2035-12-31</div><div class=\"line\">....</div><div class=\"line\"><span class=\"comment\"># 以下省略....</span></div></pre></td></tr></table></figure>\n<h2 id=\"卸载LotServer\"><a href=\"#卸载LotServer\" class=\"headerlink\" title=\"卸载LotServer\"></a>卸载LotServer</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget --no-check-certificate -qO /tmp/appex.sh <span class=\"string\">\"https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh\"</span> &amp;&amp; bash /tmp/appex.sh <span class=\"string\">'uninstall'</span></div></pre></td></tr></table></figure>\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">/appex/bin/serverSpeeder.sh start</div><div class=\"line\"><span class=\"comment\"># 启动 LotServer</span></div><div class=\"line\"> </div><div class=\"line\">/appex/bin/serverSpeeder.sh stop</div><div class=\"line\"><span class=\"comment\"># 停止 LotServer</span></div><div class=\"line\"> </div><div class=\"line\">/appex/bin/serverSpeeder.sh restart</div><div class=\"line\"><span class=\"comment\"># 重启 LotServer</span></div><div class=\"line\"> </div><div class=\"line\">/appex/bin/serverSpeeder.sh status</div><div class=\"line\"><span class=\"comment\"># 状态查询</span></div><div class=\"line\"> </div><div class=\"line\">/appex/bin/serverSpeeder.sh renewLic</div><div class=\"line\"><span class=\"comment\"># 更新许可</span></div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/0oVicero0/serverSpeeser_Install\" target=\"_blank\" rel=\"external\">代码托管地址</a></p>\n<p><a href=\"https://github.com/0oVicero0/serverSpeeder_Install/blob/master/lotServer.pdf\" target=\"_blank\" rel=\"external\">LotServer 完整使用介绍 PDF手册</a></p>\n<p><strong>安装完了，想要自己修改配置最大化加速效果，那么请看：锐速(ServerSpeeder/LotServer)配置参数简单说明，合理修改配置 提高加速效果</strong></p>\n<p>这个LotServer与锐速(ServerSpeeder)的加速区别并不大，不过91yun的破解版因为破解不完整导致会出现断流等情况，而这个 LotServer 则没有这种问题。</p>\n"},{"title":"V2ray使用TLS","date":"2017-08-19T06:20:09.000Z","_content":"\n[![img](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1503032917499&di=67363c688d949aa5c6a3ed50992c0fee&imgtype=0&src=http%3A%2F%2Fwww.igooda.cn%2Fuploads%2Fallimg%2F141125%2F112R61115-0.JPG)](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1503032917499&di=67363c688d949aa5c6a3ed50992c0fee&imgtype=0&src=http%3A%2F%2Fwww.igooda.cn%2Fuploads%2Fallimg%2F141125%2F112R61115-0.JPG)\n\n# 1. TLS\n\n从 v1.19 起引入了 TLS，TLS 中文译名是传输层安全，如果你没听说过，请 Google 了解一下。以下给出些我认为介绍较好的文章链接：\n\n[SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n\n[传输层安全协议](https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E5%8D%94%E8%AD%B0)\n\nShadowsocks 的作者 clowwindy 却认为[翻墙不该用 SSL](https://gist.github.com/clowwindy/5947691)。那么到底该不该用？对此我不作评论，各位自行思考。这里我只教大家如何开启 TLS。\n\n## 1.1. 注册一个域名\n\n如果已经注册有域名了可以跳过。 域名有免费的有付费的，总体来说付费的会优于免费的，具体差别请 Google。如果你不舍得为一个域名每年花点钱，用个免费域名也可以。为了方便，这里我将以免费域名为例。\n\n关于如何注册一个免费域名，我发现有一位网友写得很详细，就不多说了。请参考：\n\n[教你申请.tk/.ml/.cf/.gq/.ga等免费域名](https://doub.io/dbwz-3/)\n\n至于注册其它付费的域名请 Google 吧，差不多都是大同小异的。\n\n注册好域名之后务必记得设置 DNS 解析到你的 VPS !\n\n据了解，在 freenom 注册的域名在对应的 IP 上要有一个网站，否则注册之后域名会被回收。如果您只是想用免费域名在 V2Ray 用一下 TLS，又不愿意（懒得、不会）建站，建议您看看您的亲朋好友谁有手上有域名的，向他们要一个二级域名就行了\n\n以下假设注册的域名为 mydomain.me，请将之替换成自己的域名。\n\n## 1.2. 证书生成\n\n使用 TLS 需要证书，证书也有免费付费的，同样的这里使用免费证书，证书认证机构为 [Let's Encrypt](https://letsencrypt.org/)。 证书的生成有许多方法，这里使用的是比较简单的方法：使用 [acme.sh](https://github.com/Neilpang/acme.sh) 脚本生成，本部分说明部分内容参考于[acme.sh README](https://github.com/Neilpang/acme.sh/blob/master/README.md)。\n\n证书有两种，一种是 ECC 证书（内置公钥是 ECDSA 公钥），一种是 RSA 证书（内置 RSA 公钥）。简单来说，同等长度 ECC 比 RSA 更安全,也就是说在具有同样安全性的情况下，ECC 的密钥长度比 RSA 短得多（加密解密会更快）。但问题是 ECC 的兼容性会差一些，Android 4.x 以下和 Windows XP 不支持。只要您的设备不是非常老的老古董，强烈建议使用 ECC 证书。\n\n以下将给出这两类证书的生成方法，请大家根据自身的情况自行选择其中一种证书类型。\n\n证书生成只需在服务器上操作。\n\n### 1.2.1. 安装 acme.sh\n\n执行以下命令，acme.sh 会安装到 ~/.acme.sh 目录下。\n\n```bash\n$ curl  https://get.acme.sh | sh\n% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                               Dload  Upload   Total   Spent    Left  Speed\n100   671  100   671    0     0    680      0 --:--:-- --:--:-- --:--:--   679\n% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                               Dload  Upload   Total   Spent    Left  Speed\n100  112k  100  112k    0     0   690k      0 --:--:-- --:--:-- --:--:--  693k\n[Fri 30 Dec 01:03:32 GMT 2016] Installing from online archive.\n[Fri 30 Dec 01:03:32 GMT 2016] Downloading https://github.com/Neilpang/acme.sh/archive/master.tar.gz\n[Fri 30 Dec 01:03:33 GMT 2016] Extracting master.tar.gz\n[Fri 30 Dec 01:03:33 GMT 2016] Installing to /home/user/.acme.sh\n[Fri 30 Dec 01:03:33 GMT 2016] Installed to /home/user/.acme.sh/acme.sh\n[Fri 30 Dec 01:03:33 GMT 2016] Installing alias to '/home/user/.profile'\n[Fri 30 Dec 01:03:33 GMT 2016] OK, Close and reopen your terminal to start using acme.sh\n[Fri 30 Dec 01:03:33 GMT 2016] Installing cron job\nno crontab for user\nno crontab for user\n[Fri 30 Dec 01:03:33 GMT 2016] Good, bash is found, so change the shebang to use bash as preferred.\n[Fri 30 Dec 01:03:33 GMT 2016] OK\n[Fri 30 Dec 01:03:33 GMT 2016] Install success!\n\n```\n\n安装成功后执行 `source ~/.bashrc` 以确保脚本所设置的命令别名生效。\n\n如果安装报错，那么可能是因为系统缺少 acme.sh 所需要的依赖项，acme.sh 的依赖项主要是 netcat(nc)，我们通过以下命令来安装这些依赖项，然后重新安装一遍 acme.sh:\n\n```bash\n$ sudo apt-get -y install netcat\n\n```\n\n### 1.2.2. 使用 acme.sh 生成证书\n\n#### 证书生成\n\n执行以下命令生成证书：\n\n以下的命令会临时监听 80 端口，请确保执行该命令前 80 端口没有使用\n\n```bash\n$ sudo ~/.acme.sh/acme.sh --issue -d mydomain.me --standalone -k ec-256\n[Fri Dec 30 08:59:12 HKT 2016] Standalone mode.\n[Fri Dec 30 08:59:12 HKT 2016] Single domain='mydomain.me'\n[Fri Dec 30 08:59:12 HKT 2016] Getting domain auth token for each domain\n[Fri Dec 30 08:59:12 HKT 2016] Getting webroot for domain='mydomain.me'\n[Fri Dec 30 08:59:12 HKT 2016] _w='no'\n[Fri Dec 30 08:59:12 HKT 2016] Getting new-authz for domain='mydomain.me'\n[Fri Dec 30 08:59:14 HKT 2016] The new-authz request is ok.\n[Fri Dec 30 08:59:14 HKT 2016] mydomain.me is already verified, skip.\n[Fri Dec 30 08:59:14 HKT 2016] mydomain.me is already verified, skip http-01.\n[Fri Dec 30 08:59:14 HKT 2016] mydomain.me is already verified, skip http-01.\n[Fri Dec 30 08:59:14 HKT 2016] Verify finished, start to sign.\n[Fri Dec 30 08:59:16 HKT 2016] Cert success.\n-----BEGIN CERTIFICATE-----\nMIIEMTCCAxmgAwIBAgISA1+gJF5zwUDjNX/6Xzz5fo3lMA0GCSqGSIb3DQEBCwUA\nMEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD\nExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNjEyMjkyMzU5MDBaFw0x\nNzAzMjkyMzU5MDBaMBcxFTATBgNVBAMTDHdlYWtzYW5kLmNvbTBZMBMGByqGSM49\n****************************************************************\n4p40tm0aMB837XQ9jeAXvXulhVH/7/wWZ8/vkUUvuHSCYHagENiq/3DYj4a85Iw9\n+6u1r7atYHJ2VwqSamiyTGDQuhc5wdXIQxY/YQQqkAmn5tLsTZnnOavc4plANT40\nzweiG8vcIvMVnnkM0TSz8G1yzv1nOkruN3ozQkLMu6YS7lk/ENBN7DBtYVSmJeU2\nVAXE+zgRaP7JFOqK6DrOwhyE2LSgae83Wq/XgXxjfIo1Zmn2UmlE0sbdNKBasnf9\ngPUI45eltrjcv8FCSTOUcT7PWCa3\n-----END CERTIFICATE-----\n[Fri Dec 30 08:59:16 HKT 2016] Your cert is in  /root/.acme.sh/mydomain.me_ecc/mydomain.me.cer\n[Fri Dec 30 08:59:16 HKT 2016] Your cert key is in  /root/.acme.sh/mydomain.me_ecc/mydomain.me.key\n[Fri Dec 30 08:59:16 HKT 2016] The intermediate CA cert is in  /root/.acme.sh/mydomain.me_ecc/ca.cer\n[Fri Dec 30 08:59:16 HKT 2016] And the full chain certs is there:  /root/.acme.sh/mydomain.me_ecc/fullchain.cer\n\n```\n\n`-k` 表示密钥长度，后面的值可以是 `ec-256` 、`ec-284`、`2048`、`3072`、`4096`、`8192`，带有 `ec` 表示生成的是 ECC 证书，没有则是 RSA 证书。在安全性上 256 位的 ECC 证书等同于 3072 位的 RSA 证书。\n\n#### 证书更新\n\n由于 Let's Encrypt 的证书有效期只有 3 个月，因此需要 90 天至少要更新一次证书，acme.sh 脚本会每 60 天自动更新证书。也可以手动更新。\n\n手动更新 ECC 证书，执行：\n\n```bash\n$ sudo ~/.acme.sh/acme.sh --renew -d mydomain.com --force --ecc\n\n```\n\n如果是 RSA 证书则执行：\n\n```bash\n$ sudo ~/.acme.sh/acme.sh --renew -d mydomain.com --force\n\n```\n\n### 1.2.3. 安装证书和密钥\n\n#### ECC 证书\n\n将证书和密钥安装到 /etc/v2ray 中：\n\n```bash\n$ sudo ~/.acme.sh/acme.sh --installcert -d mydomain.me --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key --ecc\n\n```\n\n#### RSA 证书\n\n```bash\n$ sudo ~/.acme.sh/acme.sh --installcert -d mydomain.me --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key\n\n```\n\n注意：无论什么情况，密钥(即上面的v2ray.key)都不能泄漏，如果你不幸泄漏了密钥，可以使用 acme.sh 将原证书吊销，再生成新的证书，吊销方法请自行参考 acme.sh 的手册\n\n## 1.3. 配置 V2Ray\n\n### 1.3.1. 服务器\n\n```bash\n{\n  \"inbound\": {\n    \"port\": 443, // 建议使用 443 端口\n    \"protocol\": \"vmess\",    \n    \"settings\": {\n      \"clients\": [\n        {\n          \"id\": \"23ad6b10-8d1a-40f7-8ad0-e3e35cd38297\",  \n          \"alterId\": 64\n        }\n      ]\n    },\n    \"streamSettings\": {\n      \"network\": \"tcp\",\n      \"security\": \"tls\", // security 要设置为 tls 才会启用 TLS\n      \"tlsSettings\": {\n        \"certificates\": [\n          {\n            \"certificateFile\": \"/etc/v2ray/v2ray.crt\", //证书文件\n            \"keyFile\": \"/etc/v2ray/v2ray.key\" //密钥文件\n          }\n        ]\n      }\n    }\n  },\n  \"outbound\": {\n    \"protocol\": \"freedom\",\n    \"settings\": {}\n  }\n}\n\n```\n\n### 1.3.2. 客户端\n\n```bash\n{\n  \"inbound\": {\n    \"port\": 1080,\n    \"protocol\": \"socks\",\n    \"settings\": {\n      \"auth\": \"noauth\"\n    }\n  },\n  \"outbound\": {\n    \"protocol\": \"vmess\",\n    \"settings\": {\n      \"vnext\": [\n        {\n          \"address\": \"mydomain.me\",\n          \"port\": 443,\n          \"users\": [\n            {\n              \"id\": \"23ad6b10-8d1a-40f7-8ad0-e3e35cd38297\",\n              \"alterId\": 64\n            }\n          ]\n        }\n      ]\n    },\n    \"streamSettings\": {\n      \"network\": \"tcp\",\n      \"security\": \"tls\" // 客户端的 security 也要设置为 tls\n    }\n  }\n}\n\n```\n\n## 1.4. 验证\n\n一般来说，按照以上步骤操作完成，V2Ray 客户端能够正常联网说明 TLS 已经成功启用。但要是有个可靠的方法来验证是否正常开启 TLS 无疑更令人放心。 验证的方法有很多，我仅介绍一种小白化一点的，便是 [Qualys SSL Labs's SSL Server Test](https://www.ssllabs.com/ssltest/index.html)。\n\n注意：使用 Qualys SSL Labs's SSL Server Test 要求使用 443 端口，意味着你服务器配置的 inbound.port 应当是 443\n\n打开 [Qualys SSL Labs's SSL Server Test](https://www.ssllabs.com/ssltest/index.html)，在 Hostname 中输入你的域名，点提交，过一会结果就出来了。![img](https://toutyrater.github.io/resource/images/tls_test1.png)\n\n![img](https://toutyrater.github.io/resource/images/tls_test2.png)这是对于你的 TLS/SSL 的一个总体评分，我这里评分为 A，看来还不错。有这样的界面算是成功了。\n\n![img](https://toutyrater.github.io/resource/images/tls_test3.png)这是关于证书的信息。从图中可以看出，我的这个证书有效期是从 2016 年 12 月 27 号到 2017 年的 3 月 27 号，密钥是 256 位的 ECC，证书签发机构是 Let's Encrypt，重要的是最后一行，`Trusted` 为 `Yes`,表明我这个证书可信。\n\n## 1.5. 温馨提醒\n\n不要想当然地把在 SS 和 SSR 的观念带过来，更不要被别人轻飘飘的一句话误导，V2Ray 的 TLS 不是伪装！不是混淆！这是真正的 TLS！因此才需要域名需要证书。后文提到的 WS(WebSocks) 也不是伪装。","source":"_posts/V2ray使用TLS.md","raw":"---\ntitle: V2ray使用TLS\ntag:  v2ray\ncategories: 代理技术\ndate: 2017-08-19 14:20:09\n---\n\n[![img](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1503032917499&di=67363c688d949aa5c6a3ed50992c0fee&imgtype=0&src=http%3A%2F%2Fwww.igooda.cn%2Fuploads%2Fallimg%2F141125%2F112R61115-0.JPG)](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1503032917499&di=67363c688d949aa5c6a3ed50992c0fee&imgtype=0&src=http%3A%2F%2Fwww.igooda.cn%2Fuploads%2Fallimg%2F141125%2F112R61115-0.JPG)\n\n# 1. TLS\n\n从 v1.19 起引入了 TLS，TLS 中文译名是传输层安全，如果你没听说过，请 Google 了解一下。以下给出些我认为介绍较好的文章链接：\n\n[SSL/TLS协议运行机制的概述](http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html)\n\n[传输层安全协议](https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E5%8D%94%E8%AD%B0)\n\nShadowsocks 的作者 clowwindy 却认为[翻墙不该用 SSL](https://gist.github.com/clowwindy/5947691)。那么到底该不该用？对此我不作评论，各位自行思考。这里我只教大家如何开启 TLS。\n\n## 1.1. 注册一个域名\n\n如果已经注册有域名了可以跳过。 域名有免费的有付费的，总体来说付费的会优于免费的，具体差别请 Google。如果你不舍得为一个域名每年花点钱，用个免费域名也可以。为了方便，这里我将以免费域名为例。\n\n关于如何注册一个免费域名，我发现有一位网友写得很详细，就不多说了。请参考：\n\n[教你申请.tk/.ml/.cf/.gq/.ga等免费域名](https://doub.io/dbwz-3/)\n\n至于注册其它付费的域名请 Google 吧，差不多都是大同小异的。\n\n注册好域名之后务必记得设置 DNS 解析到你的 VPS !\n\n据了解，在 freenom 注册的域名在对应的 IP 上要有一个网站，否则注册之后域名会被回收。如果您只是想用免费域名在 V2Ray 用一下 TLS，又不愿意（懒得、不会）建站，建议您看看您的亲朋好友谁有手上有域名的，向他们要一个二级域名就行了\n\n以下假设注册的域名为 mydomain.me，请将之替换成自己的域名。\n\n## 1.2. 证书生成\n\n使用 TLS 需要证书，证书也有免费付费的，同样的这里使用免费证书，证书认证机构为 [Let's Encrypt](https://letsencrypt.org/)。 证书的生成有许多方法，这里使用的是比较简单的方法：使用 [acme.sh](https://github.com/Neilpang/acme.sh) 脚本生成，本部分说明部分内容参考于[acme.sh README](https://github.com/Neilpang/acme.sh/blob/master/README.md)。\n\n证书有两种，一种是 ECC 证书（内置公钥是 ECDSA 公钥），一种是 RSA 证书（内置 RSA 公钥）。简单来说，同等长度 ECC 比 RSA 更安全,也就是说在具有同样安全性的情况下，ECC 的密钥长度比 RSA 短得多（加密解密会更快）。但问题是 ECC 的兼容性会差一些，Android 4.x 以下和 Windows XP 不支持。只要您的设备不是非常老的老古董，强烈建议使用 ECC 证书。\n\n以下将给出这两类证书的生成方法，请大家根据自身的情况自行选择其中一种证书类型。\n\n证书生成只需在服务器上操作。\n\n### 1.2.1. 安装 acme.sh\n\n执行以下命令，acme.sh 会安装到 ~/.acme.sh 目录下。\n\n```bash\n$ curl  https://get.acme.sh | sh\n% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                               Dload  Upload   Total   Spent    Left  Speed\n100   671  100   671    0     0    680      0 --:--:-- --:--:-- --:--:--   679\n% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                               Dload  Upload   Total   Spent    Left  Speed\n100  112k  100  112k    0     0   690k      0 --:--:-- --:--:-- --:--:--  693k\n[Fri 30 Dec 01:03:32 GMT 2016] Installing from online archive.\n[Fri 30 Dec 01:03:32 GMT 2016] Downloading https://github.com/Neilpang/acme.sh/archive/master.tar.gz\n[Fri 30 Dec 01:03:33 GMT 2016] Extracting master.tar.gz\n[Fri 30 Dec 01:03:33 GMT 2016] Installing to /home/user/.acme.sh\n[Fri 30 Dec 01:03:33 GMT 2016] Installed to /home/user/.acme.sh/acme.sh\n[Fri 30 Dec 01:03:33 GMT 2016] Installing alias to '/home/user/.profile'\n[Fri 30 Dec 01:03:33 GMT 2016] OK, Close and reopen your terminal to start using acme.sh\n[Fri 30 Dec 01:03:33 GMT 2016] Installing cron job\nno crontab for user\nno crontab for user\n[Fri 30 Dec 01:03:33 GMT 2016] Good, bash is found, so change the shebang to use bash as preferred.\n[Fri 30 Dec 01:03:33 GMT 2016] OK\n[Fri 30 Dec 01:03:33 GMT 2016] Install success!\n\n```\n\n安装成功后执行 `source ~/.bashrc` 以确保脚本所设置的命令别名生效。\n\n如果安装报错，那么可能是因为系统缺少 acme.sh 所需要的依赖项，acme.sh 的依赖项主要是 netcat(nc)，我们通过以下命令来安装这些依赖项，然后重新安装一遍 acme.sh:\n\n```bash\n$ sudo apt-get -y install netcat\n\n```\n\n### 1.2.2. 使用 acme.sh 生成证书\n\n#### 证书生成\n\n执行以下命令生成证书：\n\n以下的命令会临时监听 80 端口，请确保执行该命令前 80 端口没有使用\n\n```bash\n$ sudo ~/.acme.sh/acme.sh --issue -d mydomain.me --standalone -k ec-256\n[Fri Dec 30 08:59:12 HKT 2016] Standalone mode.\n[Fri Dec 30 08:59:12 HKT 2016] Single domain='mydomain.me'\n[Fri Dec 30 08:59:12 HKT 2016] Getting domain auth token for each domain\n[Fri Dec 30 08:59:12 HKT 2016] Getting webroot for domain='mydomain.me'\n[Fri Dec 30 08:59:12 HKT 2016] _w='no'\n[Fri Dec 30 08:59:12 HKT 2016] Getting new-authz for domain='mydomain.me'\n[Fri Dec 30 08:59:14 HKT 2016] The new-authz request is ok.\n[Fri Dec 30 08:59:14 HKT 2016] mydomain.me is already verified, skip.\n[Fri Dec 30 08:59:14 HKT 2016] mydomain.me is already verified, skip http-01.\n[Fri Dec 30 08:59:14 HKT 2016] mydomain.me is already verified, skip http-01.\n[Fri Dec 30 08:59:14 HKT 2016] Verify finished, start to sign.\n[Fri Dec 30 08:59:16 HKT 2016] Cert success.\n-----BEGIN CERTIFICATE-----\nMIIEMTCCAxmgAwIBAgISA1+gJF5zwUDjNX/6Xzz5fo3lMA0GCSqGSIb3DQEBCwUA\nMEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD\nExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNjEyMjkyMzU5MDBaFw0x\nNzAzMjkyMzU5MDBaMBcxFTATBgNVBAMTDHdlYWtzYW5kLmNvbTBZMBMGByqGSM49\n****************************************************************\n4p40tm0aMB837XQ9jeAXvXulhVH/7/wWZ8/vkUUvuHSCYHagENiq/3DYj4a85Iw9\n+6u1r7atYHJ2VwqSamiyTGDQuhc5wdXIQxY/YQQqkAmn5tLsTZnnOavc4plANT40\nzweiG8vcIvMVnnkM0TSz8G1yzv1nOkruN3ozQkLMu6YS7lk/ENBN7DBtYVSmJeU2\nVAXE+zgRaP7JFOqK6DrOwhyE2LSgae83Wq/XgXxjfIo1Zmn2UmlE0sbdNKBasnf9\ngPUI45eltrjcv8FCSTOUcT7PWCa3\n-----END CERTIFICATE-----\n[Fri Dec 30 08:59:16 HKT 2016] Your cert is in  /root/.acme.sh/mydomain.me_ecc/mydomain.me.cer\n[Fri Dec 30 08:59:16 HKT 2016] Your cert key is in  /root/.acme.sh/mydomain.me_ecc/mydomain.me.key\n[Fri Dec 30 08:59:16 HKT 2016] The intermediate CA cert is in  /root/.acme.sh/mydomain.me_ecc/ca.cer\n[Fri Dec 30 08:59:16 HKT 2016] And the full chain certs is there:  /root/.acme.sh/mydomain.me_ecc/fullchain.cer\n\n```\n\n`-k` 表示密钥长度，后面的值可以是 `ec-256` 、`ec-284`、`2048`、`3072`、`4096`、`8192`，带有 `ec` 表示生成的是 ECC 证书，没有则是 RSA 证书。在安全性上 256 位的 ECC 证书等同于 3072 位的 RSA 证书。\n\n#### 证书更新\n\n由于 Let's Encrypt 的证书有效期只有 3 个月，因此需要 90 天至少要更新一次证书，acme.sh 脚本会每 60 天自动更新证书。也可以手动更新。\n\n手动更新 ECC 证书，执行：\n\n```bash\n$ sudo ~/.acme.sh/acme.sh --renew -d mydomain.com --force --ecc\n\n```\n\n如果是 RSA 证书则执行：\n\n```bash\n$ sudo ~/.acme.sh/acme.sh --renew -d mydomain.com --force\n\n```\n\n### 1.2.3. 安装证书和密钥\n\n#### ECC 证书\n\n将证书和密钥安装到 /etc/v2ray 中：\n\n```bash\n$ sudo ~/.acme.sh/acme.sh --installcert -d mydomain.me --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key --ecc\n\n```\n\n#### RSA 证书\n\n```bash\n$ sudo ~/.acme.sh/acme.sh --installcert -d mydomain.me --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key\n\n```\n\n注意：无论什么情况，密钥(即上面的v2ray.key)都不能泄漏，如果你不幸泄漏了密钥，可以使用 acme.sh 将原证书吊销，再生成新的证书，吊销方法请自行参考 acme.sh 的手册\n\n## 1.3. 配置 V2Ray\n\n### 1.3.1. 服务器\n\n```bash\n{\n  \"inbound\": {\n    \"port\": 443, // 建议使用 443 端口\n    \"protocol\": \"vmess\",    \n    \"settings\": {\n      \"clients\": [\n        {\n          \"id\": \"23ad6b10-8d1a-40f7-8ad0-e3e35cd38297\",  \n          \"alterId\": 64\n        }\n      ]\n    },\n    \"streamSettings\": {\n      \"network\": \"tcp\",\n      \"security\": \"tls\", // security 要设置为 tls 才会启用 TLS\n      \"tlsSettings\": {\n        \"certificates\": [\n          {\n            \"certificateFile\": \"/etc/v2ray/v2ray.crt\", //证书文件\n            \"keyFile\": \"/etc/v2ray/v2ray.key\" //密钥文件\n          }\n        ]\n      }\n    }\n  },\n  \"outbound\": {\n    \"protocol\": \"freedom\",\n    \"settings\": {}\n  }\n}\n\n```\n\n### 1.3.2. 客户端\n\n```bash\n{\n  \"inbound\": {\n    \"port\": 1080,\n    \"protocol\": \"socks\",\n    \"settings\": {\n      \"auth\": \"noauth\"\n    }\n  },\n  \"outbound\": {\n    \"protocol\": \"vmess\",\n    \"settings\": {\n      \"vnext\": [\n        {\n          \"address\": \"mydomain.me\",\n          \"port\": 443,\n          \"users\": [\n            {\n              \"id\": \"23ad6b10-8d1a-40f7-8ad0-e3e35cd38297\",\n              \"alterId\": 64\n            }\n          ]\n        }\n      ]\n    },\n    \"streamSettings\": {\n      \"network\": \"tcp\",\n      \"security\": \"tls\" // 客户端的 security 也要设置为 tls\n    }\n  }\n}\n\n```\n\n## 1.4. 验证\n\n一般来说，按照以上步骤操作完成，V2Ray 客户端能够正常联网说明 TLS 已经成功启用。但要是有个可靠的方法来验证是否正常开启 TLS 无疑更令人放心。 验证的方法有很多，我仅介绍一种小白化一点的，便是 [Qualys SSL Labs's SSL Server Test](https://www.ssllabs.com/ssltest/index.html)。\n\n注意：使用 Qualys SSL Labs's SSL Server Test 要求使用 443 端口，意味着你服务器配置的 inbound.port 应当是 443\n\n打开 [Qualys SSL Labs's SSL Server Test](https://www.ssllabs.com/ssltest/index.html)，在 Hostname 中输入你的域名，点提交，过一会结果就出来了。![img](https://toutyrater.github.io/resource/images/tls_test1.png)\n\n![img](https://toutyrater.github.io/resource/images/tls_test2.png)这是对于你的 TLS/SSL 的一个总体评分，我这里评分为 A，看来还不错。有这样的界面算是成功了。\n\n![img](https://toutyrater.github.io/resource/images/tls_test3.png)这是关于证书的信息。从图中可以看出，我的这个证书有效期是从 2016 年 12 月 27 号到 2017 年的 3 月 27 号，密钥是 256 位的 ECC，证书签发机构是 Let's Encrypt，重要的是最后一行，`Trusted` 为 `Yes`,表明我这个证书可信。\n\n## 1.5. 温馨提醒\n\n不要想当然地把在 SS 和 SSR 的观念带过来，更不要被别人轻飘飘的一句话误导，V2Ray 的 TLS 不是伪装！不是混淆！这是真正的 TLS！因此才需要域名需要证书。后文提到的 WS(WebSocks) 也不是伪装。","slug":"V2ray使用TLS","published":1,"updated":"2017-08-20T05:41:41.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kfg8rr000cygkv5df7lv4y","content":"<p><a href=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1503032917499&amp;di=67363c688d949aa5c6a3ed50992c0fee&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.igooda.cn%2Fuploads%2Fallimg%2F141125%2F112R61115-0.JPG\" target=\"_blank\" rel=\"external\"><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1503032917499&amp;di=67363c688d949aa5c6a3ed50992c0fee&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.igooda.cn%2Fuploads%2Fallimg%2F141125%2F112R61115-0.JPG\" alt=\"img\"></a></p>\n<h1 id=\"1-TLS\"><a href=\"#1-TLS\" class=\"headerlink\" title=\"1. TLS\"></a>1. TLS</h1><p>从 v1.19 起引入了 TLS，TLS 中文译名是传输层安全，如果你没听说过，请 Google 了解一下。以下给出些我认为介绍较好的文章链接：</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\" target=\"_blank\" rel=\"external\">SSL/TLS协议运行机制的概述</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E5%8D%94%E8%AD%B0\" target=\"_blank\" rel=\"external\">传输层安全协议</a></p>\n<p>Shadowsocks 的作者 clowwindy 却认为<a href=\"https://gist.github.com/clowwindy/5947691\" target=\"_blank\" rel=\"external\">翻墙不该用 SSL</a>。那么到底该不该用？对此我不作评论，各位自行思考。这里我只教大家如何开启 TLS。</p>\n<h2 id=\"1-1-注册一个域名\"><a href=\"#1-1-注册一个域名\" class=\"headerlink\" title=\"1.1. 注册一个域名\"></a>1.1. 注册一个域名</h2><p>如果已经注册有域名了可以跳过。 域名有免费的有付费的，总体来说付费的会优于免费的，具体差别请 Google。如果你不舍得为一个域名每年花点钱，用个免费域名也可以。为了方便，这里我将以免费域名为例。</p>\n<p>关于如何注册一个免费域名，我发现有一位网友写得很详细，就不多说了。请参考：</p>\n<p><a href=\"https://doub.io/dbwz-3/\" target=\"_blank\" rel=\"external\">教你申请.tk/.ml/.cf/.gq/.ga等免费域名</a></p>\n<p>至于注册其它付费的域名请 Google 吧，差不多都是大同小异的。</p>\n<p>注册好域名之后务必记得设置 DNS 解析到你的 VPS !</p>\n<p>据了解，在 freenom 注册的域名在对应的 IP 上要有一个网站，否则注册之后域名会被回收。如果您只是想用免费域名在 V2Ray 用一下 TLS，又不愿意（懒得、不会）建站，建议您看看您的亲朋好友谁有手上有域名的，向他们要一个二级域名就行了</p>\n<p>以下假设注册的域名为 mydomain.me，请将之替换成自己的域名。</p>\n<h2 id=\"1-2-证书生成\"><a href=\"#1-2-证书生成\" class=\"headerlink\" title=\"1.2. 证书生成\"></a>1.2. 证书生成</h2><p>使用 TLS 需要证书，证书也有免费付费的，同样的这里使用免费证书，证书认证机构为 <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"external\">Let’s Encrypt</a>。 证书的生成有许多方法，这里使用的是比较简单的方法：使用 <a href=\"https://github.com/Neilpang/acme.sh\" target=\"_blank\" rel=\"external\">acme.sh</a> 脚本生成，本部分说明部分内容参考于<a href=\"https://github.com/Neilpang/acme.sh/blob/master/README.md\" target=\"_blank\" rel=\"external\">acme.sh README</a>。</p>\n<p>证书有两种，一种是 ECC 证书（内置公钥是 ECDSA 公钥），一种是 RSA 证书（内置 RSA 公钥）。简单来说，同等长度 ECC 比 RSA 更安全,也就是说在具有同样安全性的情况下，ECC 的密钥长度比 RSA 短得多（加密解密会更快）。但问题是 ECC 的兼容性会差一些，Android 4.x 以下和 Windows XP 不支持。只要您的设备不是非常老的老古董，强烈建议使用 ECC 证书。</p>\n<p>以下将给出这两类证书的生成方法，请大家根据自身的情况自行选择其中一种证书类型。</p>\n<p>证书生成只需在服务器上操作。</p>\n<h3 id=\"1-2-1-安装-acme-sh\"><a href=\"#1-2-1-安装-acme-sh\" class=\"headerlink\" title=\"1.2.1. 安装 acme.sh\"></a>1.2.1. 安装 acme.sh</h3><p>执行以下命令，acme.sh 会安装到 ~/.acme.sh 目录下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl  https://get.acme.sh | sh</div><div class=\"line\">% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                               Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100   671  100   671    0     0    680      0 --:--:-- --:--:-- --:--:--   679</div><div class=\"line\">% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                               Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100  112k  100  112k    0     0   690k      0 --:--:-- --:--:-- --:--:--  693k</div><div class=\"line\">[Fri 30 Dec 01:03:32 GMT 2016] Installing from online archive.</div><div class=\"line\">[Fri 30 Dec 01:03:32 GMT 2016] Downloading https://github.com/Neilpang/acme.sh/archive/master.tar.gz</div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] Extracting master.tar.gz</div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] Installing to /home/user/.acme.sh</div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] Installed to /home/user/.acme.sh/acme.sh</div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] Installing <span class=\"built_in\">alias</span> to <span class=\"string\">'/home/user/.profile'</span></div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] OK, Close and reopen your terminal to start using acme.sh</div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] Installing cron job</div><div class=\"line\">no crontab <span class=\"keyword\">for</span> user</div><div class=\"line\">no crontab <span class=\"keyword\">for</span> user</div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] Good, bash is found, so change the shebang to use bash as preferred.</div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] OK</div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] Install success!</div></pre></td></tr></table></figure>\n<p>安装成功后执行 <code>source ~/.bashrc</code> 以确保脚本所设置的命令别名生效。</p>\n<p>如果安装报错，那么可能是因为系统缺少 acme.sh 所需要的依赖项，acme.sh 的依赖项主要是 netcat(nc)，我们通过以下命令来安装这些依赖项，然后重新安装一遍 acme.sh:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get -y install netcat</div></pre></td></tr></table></figure>\n<h3 id=\"1-2-2-使用-acme-sh-生成证书\"><a href=\"#1-2-2-使用-acme-sh-生成证书\" class=\"headerlink\" title=\"1.2.2. 使用 acme.sh 生成证书\"></a>1.2.2. 使用 acme.sh 生成证书</h3><h4 id=\"证书生成\"><a href=\"#证书生成\" class=\"headerlink\" title=\"证书生成\"></a>证书生成</h4><p>执行以下命令生成证书：</p>\n<p>以下的命令会临时监听 80 端口，请确保执行该命令前 80 端口没有使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo ~/.acme.sh/acme.sh --issue -d mydomain.me --standalone -k ec-256</div><div class=\"line\">[Fri Dec 30 08:59:12 HKT 2016] Standalone mode.</div><div class=\"line\">[Fri Dec 30 08:59:12 HKT 2016] Single domain=<span class=\"string\">'mydomain.me'</span></div><div class=\"line\">[Fri Dec 30 08:59:12 HKT 2016] Getting domain auth token <span class=\"keyword\">for</span> each domain</div><div class=\"line\">[Fri Dec 30 08:59:12 HKT 2016] Getting webroot <span class=\"keyword\">for</span> domain=<span class=\"string\">'mydomain.me'</span></div><div class=\"line\">[Fri Dec 30 08:59:12 HKT 2016] _w=<span class=\"string\">'no'</span></div><div class=\"line\">[Fri Dec 30 08:59:12 HKT 2016] Getting new-authz <span class=\"keyword\">for</span> domain=<span class=\"string\">'mydomain.me'</span></div><div class=\"line\">[Fri Dec 30 08:59:14 HKT 2016] The new-authz request is ok.</div><div class=\"line\">[Fri Dec 30 08:59:14 HKT 2016] mydomain.me is already verified, skip.</div><div class=\"line\">[Fri Dec 30 08:59:14 HKT 2016] mydomain.me is already verified, skip http-01.</div><div class=\"line\">[Fri Dec 30 08:59:14 HKT 2016] mydomain.me is already verified, skip http-01.</div><div class=\"line\">[Fri Dec 30 08:59:14 HKT 2016] Verify finished, start to sign.</div><div class=\"line\">[Fri Dec 30 08:59:16 HKT 2016] Cert success.</div><div class=\"line\">-----BEGIN CERTIFICATE-----</div><div class=\"line\">MIIEMTCCAxmgAwIBAgISA1+gJF5zwUDjNX/6Xzz5fo3lMA0GCSqGSIb3DQEBCwUA</div><div class=\"line\">MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD</div><div class=\"line\">ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNjEyMjkyMzU5MDBaFw0x</div><div class=\"line\">NzAzMjkyMzU5MDBaMBcxFTATBgNVBAMTDHdlYWtzYW5kLmNvbTBZMBMGByqGSM49</div><div class=\"line\">****************************************************************</div><div class=\"line\">4p40tm0aMB837XQ9jeAXvXulhVH/7/wWZ8/vkUUvuHSCYHagENiq/3DYj4a85Iw9</div><div class=\"line\">+6u1r7atYHJ2VwqSamiyTGDQuhc5wdXIQxY/YQQqkAmn5tLsTZnnOavc4plANT40</div><div class=\"line\">zweiG8vcIvMVnnkM0TSz8G1yzv1nOkruN3ozQkLMu6YS7lk/ENBN7DBtYVSmJeU2</div><div class=\"line\">VAXE+zgRaP7JFOqK6DrOwhyE2LSgae83Wq/XgXxjfIo1Zmn2UmlE0sbdNKBasnf9</div><div class=\"line\">gPUI45eltrjcv8FCSTOUcT7PWCa3</div><div class=\"line\">-----END CERTIFICATE-----</div><div class=\"line\">[Fri Dec 30 08:59:16 HKT 2016] Your cert is <span class=\"keyword\">in</span>  /root/.acme.sh/mydomain.me_ecc/mydomain.me.cer</div><div class=\"line\">[Fri Dec 30 08:59:16 HKT 2016] Your cert key is <span class=\"keyword\">in</span>  /root/.acme.sh/mydomain.me_ecc/mydomain.me.key</div><div class=\"line\">[Fri Dec 30 08:59:16 HKT 2016] The intermediate CA cert is <span class=\"keyword\">in</span>  /root/.acme.sh/mydomain.me_ecc/ca.cer</div><div class=\"line\">[Fri Dec 30 08:59:16 HKT 2016] And the full chain certs is there:  /root/.acme.sh/mydomain.me_ecc/fullchain.cer</div></pre></td></tr></table></figure>\n<p><code>-k</code> 表示密钥长度，后面的值可以是 <code>ec-256</code> 、<code>ec-284</code>、<code>2048</code>、<code>3072</code>、<code>4096</code>、<code>8192</code>，带有 <code>ec</code> 表示生成的是 ECC 证书，没有则是 RSA 证书。在安全性上 256 位的 ECC 证书等同于 3072 位的 RSA 证书。</p>\n<h4 id=\"证书更新\"><a href=\"#证书更新\" class=\"headerlink\" title=\"证书更新\"></a>证书更新</h4><p>由于 Let’s Encrypt 的证书有效期只有 3 个月，因此需要 90 天至少要更新一次证书，acme.sh 脚本会每 60 天自动更新证书。也可以手动更新。</p>\n<p>手动更新 ECC 证书，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo ~/.acme.sh/acme.sh --renew -d mydomain.com --force --ecc</div></pre></td></tr></table></figure>\n<p>如果是 RSA 证书则执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo ~/.acme.sh/acme.sh --renew -d mydomain.com --force</div></pre></td></tr></table></figure>\n<h3 id=\"1-2-3-安装证书和密钥\"><a href=\"#1-2-3-安装证书和密钥\" class=\"headerlink\" title=\"1.2.3. 安装证书和密钥\"></a>1.2.3. 安装证书和密钥</h3><h4 id=\"ECC-证书\"><a href=\"#ECC-证书\" class=\"headerlink\" title=\"ECC 证书\"></a>ECC 证书</h4><p>将证书和密钥安装到 /etc/v2ray 中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo ~/.acme.sh/acme.sh --installcert -d mydomain.me --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key --ecc</div></pre></td></tr></table></figure>\n<h4 id=\"RSA-证书\"><a href=\"#RSA-证书\" class=\"headerlink\" title=\"RSA 证书\"></a>RSA 证书</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo ~/.acme.sh/acme.sh --installcert -d mydomain.me --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key</div></pre></td></tr></table></figure>\n<p>注意：无论什么情况，密钥(即上面的v2ray.key)都不能泄漏，如果你不幸泄漏了密钥，可以使用 acme.sh 将原证书吊销，再生成新的证书，吊销方法请自行参考 acme.sh 的手册</p>\n<h2 id=\"1-3-配置-V2Ray\"><a href=\"#1-3-配置-V2Ray\" class=\"headerlink\" title=\"1.3. 配置 V2Ray\"></a>1.3. 配置 V2Ray</h2><h3 id=\"1-3-1-服务器\"><a href=\"#1-3-1-服务器\" class=\"headerlink\" title=\"1.3.1. 服务器\"></a>1.3.1. 服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"inbound\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"port\"</span>: 443, // 建议使用 443 端口</div><div class=\"line\">    <span class=\"string\">\"protocol\"</span>: <span class=\"string\">\"vmess\"</span>,    </div><div class=\"line\">    <span class=\"string\">\"settings\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"clients\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"string\">\"id\"</span>: <span class=\"string\">\"23ad6b10-8d1a-40f7-8ad0-e3e35cd38297\"</span>,  </div><div class=\"line\">          <span class=\"string\">\"alterId\"</span>: 64</div><div class=\"line\">        &#125;</div><div class=\"line\">      ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"streamSettings\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"network\"</span>: <span class=\"string\">\"tcp\"</span>,</div><div class=\"line\">      <span class=\"string\">\"security\"</span>: <span class=\"string\">\"tls\"</span>, // security 要设置为 tls 才会启用 TLS</div><div class=\"line\">      <span class=\"string\">\"tlsSettings\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"certificates\"</span>: [</div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"string\">\"certificateFile\"</span>: <span class=\"string\">\"/etc/v2ray/v2ray.crt\"</span>, //证书文件</div><div class=\"line\">            <span class=\"string\">\"keyFile\"</span>: <span class=\"string\">\"/etc/v2ray/v2ray.key\"</span> //密钥文件</div><div class=\"line\">          &#125;</div><div class=\"line\">        ]</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"outbound\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"protocol\"</span>: <span class=\"string\">\"freedom\"</span>,</div><div class=\"line\">    <span class=\"string\">\"settings\"</span>: &#123;&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"1-3-2-客户端\"><a href=\"#1-3-2-客户端\" class=\"headerlink\" title=\"1.3.2. 客户端\"></a>1.3.2. 客户端</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"inbound\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"port\"</span>: 1080,</div><div class=\"line\">    <span class=\"string\">\"protocol\"</span>: <span class=\"string\">\"socks\"</span>,</div><div class=\"line\">    <span class=\"string\">\"settings\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"auth\"</span>: <span class=\"string\">\"noauth\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"outbound\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"protocol\"</span>: <span class=\"string\">\"vmess\"</span>,</div><div class=\"line\">    <span class=\"string\">\"settings\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"vnext\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"string\">\"address\"</span>: <span class=\"string\">\"mydomain.me\"</span>,</div><div class=\"line\">          <span class=\"string\">\"port\"</span>: 443,</div><div class=\"line\">          <span class=\"string\">\"users\"</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">              <span class=\"string\">\"id\"</span>: <span class=\"string\">\"23ad6b10-8d1a-40f7-8ad0-e3e35cd38297\"</span>,</div><div class=\"line\">              <span class=\"string\">\"alterId\"</span>: 64</div><div class=\"line\">            &#125;</div><div class=\"line\">          ]</div><div class=\"line\">        &#125;</div><div class=\"line\">      ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"streamSettings\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"network\"</span>: <span class=\"string\">\"tcp\"</span>,</div><div class=\"line\">      <span class=\"string\">\"security\"</span>: <span class=\"string\">\"tls\"</span> // 客户端的 security 也要设置为 tls</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"1-4-验证\"><a href=\"#1-4-验证\" class=\"headerlink\" title=\"1.4. 验证\"></a>1.4. 验证</h2><p>一般来说，按照以上步骤操作完成，V2Ray 客户端能够正常联网说明 TLS 已经成功启用。但要是有个可靠的方法来验证是否正常开启 TLS 无疑更令人放心。 验证的方法有很多，我仅介绍一种小白化一点的，便是 <a href=\"https://www.ssllabs.com/ssltest/index.html\" target=\"_blank\" rel=\"external\">Qualys SSL Labs’s SSL Server Test</a>。</p>\n<p>注意：使用 Qualys SSL Labs’s SSL Server Test 要求使用 443 端口，意味着你服务器配置的 inbound.port 应当是 443</p>\n<p>打开 <a href=\"https://www.ssllabs.com/ssltest/index.html\" target=\"_blank\" rel=\"external\">Qualys SSL Labs’s SSL Server Test</a>，在 Hostname 中输入你的域名，点提交，过一会结果就出来了。<img src=\"https://toutyrater.github.io/resource/images/tls_test1.png\" alt=\"img\"></p>\n<p><img src=\"https://toutyrater.github.io/resource/images/tls_test2.png\" alt=\"img\">这是对于你的 TLS/SSL 的一个总体评分，我这里评分为 A，看来还不错。有这样的界面算是成功了。</p>\n<p><img src=\"https://toutyrater.github.io/resource/images/tls_test3.png\" alt=\"img\">这是关于证书的信息。从图中可以看出，我的这个证书有效期是从 2016 年 12 月 27 号到 2017 年的 3 月 27 号，密钥是 256 位的 ECC，证书签发机构是 Let’s Encrypt，重要的是最后一行，<code>Trusted</code> 为 <code>Yes</code>,表明我这个证书可信。</p>\n<h2 id=\"1-5-温馨提醒\"><a href=\"#1-5-温馨提醒\" class=\"headerlink\" title=\"1.5. 温馨提醒\"></a>1.5. 温馨提醒</h2><p>不要想当然地把在 SS 和 SSR 的观念带过来，更不要被别人轻飘飘的一句话误导，V2Ray 的 TLS 不是伪装！不是混淆！这是真正的 TLS！因此才需要域名需要证书。后文提到的 WS(WebSocks) 也不是伪装。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1503032917499&amp;di=67363c688d949aa5c6a3ed50992c0fee&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.igooda.cn%2Fuploads%2Fallimg%2F141125%2F112R61115-0.JPG\" target=\"_blank\" rel=\"external\"><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1503032917499&amp;di=67363c688d949aa5c6a3ed50992c0fee&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.igooda.cn%2Fuploads%2Fallimg%2F141125%2F112R61115-0.JPG\" alt=\"img\"></a></p>\n<h1 id=\"1-TLS\"><a href=\"#1-TLS\" class=\"headerlink\" title=\"1. TLS\"></a>1. TLS</h1><p>从 v1.19 起引入了 TLS，TLS 中文译名是传输层安全，如果你没听说过，请 Google 了解一下。以下给出些我认为介绍较好的文章链接：</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html\" target=\"_blank\" rel=\"external\">SSL/TLS协议运行机制的概述</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E5%8D%94%E8%AD%B0\" target=\"_blank\" rel=\"external\">传输层安全协议</a></p>\n<p>Shadowsocks 的作者 clowwindy 却认为<a href=\"https://gist.github.com/clowwindy/5947691\" target=\"_blank\" rel=\"external\">翻墙不该用 SSL</a>。那么到底该不该用？对此我不作评论，各位自行思考。这里我只教大家如何开启 TLS。</p>\n<h2 id=\"1-1-注册一个域名\"><a href=\"#1-1-注册一个域名\" class=\"headerlink\" title=\"1.1. 注册一个域名\"></a>1.1. 注册一个域名</h2><p>如果已经注册有域名了可以跳过。 域名有免费的有付费的，总体来说付费的会优于免费的，具体差别请 Google。如果你不舍得为一个域名每年花点钱，用个免费域名也可以。为了方便，这里我将以免费域名为例。</p>\n<p>关于如何注册一个免费域名，我发现有一位网友写得很详细，就不多说了。请参考：</p>\n<p><a href=\"https://doub.io/dbwz-3/\" target=\"_blank\" rel=\"external\">教你申请.tk/.ml/.cf/.gq/.ga等免费域名</a></p>\n<p>至于注册其它付费的域名请 Google 吧，差不多都是大同小异的。</p>\n<p>注册好域名之后务必记得设置 DNS 解析到你的 VPS !</p>\n<p>据了解，在 freenom 注册的域名在对应的 IP 上要有一个网站，否则注册之后域名会被回收。如果您只是想用免费域名在 V2Ray 用一下 TLS，又不愿意（懒得、不会）建站，建议您看看您的亲朋好友谁有手上有域名的，向他们要一个二级域名就行了</p>\n<p>以下假设注册的域名为 mydomain.me，请将之替换成自己的域名。</p>\n<h2 id=\"1-2-证书生成\"><a href=\"#1-2-证书生成\" class=\"headerlink\" title=\"1.2. 证书生成\"></a>1.2. 证书生成</h2><p>使用 TLS 需要证书，证书也有免费付费的，同样的这里使用免费证书，证书认证机构为 <a href=\"https://letsencrypt.org/\" target=\"_blank\" rel=\"external\">Let’s Encrypt</a>。 证书的生成有许多方法，这里使用的是比较简单的方法：使用 <a href=\"https://github.com/Neilpang/acme.sh\" target=\"_blank\" rel=\"external\">acme.sh</a> 脚本生成，本部分说明部分内容参考于<a href=\"https://github.com/Neilpang/acme.sh/blob/master/README.md\" target=\"_blank\" rel=\"external\">acme.sh README</a>。</p>\n<p>证书有两种，一种是 ECC 证书（内置公钥是 ECDSA 公钥），一种是 RSA 证书（内置 RSA 公钥）。简单来说，同等长度 ECC 比 RSA 更安全,也就是说在具有同样安全性的情况下，ECC 的密钥长度比 RSA 短得多（加密解密会更快）。但问题是 ECC 的兼容性会差一些，Android 4.x 以下和 Windows XP 不支持。只要您的设备不是非常老的老古董，强烈建议使用 ECC 证书。</p>\n<p>以下将给出这两类证书的生成方法，请大家根据自身的情况自行选择其中一种证书类型。</p>\n<p>证书生成只需在服务器上操作。</p>\n<h3 id=\"1-2-1-安装-acme-sh\"><a href=\"#1-2-1-安装-acme-sh\" class=\"headerlink\" title=\"1.2.1. 安装 acme.sh\"></a>1.2.1. 安装 acme.sh</h3><p>执行以下命令，acme.sh 会安装到 ~/.acme.sh 目录下。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ curl  https://get.acme.sh | sh</div><div class=\"line\">% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                               Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100   671  100   671    0     0    680      0 --:--:-- --:--:-- --:--:--   679</div><div class=\"line\">% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</div><div class=\"line\">                               Dload  Upload   Total   Spent    Left  Speed</div><div class=\"line\">100  112k  100  112k    0     0   690k      0 --:--:-- --:--:-- --:--:--  693k</div><div class=\"line\">[Fri 30 Dec 01:03:32 GMT 2016] Installing from online archive.</div><div class=\"line\">[Fri 30 Dec 01:03:32 GMT 2016] Downloading https://github.com/Neilpang/acme.sh/archive/master.tar.gz</div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] Extracting master.tar.gz</div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] Installing to /home/user/.acme.sh</div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] Installed to /home/user/.acme.sh/acme.sh</div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] Installing <span class=\"built_in\">alias</span> to <span class=\"string\">'/home/user/.profile'</span></div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] OK, Close and reopen your terminal to start using acme.sh</div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] Installing cron job</div><div class=\"line\">no crontab <span class=\"keyword\">for</span> user</div><div class=\"line\">no crontab <span class=\"keyword\">for</span> user</div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] Good, bash is found, so change the shebang to use bash as preferred.</div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] OK</div><div class=\"line\">[Fri 30 Dec 01:03:33 GMT 2016] Install success!</div></pre></td></tr></table></figure>\n<p>安装成功后执行 <code>source ~/.bashrc</code> 以确保脚本所设置的命令别名生效。</p>\n<p>如果安装报错，那么可能是因为系统缺少 acme.sh 所需要的依赖项，acme.sh 的依赖项主要是 netcat(nc)，我们通过以下命令来安装这些依赖项，然后重新安装一遍 acme.sh:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get -y install netcat</div></pre></td></tr></table></figure>\n<h3 id=\"1-2-2-使用-acme-sh-生成证书\"><a href=\"#1-2-2-使用-acme-sh-生成证书\" class=\"headerlink\" title=\"1.2.2. 使用 acme.sh 生成证书\"></a>1.2.2. 使用 acme.sh 生成证书</h3><h4 id=\"证书生成\"><a href=\"#证书生成\" class=\"headerlink\" title=\"证书生成\"></a>证书生成</h4><p>执行以下命令生成证书：</p>\n<p>以下的命令会临时监听 80 端口，请确保执行该命令前 80 端口没有使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo ~/.acme.sh/acme.sh --issue -d mydomain.me --standalone -k ec-256</div><div class=\"line\">[Fri Dec 30 08:59:12 HKT 2016] Standalone mode.</div><div class=\"line\">[Fri Dec 30 08:59:12 HKT 2016] Single domain=<span class=\"string\">'mydomain.me'</span></div><div class=\"line\">[Fri Dec 30 08:59:12 HKT 2016] Getting domain auth token <span class=\"keyword\">for</span> each domain</div><div class=\"line\">[Fri Dec 30 08:59:12 HKT 2016] Getting webroot <span class=\"keyword\">for</span> domain=<span class=\"string\">'mydomain.me'</span></div><div class=\"line\">[Fri Dec 30 08:59:12 HKT 2016] _w=<span class=\"string\">'no'</span></div><div class=\"line\">[Fri Dec 30 08:59:12 HKT 2016] Getting new-authz <span class=\"keyword\">for</span> domain=<span class=\"string\">'mydomain.me'</span></div><div class=\"line\">[Fri Dec 30 08:59:14 HKT 2016] The new-authz request is ok.</div><div class=\"line\">[Fri Dec 30 08:59:14 HKT 2016] mydomain.me is already verified, skip.</div><div class=\"line\">[Fri Dec 30 08:59:14 HKT 2016] mydomain.me is already verified, skip http-01.</div><div class=\"line\">[Fri Dec 30 08:59:14 HKT 2016] mydomain.me is already verified, skip http-01.</div><div class=\"line\">[Fri Dec 30 08:59:14 HKT 2016] Verify finished, start to sign.</div><div class=\"line\">[Fri Dec 30 08:59:16 HKT 2016] Cert success.</div><div class=\"line\">-----BEGIN CERTIFICATE-----</div><div class=\"line\">MIIEMTCCAxmgAwIBAgISA1+gJF5zwUDjNX/6Xzz5fo3lMA0GCSqGSIb3DQEBCwUA</div><div class=\"line\">MEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD</div><div class=\"line\">ExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNjEyMjkyMzU5MDBaFw0x</div><div class=\"line\">NzAzMjkyMzU5MDBaMBcxFTATBgNVBAMTDHdlYWtzYW5kLmNvbTBZMBMGByqGSM49</div><div class=\"line\">****************************************************************</div><div class=\"line\">4p40tm0aMB837XQ9jeAXvXulhVH/7/wWZ8/vkUUvuHSCYHagENiq/3DYj4a85Iw9</div><div class=\"line\">+6u1r7atYHJ2VwqSamiyTGDQuhc5wdXIQxY/YQQqkAmn5tLsTZnnOavc4plANT40</div><div class=\"line\">zweiG8vcIvMVnnkM0TSz8G1yzv1nOkruN3ozQkLMu6YS7lk/ENBN7DBtYVSmJeU2</div><div class=\"line\">VAXE+zgRaP7JFOqK6DrOwhyE2LSgae83Wq/XgXxjfIo1Zmn2UmlE0sbdNKBasnf9</div><div class=\"line\">gPUI45eltrjcv8FCSTOUcT7PWCa3</div><div class=\"line\">-----END CERTIFICATE-----</div><div class=\"line\">[Fri Dec 30 08:59:16 HKT 2016] Your cert is <span class=\"keyword\">in</span>  /root/.acme.sh/mydomain.me_ecc/mydomain.me.cer</div><div class=\"line\">[Fri Dec 30 08:59:16 HKT 2016] Your cert key is <span class=\"keyword\">in</span>  /root/.acme.sh/mydomain.me_ecc/mydomain.me.key</div><div class=\"line\">[Fri Dec 30 08:59:16 HKT 2016] The intermediate CA cert is <span class=\"keyword\">in</span>  /root/.acme.sh/mydomain.me_ecc/ca.cer</div><div class=\"line\">[Fri Dec 30 08:59:16 HKT 2016] And the full chain certs is there:  /root/.acme.sh/mydomain.me_ecc/fullchain.cer</div></pre></td></tr></table></figure>\n<p><code>-k</code> 表示密钥长度，后面的值可以是 <code>ec-256</code> 、<code>ec-284</code>、<code>2048</code>、<code>3072</code>、<code>4096</code>、<code>8192</code>，带有 <code>ec</code> 表示生成的是 ECC 证书，没有则是 RSA 证书。在安全性上 256 位的 ECC 证书等同于 3072 位的 RSA 证书。</p>\n<h4 id=\"证书更新\"><a href=\"#证书更新\" class=\"headerlink\" title=\"证书更新\"></a>证书更新</h4><p>由于 Let’s Encrypt 的证书有效期只有 3 个月，因此需要 90 天至少要更新一次证书，acme.sh 脚本会每 60 天自动更新证书。也可以手动更新。</p>\n<p>手动更新 ECC 证书，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo ~/.acme.sh/acme.sh --renew -d mydomain.com --force --ecc</div></pre></td></tr></table></figure>\n<p>如果是 RSA 证书则执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo ~/.acme.sh/acme.sh --renew -d mydomain.com --force</div></pre></td></tr></table></figure>\n<h3 id=\"1-2-3-安装证书和密钥\"><a href=\"#1-2-3-安装证书和密钥\" class=\"headerlink\" title=\"1.2.3. 安装证书和密钥\"></a>1.2.3. 安装证书和密钥</h3><h4 id=\"ECC-证书\"><a href=\"#ECC-证书\" class=\"headerlink\" title=\"ECC 证书\"></a>ECC 证书</h4><p>将证书和密钥安装到 /etc/v2ray 中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo ~/.acme.sh/acme.sh --installcert -d mydomain.me --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key --ecc</div></pre></td></tr></table></figure>\n<h4 id=\"RSA-证书\"><a href=\"#RSA-证书\" class=\"headerlink\" title=\"RSA 证书\"></a>RSA 证书</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo ~/.acme.sh/acme.sh --installcert -d mydomain.me --fullchainpath /etc/v2ray/v2ray.crt --keypath /etc/v2ray/v2ray.key</div></pre></td></tr></table></figure>\n<p>注意：无论什么情况，密钥(即上面的v2ray.key)都不能泄漏，如果你不幸泄漏了密钥，可以使用 acme.sh 将原证书吊销，再生成新的证书，吊销方法请自行参考 acme.sh 的手册</p>\n<h2 id=\"1-3-配置-V2Ray\"><a href=\"#1-3-配置-V2Ray\" class=\"headerlink\" title=\"1.3. 配置 V2Ray\"></a>1.3. 配置 V2Ray</h2><h3 id=\"1-3-1-服务器\"><a href=\"#1-3-1-服务器\" class=\"headerlink\" title=\"1.3.1. 服务器\"></a>1.3.1. 服务器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"inbound\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"port\"</span>: 443, // 建议使用 443 端口</div><div class=\"line\">    <span class=\"string\">\"protocol\"</span>: <span class=\"string\">\"vmess\"</span>,    </div><div class=\"line\">    <span class=\"string\">\"settings\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"clients\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"string\">\"id\"</span>: <span class=\"string\">\"23ad6b10-8d1a-40f7-8ad0-e3e35cd38297\"</span>,  </div><div class=\"line\">          <span class=\"string\">\"alterId\"</span>: 64</div><div class=\"line\">        &#125;</div><div class=\"line\">      ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"streamSettings\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"network\"</span>: <span class=\"string\">\"tcp\"</span>,</div><div class=\"line\">      <span class=\"string\">\"security\"</span>: <span class=\"string\">\"tls\"</span>, // security 要设置为 tls 才会启用 TLS</div><div class=\"line\">      <span class=\"string\">\"tlsSettings\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"certificates\"</span>: [</div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"string\">\"certificateFile\"</span>: <span class=\"string\">\"/etc/v2ray/v2ray.crt\"</span>, //证书文件</div><div class=\"line\">            <span class=\"string\">\"keyFile\"</span>: <span class=\"string\">\"/etc/v2ray/v2ray.key\"</span> //密钥文件</div><div class=\"line\">          &#125;</div><div class=\"line\">        ]</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"outbound\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"protocol\"</span>: <span class=\"string\">\"freedom\"</span>,</div><div class=\"line\">    <span class=\"string\">\"settings\"</span>: &#123;&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"1-3-2-客户端\"><a href=\"#1-3-2-客户端\" class=\"headerlink\" title=\"1.3.2. 客户端\"></a>1.3.2. 客户端</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"inbound\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"port\"</span>: 1080,</div><div class=\"line\">    <span class=\"string\">\"protocol\"</span>: <span class=\"string\">\"socks\"</span>,</div><div class=\"line\">    <span class=\"string\">\"settings\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"auth\"</span>: <span class=\"string\">\"noauth\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"outbound\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"protocol\"</span>: <span class=\"string\">\"vmess\"</span>,</div><div class=\"line\">    <span class=\"string\">\"settings\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"vnext\"</span>: [</div><div class=\"line\">        &#123;</div><div class=\"line\">          <span class=\"string\">\"address\"</span>: <span class=\"string\">\"mydomain.me\"</span>,</div><div class=\"line\">          <span class=\"string\">\"port\"</span>: 443,</div><div class=\"line\">          <span class=\"string\">\"users\"</span>: [</div><div class=\"line\">            &#123;</div><div class=\"line\">              <span class=\"string\">\"id\"</span>: <span class=\"string\">\"23ad6b10-8d1a-40f7-8ad0-e3e35cd38297\"</span>,</div><div class=\"line\">              <span class=\"string\">\"alterId\"</span>: 64</div><div class=\"line\">            &#125;</div><div class=\"line\">          ]</div><div class=\"line\">        &#125;</div><div class=\"line\">      ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">\"streamSettings\"</span>: &#123;</div><div class=\"line\">      <span class=\"string\">\"network\"</span>: <span class=\"string\">\"tcp\"</span>,</div><div class=\"line\">      <span class=\"string\">\"security\"</span>: <span class=\"string\">\"tls\"</span> // 客户端的 security 也要设置为 tls</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"1-4-验证\"><a href=\"#1-4-验证\" class=\"headerlink\" title=\"1.4. 验证\"></a>1.4. 验证</h2><p>一般来说，按照以上步骤操作完成，V2Ray 客户端能够正常联网说明 TLS 已经成功启用。但要是有个可靠的方法来验证是否正常开启 TLS 无疑更令人放心。 验证的方法有很多，我仅介绍一种小白化一点的，便是 <a href=\"https://www.ssllabs.com/ssltest/index.html\" target=\"_blank\" rel=\"external\">Qualys SSL Labs’s SSL Server Test</a>。</p>\n<p>注意：使用 Qualys SSL Labs’s SSL Server Test 要求使用 443 端口，意味着你服务器配置的 inbound.port 应当是 443</p>\n<p>打开 <a href=\"https://www.ssllabs.com/ssltest/index.html\" target=\"_blank\" rel=\"external\">Qualys SSL Labs’s SSL Server Test</a>，在 Hostname 中输入你的域名，点提交，过一会结果就出来了。<img src=\"https://toutyrater.github.io/resource/images/tls_test1.png\" alt=\"img\"></p>\n<p><img src=\"https://toutyrater.github.io/resource/images/tls_test2.png\" alt=\"img\">这是对于你的 TLS/SSL 的一个总体评分，我这里评分为 A，看来还不错。有这样的界面算是成功了。</p>\n<p><img src=\"https://toutyrater.github.io/resource/images/tls_test3.png\" alt=\"img\">这是关于证书的信息。从图中可以看出，我的这个证书有效期是从 2016 年 12 月 27 号到 2017 年的 3 月 27 号，密钥是 256 位的 ECC，证书签发机构是 Let’s Encrypt，重要的是最后一行，<code>Trusted</code> 为 <code>Yes</code>,表明我这个证书可信。</p>\n<h2 id=\"1-5-温馨提醒\"><a href=\"#1-5-温馨提醒\" class=\"headerlink\" title=\"1.5. 温馨提醒\"></a>1.5. 温馨提醒</h2><p>不要想当然地把在 SS 和 SSR 的观念带过来，更不要被别人轻飘飘的一句话误导，V2Ray 的 TLS 不是伪装！不是混淆！这是真正的 TLS！因此才需要域名需要证书。后文提到的 WS(WebSocks) 也不是伪装。</p>\n"},{"title":"CentOS6上安装V2ray","date":"2017-08-19T09:20:09.000Z","_content":"\nCentos6下的部署\n\n先说明下，V2Ray提供的一键安装脚本自带守护进程，意思是如果V2Ray如果意外中止，会自动重新启动，这样使用非常方便，但是Centos6下我这种Ctrl CV党实在是不会自己写脚本，采用的是简易运行方式，所以推荐尽量能采用2.1的步骤来安装。\n\n首先我们打开作者的Github项目，找到最新版的V2ray的下载地址\n\n```\nhttps://github.com/v2ray/v2ray-core/releases\n```\n\n目前最新版是v2.19，我们找到对应的v2ray-linux-64.zip文件，复制链接地址：\n\n```\nhttps://github.com/v2ray/v2ray-core/releases/download/v2.19/v2ray-linux-64.zip\n```\n\n然后我们Root用户Putty登录服务器，root目录下下载文件，代码如下：\n\n```\nwget https://github.com/v2ray/v2ray-core/releases/download/v2.19/v2ray-linux-64.zip\n```\n\n下载完毕后，我们解压zip文件\n\n```\nunzip v2ray-linux-64.zip\n```\n\n目录下会多一个目录名，v2ray-v2.19-linux-64（版本不同目录名有版本号的差别），为了后面操作方便，我们把目录名更名\n\n```\nmv v2ray-v2.19-linux-64 v2ray\n```\n\n进入目录，并对v2ray文件授权\n```\ncd /root/v2ray\n\nchmod +x v2ray\n```\n这时候v2ray就能使用了，但是运行v2ray，一旦关闭putty，v2ray就会自动关闭，所以我们需要后台运行，这里采用nohup的方式。\n```\ncd /root/v2ray\n\nnohup ./v2ray &\n```\n停止V2ray服务也很简单\n```\nkillall v2ray\n```\n编辑rc.local文件，添加开机启动V2ray\n```\nvi /etc/rc.d/rc.local\n```\n打开后添加两行\n```\ncd /root/v2ray\n\nnohup ./v2ray &\n```\n到这里安装就成功了。下面我们进入下一步，编辑配置文件。\n\n\n\n如果使用官网的一键安装脚本无法启动的，可以使用下面这个解决，来自于官网Issues\n\n```bash\n#!/bin/sh\n#\n# v2ray        Startup script for v2ray\n#\n# chkconfig: - 24 76\n# processname: v2ray\n# pidfile: /var/run/v2ray.pid\n# description: V2Ray proxy services\n#\n\n### BEGIN INIT INFO\n# Provides:          v2ray\n# Required-Start:    $network $local_fs $remote_fs\n# Required-Stop:     $remote_fs\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: V2Ray proxy services\n# Description:       V2Ray proxy services\n### END INIT INFO\n\nDESC=v2ray\nNAME=v2ray\nDAEMON=/usr/bin/v2ray/v2ray\nPIDFILE=/var/run/$NAME.pid\nLOCKFILE=/var/lock/subsys/$NAME\nSCRIPTNAME=/etc/init.d/$NAME\nRETVAL=0\n\nDAEMON_OPTS=\"-config /etc/v2ray/config.json\"\n\n# Exit if the package is not installed\n[ -x $DAEMON ] || exit 0\n\n# Read configuration variable file if it is present\n[ -r /etc/default/$NAME ] && . /etc/default/$NAME\n\n# Source function library.\n. /etc/rc.d/init.d/functions\n\nstart() {\n  local pids=$(pgrep -f $DAEMON)\n  if [ -n \"$pids\" ]; then\n    echo \"$NAME (pid $pids) is already running\"\n    RETVAL=0\n    return 0\n  fi\n\n  echo -n $\"Starting $NAME: \"\n\n  mkdir -p /var/log/v2ray\n  $DAEMON $DAEMON_OPTS 1>/dev/null 2>&1 &\n  echo $! > $PIDFILE\n\n  sleep 2\n  pgrep -f $DAEMON >/dev/null 2>&1\n  RETVAL=$?\n  if [ $RETVAL -eq 0 ]; then\n    success; echo\n    touch $LOCKFILE\n  else\n    failure; echo\n  fi\n  return $RETVAL\n}\n\nstop() {\n  local pids=$(pgrep -f $DAEMON)\n  if [ -z \"$pids\" ]; then\n    echo \"$NAME is not running\"\n    RETVAL=0\n    return 0\n  fi\n\n  echo -n $\"Stopping $NAME: \"\n  killproc -p ${PIDFILE} ${NAME}\n  RETVAL=$?\n  echo\n  [ $RETVAL = 0 ] && rm -f ${LOCKFILE} ${PIDFILE}\n}\n\nreload() {\n  echo -n $\"Reloading $NAME: \"\n  killproc -p ${PIDFILE} ${NAME} -HUP\n  RETVAL=$?\n  echo\n}\n\nrh_status() {\n  status -p ${PIDFILE} ${DAEMON}\n}\n\n# See how we were called.\ncase \"$1\" in\n  start)\n    rh_status >/dev/null 2>&1 && exit 0\n    start\n    ;;\n  stop)\n    stop\n    ;;\n  status)\n    rh_status\n    RETVAL=$?\n    ;;\n  restart)\n    stop\n    start\n    ;;\n  reload)\n    reload\n  ;;\n  *)\n    echo \"Usage: $SCRIPTNAME {start|stop|status|reload|restart}\" >&2\n    RETVAL=2\n  ;;\nesac\nexit $RETVAL\n```\n\n\n\nSave as `/etc/init.d/v2ray` and then excute:\n\n```bash\n$ sudo chmod +x /etc/init.d/v2ray\n$ sudo chkconfig v2ray on\n$ sudo service v2ray start\n```","source":"_posts/v2ray.md","raw":"---\ntitle: CentOS6上安装V2ray\ntag:  v2ray\ncategories: 代理技术\ndate: 2017-08-19 17:20:09\n\n---\n\nCentos6下的部署\n\n先说明下，V2Ray提供的一键安装脚本自带守护进程，意思是如果V2Ray如果意外中止，会自动重新启动，这样使用非常方便，但是Centos6下我这种Ctrl CV党实在是不会自己写脚本，采用的是简易运行方式，所以推荐尽量能采用2.1的步骤来安装。\n\n首先我们打开作者的Github项目，找到最新版的V2ray的下载地址\n\n```\nhttps://github.com/v2ray/v2ray-core/releases\n```\n\n目前最新版是v2.19，我们找到对应的v2ray-linux-64.zip文件，复制链接地址：\n\n```\nhttps://github.com/v2ray/v2ray-core/releases/download/v2.19/v2ray-linux-64.zip\n```\n\n然后我们Root用户Putty登录服务器，root目录下下载文件，代码如下：\n\n```\nwget https://github.com/v2ray/v2ray-core/releases/download/v2.19/v2ray-linux-64.zip\n```\n\n下载完毕后，我们解压zip文件\n\n```\nunzip v2ray-linux-64.zip\n```\n\n目录下会多一个目录名，v2ray-v2.19-linux-64（版本不同目录名有版本号的差别），为了后面操作方便，我们把目录名更名\n\n```\nmv v2ray-v2.19-linux-64 v2ray\n```\n\n进入目录，并对v2ray文件授权\n```\ncd /root/v2ray\n\nchmod +x v2ray\n```\n这时候v2ray就能使用了，但是运行v2ray，一旦关闭putty，v2ray就会自动关闭，所以我们需要后台运行，这里采用nohup的方式。\n```\ncd /root/v2ray\n\nnohup ./v2ray &\n```\n停止V2ray服务也很简单\n```\nkillall v2ray\n```\n编辑rc.local文件，添加开机启动V2ray\n```\nvi /etc/rc.d/rc.local\n```\n打开后添加两行\n```\ncd /root/v2ray\n\nnohup ./v2ray &\n```\n到这里安装就成功了。下面我们进入下一步，编辑配置文件。\n\n\n\n如果使用官网的一键安装脚本无法启动的，可以使用下面这个解决，来自于官网Issues\n\n```bash\n#!/bin/sh\n#\n# v2ray        Startup script for v2ray\n#\n# chkconfig: - 24 76\n# processname: v2ray\n# pidfile: /var/run/v2ray.pid\n# description: V2Ray proxy services\n#\n\n### BEGIN INIT INFO\n# Provides:          v2ray\n# Required-Start:    $network $local_fs $remote_fs\n# Required-Stop:     $remote_fs\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: V2Ray proxy services\n# Description:       V2Ray proxy services\n### END INIT INFO\n\nDESC=v2ray\nNAME=v2ray\nDAEMON=/usr/bin/v2ray/v2ray\nPIDFILE=/var/run/$NAME.pid\nLOCKFILE=/var/lock/subsys/$NAME\nSCRIPTNAME=/etc/init.d/$NAME\nRETVAL=0\n\nDAEMON_OPTS=\"-config /etc/v2ray/config.json\"\n\n# Exit if the package is not installed\n[ -x $DAEMON ] || exit 0\n\n# Read configuration variable file if it is present\n[ -r /etc/default/$NAME ] && . /etc/default/$NAME\n\n# Source function library.\n. /etc/rc.d/init.d/functions\n\nstart() {\n  local pids=$(pgrep -f $DAEMON)\n  if [ -n \"$pids\" ]; then\n    echo \"$NAME (pid $pids) is already running\"\n    RETVAL=0\n    return 0\n  fi\n\n  echo -n $\"Starting $NAME: \"\n\n  mkdir -p /var/log/v2ray\n  $DAEMON $DAEMON_OPTS 1>/dev/null 2>&1 &\n  echo $! > $PIDFILE\n\n  sleep 2\n  pgrep -f $DAEMON >/dev/null 2>&1\n  RETVAL=$?\n  if [ $RETVAL -eq 0 ]; then\n    success; echo\n    touch $LOCKFILE\n  else\n    failure; echo\n  fi\n  return $RETVAL\n}\n\nstop() {\n  local pids=$(pgrep -f $DAEMON)\n  if [ -z \"$pids\" ]; then\n    echo \"$NAME is not running\"\n    RETVAL=0\n    return 0\n  fi\n\n  echo -n $\"Stopping $NAME: \"\n  killproc -p ${PIDFILE} ${NAME}\n  RETVAL=$?\n  echo\n  [ $RETVAL = 0 ] && rm -f ${LOCKFILE} ${PIDFILE}\n}\n\nreload() {\n  echo -n $\"Reloading $NAME: \"\n  killproc -p ${PIDFILE} ${NAME} -HUP\n  RETVAL=$?\n  echo\n}\n\nrh_status() {\n  status -p ${PIDFILE} ${DAEMON}\n}\n\n# See how we were called.\ncase \"$1\" in\n  start)\n    rh_status >/dev/null 2>&1 && exit 0\n    start\n    ;;\n  stop)\n    stop\n    ;;\n  status)\n    rh_status\n    RETVAL=$?\n    ;;\n  restart)\n    stop\n    start\n    ;;\n  reload)\n    reload\n  ;;\n  *)\n    echo \"Usage: $SCRIPTNAME {start|stop|status|reload|restart}\" >&2\n    RETVAL=2\n  ;;\nesac\nexit $RETVAL\n```\n\n\n\nSave as `/etc/init.d/v2ray` and then excute:\n\n```bash\n$ sudo chmod +x /etc/init.d/v2ray\n$ sudo chkconfig v2ray on\n$ sudo service v2ray start\n```","slug":"v2ray","published":1,"updated":"2017-08-20T06:55:45.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kfg8ru000eygkv3cpmuubp","content":"<p>Centos6下的部署</p>\n<p>先说明下，V2Ray提供的一键安装脚本自带守护进程，意思是如果V2Ray如果意外中止，会自动重新启动，这样使用非常方便，但是Centos6下我这种Ctrl CV党实在是不会自己写脚本，采用的是简易运行方式，所以推荐尽量能采用2.1的步骤来安装。</p>\n<p>首先我们打开作者的Github项目，找到最新版的V2ray的下载地址</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/v2ray/</span>v2ray-core<span class=\"regexp\">/releases</span></div></pre></td></tr></table></figure>\n<p>目前最新版是v2.19，我们找到对应的v2ray-linux-64.zip文件，复制链接地址：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/v2ray/</span>v2ray-core<span class=\"regexp\">/releases/</span>download<span class=\"regexp\">/v2.19/</span>v2ray-linux-<span class=\"number\">64</span>.zip</div></pre></td></tr></table></figure>\n<p>然后我们Root用户Putty登录服务器，root目录下下载文件，代码如下：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/v2ray/</span>v2ray-core<span class=\"regexp\">/releases/</span>download<span class=\"regexp\">/v2.19/</span>v2ray-linux-<span class=\"number\">64</span>.zip</div></pre></td></tr></table></figure>\n<p>下载完毕后，我们解压zip文件</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">unzip</span> <span class=\"selector-tag\">v2ray-linux-64</span><span class=\"selector-class\">.zip</span></div></pre></td></tr></table></figure>\n<p>目录下会多一个目录名，v2ray-v2.19-linux-64（版本不同目录名有版本号的差别），为了后面操作方便，我们把目录名更名</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv v2ray-v2.19-linux-64 v2ray</div></pre></td></tr></table></figure>\n<p>进入目录，并对v2ray文件授权<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/root/v2ray</span></div><div class=\"line\"></div><div class=\"line\">chmod +x v2ray</div></pre></td></tr></table></figure></p>\n<p>这时候v2ray就能使用了，但是运行v2ray，一旦关闭putty，v2ray就会自动关闭，所以我们需要后台运行，这里采用nohup的方式。<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/root/v2ray</span></div><div class=\"line\"></div><div class=\"line\">nohup <span class=\"string\">./v2ray</span> &amp;</div></pre></td></tr></table></figure></p>\n<p>停止V2ray服务也很简单<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">killall</span> v2ray</div></pre></td></tr></table></figure></p>\n<p>编辑rc.local文件，添加开机启动V2ray<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/rc.d/rc.<span class=\"keyword\">local</span></div></pre></td></tr></table></figure></p>\n<p>打开后添加两行<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/root/v2ray</span></div><div class=\"line\"></div><div class=\"line\">nohup <span class=\"string\">./v2ray</span> &amp;</div></pre></td></tr></table></figure></p>\n<p>到这里安装就成功了。下面我们进入下一步，编辑配置文件。</p>\n<p>如果使用官网的一键安装脚本无法启动的，可以使用下面这个解决，来自于官网Issues</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># v2ray        Startup script for v2ray</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># chkconfig: - 24 76</span></div><div class=\"line\"><span class=\"comment\"># processname: v2ray</span></div><div class=\"line\"><span class=\"comment\"># pidfile: /var/run/v2ray.pid</span></div><div class=\"line\"><span class=\"comment\"># description: V2Ray proxy services</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">### BEGIN INIT INFO</span></div><div class=\"line\"><span class=\"comment\"># Provides:          v2ray</span></div><div class=\"line\"><span class=\"comment\"># Required-Start:    $network $local_fs $remote_fs</span></div><div class=\"line\"><span class=\"comment\"># Required-Stop:     $remote_fs</span></div><div class=\"line\"><span class=\"comment\"># Default-Start:     2 3 4 5</span></div><div class=\"line\"><span class=\"comment\"># Default-Stop:      0 1 6</span></div><div class=\"line\"><span class=\"comment\"># Short-Description: V2Ray proxy services</span></div><div class=\"line\"><span class=\"comment\"># Description:       V2Ray proxy services</span></div><div class=\"line\"><span class=\"comment\">### END INIT INFO</span></div><div class=\"line\"></div><div class=\"line\">DESC=v2ray</div><div class=\"line\">NAME=v2ray</div><div class=\"line\">DAEMON=/usr/bin/v2ray/v2ray</div><div class=\"line\">PIDFILE=/var/run/<span class=\"variable\">$NAME</span>.pid</div><div class=\"line\">LOCKFILE=/var/lock/subsys/<span class=\"variable\">$NAME</span></div><div class=\"line\">SCRIPTNAME=/etc/init.d/<span class=\"variable\">$NAME</span></div><div class=\"line\">RETVAL=0</div><div class=\"line\"></div><div class=\"line\">DAEMON_OPTS=<span class=\"string\">\"-config /etc/v2ray/config.json\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Exit if the package is not installed</span></div><div class=\"line\">[ -x <span class=\"variable\">$DAEMON</span> ] || <span class=\"built_in\">exit</span> 0</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Read configuration variable file if it is present</span></div><div class=\"line\">[ -r /etc/default/<span class=\"variable\">$NAME</span> ] &amp;&amp; . /etc/default/<span class=\"variable\">$NAME</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Source function library.</span></div><div class=\"line\">. /etc/rc.d/init.d/<span class=\"built_in\">functions</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</div><div class=\"line\">  <span class=\"built_in\">local</span> pids=$(pgrep -f <span class=\"variable\">$DAEMON</span>)</div><div class=\"line\">  <span class=\"keyword\">if</span> [ -n <span class=\"string\">\"<span class=\"variable\">$pids</span>\"</span> ]; <span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$NAME</span> (pid <span class=\"variable\">$pids</span>) is already running\"</span></div><div class=\"line\">    RETVAL=0</div><div class=\"line\">    <span class=\"built_in\">return</span> 0</div><div class=\"line\">  <span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">echo</span> -n $<span class=\"string\">\"Starting <span class=\"variable\">$NAME</span>: \"</span></div><div class=\"line\"></div><div class=\"line\">  mkdir -p /var/<span class=\"built_in\">log</span>/v2ray</div><div class=\"line\">  <span class=\"variable\">$DAEMON</span> <span class=\"variable\">$DAEMON_OPTS</span> 1&gt;/dev/null 2&gt;&amp;1 &amp;</div><div class=\"line\">  <span class=\"built_in\">echo</span> $! &gt; <span class=\"variable\">$PIDFILE</span></div><div class=\"line\"></div><div class=\"line\">  sleep 2</div><div class=\"line\">  pgrep -f <span class=\"variable\">$DAEMON</span> &gt;/dev/null 2&gt;&amp;1</div><div class=\"line\">  RETVAL=$?</div><div class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$RETVAL</span> -eq 0 ]; <span class=\"keyword\">then</span></div><div class=\"line\">    success; <span class=\"built_in\">echo</span></div><div class=\"line\">    touch <span class=\"variable\">$LOCKFILE</span></div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">    failure; <span class=\"built_in\">echo</span></div><div class=\"line\">  <span class=\"keyword\">fi</span></div><div class=\"line\">  <span class=\"built_in\">return</span> <span class=\"variable\">$RETVAL</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</div><div class=\"line\">  <span class=\"built_in\">local</span> pids=$(pgrep -f <span class=\"variable\">$DAEMON</span>)</div><div class=\"line\">  <span class=\"keyword\">if</span> [ -z <span class=\"string\">\"<span class=\"variable\">$pids</span>\"</span> ]; <span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$NAME</span> is not running\"</span></div><div class=\"line\">    RETVAL=0</div><div class=\"line\">    <span class=\"built_in\">return</span> 0</div><div class=\"line\">  <span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">echo</span> -n $<span class=\"string\">\"Stopping <span class=\"variable\">$NAME</span>: \"</span></div><div class=\"line\">  killproc -p <span class=\"variable\">$&#123;PIDFILE&#125;</span> <span class=\"variable\">$&#123;NAME&#125;</span></div><div class=\"line\">  RETVAL=$?</div><div class=\"line\">  <span class=\"built_in\">echo</span></div><div class=\"line\">  [ <span class=\"variable\">$RETVAL</span> = 0 ] &amp;&amp; rm -f <span class=\"variable\">$&#123;LOCKFILE&#125;</span> <span class=\"variable\">$&#123;PIDFILE&#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">reload</span></span>() &#123;</div><div class=\"line\">  <span class=\"built_in\">echo</span> -n $<span class=\"string\">\"Reloading <span class=\"variable\">$NAME</span>: \"</span></div><div class=\"line\">  killproc -p <span class=\"variable\">$&#123;PIDFILE&#125;</span> <span class=\"variable\">$&#123;NAME&#125;</span> -HUP</div><div class=\"line\">  RETVAL=$?</div><div class=\"line\">  <span class=\"built_in\">echo</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">rh_status</span></span>() &#123;</div><div class=\"line\">  status -p <span class=\"variable\">$&#123;PIDFILE&#125;</span> <span class=\"variable\">$&#123;DAEMON&#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># See how we were called.</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></div><div class=\"line\">  start)</div><div class=\"line\">    rh_status &gt;/dev/null 2&gt;&amp;1 &amp;&amp; <span class=\"built_in\">exit</span> 0</div><div class=\"line\">    start</div><div class=\"line\">    ;;</div><div class=\"line\">  stop)</div><div class=\"line\">    stop</div><div class=\"line\">    ;;</div><div class=\"line\">  status)</div><div class=\"line\">    rh_status</div><div class=\"line\">    RETVAL=$?</div><div class=\"line\">    ;;</div><div class=\"line\">  restart)</div><div class=\"line\">    stop</div><div class=\"line\">    start</div><div class=\"line\">    ;;</div><div class=\"line\">  reload)</div><div class=\"line\">    reload</div><div class=\"line\">  ;;</div><div class=\"line\">  *)</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Usage: <span class=\"variable\">$SCRIPTNAME</span> &#123;start|stop|status|reload|restart&#125;\"</span> &gt;&amp;2</div><div class=\"line\">    RETVAL=2</div><div class=\"line\">  ;;</div><div class=\"line\"><span class=\"keyword\">esac</span></div><div class=\"line\"><span class=\"built_in\">exit</span> <span class=\"variable\">$RETVAL</span></div></pre></td></tr></table></figure>\n<p>Save as <code>/etc/init.d/v2ray</code> and then excute:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo chmod +x /etc/init.d/v2ray</div><div class=\"line\">$ sudo chkconfig v2ray on</div><div class=\"line\">$ sudo service v2ray start</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Centos6下的部署</p>\n<p>先说明下，V2Ray提供的一键安装脚本自带守护进程，意思是如果V2Ray如果意外中止，会自动重新启动，这样使用非常方便，但是Centos6下我这种Ctrl CV党实在是不会自己写脚本，采用的是简易运行方式，所以推荐尽量能采用2.1的步骤来安装。</p>\n<p>首先我们打开作者的Github项目，找到最新版的V2ray的下载地址</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/v2ray/</span>v2ray-core<span class=\"regexp\">/releases</span></div></pre></td></tr></table></figure>\n<p>目前最新版是v2.19，我们找到对应的v2ray-linux-64.zip文件，复制链接地址：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/v2ray/</span>v2ray-core<span class=\"regexp\">/releases/</span>download<span class=\"regexp\">/v2.19/</span>v2ray-linux-<span class=\"number\">64</span>.zip</div></pre></td></tr></table></figure>\n<p>然后我们Root用户Putty登录服务器，root目录下下载文件，代码如下：</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget https:<span class=\"regexp\">//gi</span>thub.com<span class=\"regexp\">/v2ray/</span>v2ray-core<span class=\"regexp\">/releases/</span>download<span class=\"regexp\">/v2.19/</span>v2ray-linux-<span class=\"number\">64</span>.zip</div></pre></td></tr></table></figure>\n<p>下载完毕后，我们解压zip文件</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">unzip</span> <span class=\"selector-tag\">v2ray-linux-64</span><span class=\"selector-class\">.zip</span></div></pre></td></tr></table></figure>\n<p>目录下会多一个目录名，v2ray-v2.19-linux-64（版本不同目录名有版本号的差别），为了后面操作方便，我们把目录名更名</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv v2ray-v2.19-linux-64 v2ray</div></pre></td></tr></table></figure>\n<p>进入目录，并对v2ray文件授权<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/root/v2ray</span></div><div class=\"line\"></div><div class=\"line\">chmod +x v2ray</div></pre></td></tr></table></figure></p>\n<p>这时候v2ray就能使用了，但是运行v2ray，一旦关闭putty，v2ray就会自动关闭，所以我们需要后台运行，这里采用nohup的方式。<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/root/v2ray</span></div><div class=\"line\"></div><div class=\"line\">nohup <span class=\"string\">./v2ray</span> &amp;</div></pre></td></tr></table></figure></p>\n<p>停止V2ray服务也很简单<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">killall</span> v2ray</div></pre></td></tr></table></figure></p>\n<p>编辑rc.local文件，添加开机启动V2ray<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/rc.d/rc.<span class=\"keyword\">local</span></div></pre></td></tr></table></figure></p>\n<p>打开后添加两行<br><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/root/v2ray</span></div><div class=\"line\"></div><div class=\"line\">nohup <span class=\"string\">./v2ray</span> &amp;</div></pre></td></tr></table></figure></p>\n<p>到这里安装就成功了。下面我们进入下一步，编辑配置文件。</p>\n<p>如果使用官网的一键安装脚本无法启动的，可以使用下面这个解决，来自于官网Issues</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># v2ray        Startup script for v2ray</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># chkconfig: - 24 76</span></div><div class=\"line\"><span class=\"comment\"># processname: v2ray</span></div><div class=\"line\"><span class=\"comment\"># pidfile: /var/run/v2ray.pid</span></div><div class=\"line\"><span class=\"comment\"># description: V2Ray proxy services</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">### BEGIN INIT INFO</span></div><div class=\"line\"><span class=\"comment\"># Provides:          v2ray</span></div><div class=\"line\"><span class=\"comment\"># Required-Start:    $network $local_fs $remote_fs</span></div><div class=\"line\"><span class=\"comment\"># Required-Stop:     $remote_fs</span></div><div class=\"line\"><span class=\"comment\"># Default-Start:     2 3 4 5</span></div><div class=\"line\"><span class=\"comment\"># Default-Stop:      0 1 6</span></div><div class=\"line\"><span class=\"comment\"># Short-Description: V2Ray proxy services</span></div><div class=\"line\"><span class=\"comment\"># Description:       V2Ray proxy services</span></div><div class=\"line\"><span class=\"comment\">### END INIT INFO</span></div><div class=\"line\"></div><div class=\"line\">DESC=v2ray</div><div class=\"line\">NAME=v2ray</div><div class=\"line\">DAEMON=/usr/bin/v2ray/v2ray</div><div class=\"line\">PIDFILE=/var/run/<span class=\"variable\">$NAME</span>.pid</div><div class=\"line\">LOCKFILE=/var/lock/subsys/<span class=\"variable\">$NAME</span></div><div class=\"line\">SCRIPTNAME=/etc/init.d/<span class=\"variable\">$NAME</span></div><div class=\"line\">RETVAL=0</div><div class=\"line\"></div><div class=\"line\">DAEMON_OPTS=<span class=\"string\">\"-config /etc/v2ray/config.json\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Exit if the package is not installed</span></div><div class=\"line\">[ -x <span class=\"variable\">$DAEMON</span> ] || <span class=\"built_in\">exit</span> 0</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Read configuration variable file if it is present</span></div><div class=\"line\">[ -r /etc/default/<span class=\"variable\">$NAME</span> ] &amp;&amp; . /etc/default/<span class=\"variable\">$NAME</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Source function library.</span></div><div class=\"line\">. /etc/rc.d/init.d/<span class=\"built_in\">functions</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">start</span></span>() &#123;</div><div class=\"line\">  <span class=\"built_in\">local</span> pids=$(pgrep -f <span class=\"variable\">$DAEMON</span>)</div><div class=\"line\">  <span class=\"keyword\">if</span> [ -n <span class=\"string\">\"<span class=\"variable\">$pids</span>\"</span> ]; <span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$NAME</span> (pid <span class=\"variable\">$pids</span>) is already running\"</span></div><div class=\"line\">    RETVAL=0</div><div class=\"line\">    <span class=\"built_in\">return</span> 0</div><div class=\"line\">  <span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">echo</span> -n $<span class=\"string\">\"Starting <span class=\"variable\">$NAME</span>: \"</span></div><div class=\"line\"></div><div class=\"line\">  mkdir -p /var/<span class=\"built_in\">log</span>/v2ray</div><div class=\"line\">  <span class=\"variable\">$DAEMON</span> <span class=\"variable\">$DAEMON_OPTS</span> 1&gt;/dev/null 2&gt;&amp;1 &amp;</div><div class=\"line\">  <span class=\"built_in\">echo</span> $! &gt; <span class=\"variable\">$PIDFILE</span></div><div class=\"line\"></div><div class=\"line\">  sleep 2</div><div class=\"line\">  pgrep -f <span class=\"variable\">$DAEMON</span> &gt;/dev/null 2&gt;&amp;1</div><div class=\"line\">  RETVAL=$?</div><div class=\"line\">  <span class=\"keyword\">if</span> [ <span class=\"variable\">$RETVAL</span> -eq 0 ]; <span class=\"keyword\">then</span></div><div class=\"line\">    success; <span class=\"built_in\">echo</span></div><div class=\"line\">    touch <span class=\"variable\">$LOCKFILE</span></div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">    failure; <span class=\"built_in\">echo</span></div><div class=\"line\">  <span class=\"keyword\">fi</span></div><div class=\"line\">  <span class=\"built_in\">return</span> <span class=\"variable\">$RETVAL</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">stop</span></span>() &#123;</div><div class=\"line\">  <span class=\"built_in\">local</span> pids=$(pgrep -f <span class=\"variable\">$DAEMON</span>)</div><div class=\"line\">  <span class=\"keyword\">if</span> [ -z <span class=\"string\">\"<span class=\"variable\">$pids</span>\"</span> ]; <span class=\"keyword\">then</span></div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$NAME</span> is not running\"</span></div><div class=\"line\">    RETVAL=0</div><div class=\"line\">    <span class=\"built_in\">return</span> 0</div><div class=\"line\">  <span class=\"keyword\">fi</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">echo</span> -n $<span class=\"string\">\"Stopping <span class=\"variable\">$NAME</span>: \"</span></div><div class=\"line\">  killproc -p <span class=\"variable\">$&#123;PIDFILE&#125;</span> <span class=\"variable\">$&#123;NAME&#125;</span></div><div class=\"line\">  RETVAL=$?</div><div class=\"line\">  <span class=\"built_in\">echo</span></div><div class=\"line\">  [ <span class=\"variable\">$RETVAL</span> = 0 ] &amp;&amp; rm -f <span class=\"variable\">$&#123;LOCKFILE&#125;</span> <span class=\"variable\">$&#123;PIDFILE&#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">reload</span></span>() &#123;</div><div class=\"line\">  <span class=\"built_in\">echo</span> -n $<span class=\"string\">\"Reloading <span class=\"variable\">$NAME</span>: \"</span></div><div class=\"line\">  killproc -p <span class=\"variable\">$&#123;PIDFILE&#125;</span> <span class=\"variable\">$&#123;NAME&#125;</span> -HUP</div><div class=\"line\">  RETVAL=$?</div><div class=\"line\">  <span class=\"built_in\">echo</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"title\">rh_status</span></span>() &#123;</div><div class=\"line\">  status -p <span class=\"variable\">$&#123;PIDFILE&#125;</span> <span class=\"variable\">$&#123;DAEMON&#125;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># See how we were called.</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></div><div class=\"line\">  start)</div><div class=\"line\">    rh_status &gt;/dev/null 2&gt;&amp;1 &amp;&amp; <span class=\"built_in\">exit</span> 0</div><div class=\"line\">    start</div><div class=\"line\">    ;;</div><div class=\"line\">  stop)</div><div class=\"line\">    stop</div><div class=\"line\">    ;;</div><div class=\"line\">  status)</div><div class=\"line\">    rh_status</div><div class=\"line\">    RETVAL=$?</div><div class=\"line\">    ;;</div><div class=\"line\">  restart)</div><div class=\"line\">    stop</div><div class=\"line\">    start</div><div class=\"line\">    ;;</div><div class=\"line\">  reload)</div><div class=\"line\">    reload</div><div class=\"line\">  ;;</div><div class=\"line\">  *)</div><div class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Usage: <span class=\"variable\">$SCRIPTNAME</span> &#123;start|stop|status|reload|restart&#125;\"</span> &gt;&amp;2</div><div class=\"line\">    RETVAL=2</div><div class=\"line\">  ;;</div><div class=\"line\"><span class=\"keyword\">esac</span></div><div class=\"line\"><span class=\"built_in\">exit</span> <span class=\"variable\">$RETVAL</span></div></pre></td></tr></table></figure>\n<p>Save as <code>/etc/init.d/v2ray</code> and then excute:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo chmod +x /etc/init.d/v2ray</div><div class=\"line\">$ sudo chkconfig v2ray on</div><div class=\"line\">$ sudo service v2ray start</div></pre></td></tr></table></figure>"},{"title":"使用AppVeyor自动部署Hexo到Github","date":"2017-08-19T20:22:09.000Z","_content":"# 一、转载别人的教程\n想必很多人会把Hexo生成出来的静态网站放到GitHub Pages来进行托管。一般发布Hexo博客的流程是，首先在本地搭建Hexo的环境，编写新文章，然后利用`hexo deploy`来发布到Git。那么对于本地的Hexo的原始文件怎么管理呢？如果换电脑了怎么办？如果没有对原始文件进行备份，突然有一天你的本地环境挂了导致源文件丢失，那不就呵呵了。也许你会想到用Dropbox或者其他方案来对源文件进行备份，但是每次更新完博客，需要备份好源文件，然后执行`hexo deploy`进行发布，是不是很麻烦？换了电脑之后又要重新搭建本地环境，是不是很蛋疼？\n\n那么接下来我们就来说说如何优雅愉快地对我们的Hexo进行版本管理和发布。\n\n​      既然我们已经用了GitHub来托管我们生成出来的静态网站，那么为什么不也把Hexo博客的源文件也host在GitHub上呢。那么问题来了，如果我们把Hexo博客的源文件托管在GitHub上，我们的发布流程就会变为：\n\n1. 执行`git push`把更新的源文件push到托管源文件的GitHub Repo (我们称之为Source Repo)\n2. 执行`hexo deploy`来更新托管静态网站的GitHub Pages (我们称之为Content Repo)\n\n​     这样看来，每次更新博客要经历两个步骤，并不是那么straightforward。那么有没有办法做到既能使用GitHub进行版本控制，又能做到一键发布呢？\n\n​      答案是肯定的。这里用到了[持续集成](https://en.wikipedia.org/wiki/Continuous_integration)也就是我们一直所说的CI来完成一键发布：当有新的change push到Source Repo时，自动执行CI脚本，生成最新的静态网站发布到Content Repo，一气呵成。那么我使用什么CI工具来做呢？我们可以使用像Travis CI这样的Hosted CI Service，也可以使用Jenkins或者TeamCity来搭建CI server。如果自己来搭建CI Server，费时费力，又要花钱来买Server来host CI service，肯定不是一个很好的选择。那么我们选哪个Hosted CI Service呢？其实今年在公司的一个项目中我们就选择了AppVeyor。当初在做investigation的时候，第一个想到的就是用Travis CI，然而我司大多数的开发环境都是Windows，而且当时的项目有Python, PowerShell, Java等，那时PowerShell还只支持Windows，所以需要选择一个支持Windows的CI Service。于是，Scott Hanselman安利的[AppVeyor](http://www.hanselman.com/blog/AppVeyorAGoodContinuousIntegrationSystemIsAJoyToBehold.aspx)就成为了一个备选。访问[AppVeyor官网](https://www.appveyor.com/)，映入眼帘的大标题就是`#1 Continuous Delivery service for Windows`。刚开始的时候内心一阵嘲笑，Top 10的CI Service就你支持Windows，你不是第一那谁是第一？结果在之后的项目使用中，发现AppVeyor比Travis CI好用太多。这里就不具体展开了，继续进入正题。\n\n​     使用AppVeyor来建立CI非常方便，主要是以下步骤：\n\n## 1. 注册并登陆AppVeyor\n\n   访问[AppVeyor登陆页面](https://ci.appveyor.com/login)，使用你的GitHub账号登陆即可。                                        \n\n   ​\n\n   [![login](https://formulahendry.github.io/assets/img/hexo-ci/appveyor-login.png)](https://formulahendry.github.io/assets/img/hexo-ci/appveyor-login.png)\n\n   \n\n## 2.  添加Project\n\n   在[AppVeyor Projects页面](https://ci.appveyor.com/projects/new)，添加相应的GitHub Source Repo。                                     \n\n   ​\n\n   [![add-project](https://formulahendry.github.io/assets/img/hexo-ci/appveyor-add-project.png)](https://formulahendry.github.io/assets/img/hexo-ci/appveyor-add-project.png)\n\n   ## \n\n## 3.  添加appveyor.yml到Source Repo\n\n   接下来，你需要把appveyor.yml添加到Source Repo的根目录下。具体的appveyor.yml如下:\n\n   ```bash\n   clone_depth: 5\n   environment:\n   access_token:\n       secure: [Your GitHub Access Token]\n\n   install:\n   - node --version\n   - npm --version\n   - npm install\n   - npm install hexo-cli -g\n   build_script:\n   - hexo generate\n\n   artifacts:\n   - path: public\n        on_success:\n   - git config --global credential.helper store\n   - ps: Add-Content \"$env:USERPROFILE\\.git-credentials\" \"https://$($env:access_token):x-oauth-basic@github.com`n\"\n   - git config --global user.email \"%GIT_USER_EMAIL%\"\n   - git config --global user.name \"%GIT_USER_NAME%\"\n   - git clone --depth 5 -q --branch=%TARGET_BRANCH% %STATIC_SITE_REPO% %TEMP%\\static-site\n   - cd %TEMP%\\static-site\n   - del * /f /q\n   - for /d %%p IN (*) do rmdir \"%%p\" /s /q\n   - SETLOCAL EnableDelayedExpansion & robocopy \"%APPVEYOR_BUILD_FOLDER%\\public\" \"%TEMP%\\static-site\" /e & IF !ERRORLEVEL! EQU 1 (exit 0) ELSE (IF !ERRORLEVEL! EQU 3 (exit 0) ELSE (exit 1))\n   - git add -A\n   - git commit -m \"Update Static Site\" \n   - git push origin %TARGET_BRANCH%\n   - appveyor AddMessage \"Static Site Updated\"\n   ```\n\n   你唯一需要做的就是替换[Your GitHub Access Token]，关于生成Access Token，可以参考这篇[文章](https://help.github.com/articles/creating-an-access-token-for-command-line-use/)。在GitHub生成好Access Token之后，你需要到[AppVeyor加密页面](https://ci.appveyor.com/tools/encrypt)把Access Token加密之后再替换[Your GitHub Access Token]  \n\n   ​\n\n   [![encrypt](https://formulahendry.github.io/assets/img/hexo-ci/appveyor-encrypt.png)](https://formulahendry.github.io/assets/img/hexo-ci/appveyor-encrypt.png)\n\n  \n\n## 4. 设置Appveyor\n\n   添加好appveyor.yml之后，再到Appveyor portal设置以下四个变量。STATIC_SITE_REPO就是Content Repo的地址，TARGET_BRANCH就是你Content Repo的branch，一般默认就是master，GIT_USER_EMAIL和GIT_USER_NAME就是你GitHub账号的信息。                                       \n\n   ​\n\n   [![setting](https://formulahendry.github.io/assets/img/hexo-ci/appveyor-setting.png)](https://formulahendry.github.io/assets/img/hexo-ci/appveyor-setting.png)\n\n好了，一切大功告成！试一下`git push`你的change到Source Repo，几分钟内，你的博客就自动更新了！\n\n背后的过程如下:\n\n1. Git push to Source Repo\n2. –> AppVeyor CI\n3. –> Update GitHub Pages Content Repo\n4. –> Generate your Hexo blog site\n\n\n# 折腾过程中遇到的问题\n部署成功后，所有创建的html文件全部是空的，几经周折才发现，原来是缺少主题文件，所有生成的html文件全是空的，提示错误WARN No layout，再到GitHub上一看，主题文件夹变成了灰色。具体如何解决灰色文件夹可以参考我转载的另一篇文章。\n","source":"_posts/使用AppVeyor自动部署Hexo到Github.md","raw":"---\ntitle: 使用AppVeyor自动部署Hexo到Github\ntag: \n - hexo\n - appveyor\n - git\ncategories: 网络技术\ndate: 2017-08-20 04:22:09\n---\n# 一、转载别人的教程\n想必很多人会把Hexo生成出来的静态网站放到GitHub Pages来进行托管。一般发布Hexo博客的流程是，首先在本地搭建Hexo的环境，编写新文章，然后利用`hexo deploy`来发布到Git。那么对于本地的Hexo的原始文件怎么管理呢？如果换电脑了怎么办？如果没有对原始文件进行备份，突然有一天你的本地环境挂了导致源文件丢失，那不就呵呵了。也许你会想到用Dropbox或者其他方案来对源文件进行备份，但是每次更新完博客，需要备份好源文件，然后执行`hexo deploy`进行发布，是不是很麻烦？换了电脑之后又要重新搭建本地环境，是不是很蛋疼？\n\n那么接下来我们就来说说如何优雅愉快地对我们的Hexo进行版本管理和发布。\n\n​      既然我们已经用了GitHub来托管我们生成出来的静态网站，那么为什么不也把Hexo博客的源文件也host在GitHub上呢。那么问题来了，如果我们把Hexo博客的源文件托管在GitHub上，我们的发布流程就会变为：\n\n1. 执行`git push`把更新的源文件push到托管源文件的GitHub Repo (我们称之为Source Repo)\n2. 执行`hexo deploy`来更新托管静态网站的GitHub Pages (我们称之为Content Repo)\n\n​     这样看来，每次更新博客要经历两个步骤，并不是那么straightforward。那么有没有办法做到既能使用GitHub进行版本控制，又能做到一键发布呢？\n\n​      答案是肯定的。这里用到了[持续集成](https://en.wikipedia.org/wiki/Continuous_integration)也就是我们一直所说的CI来完成一键发布：当有新的change push到Source Repo时，自动执行CI脚本，生成最新的静态网站发布到Content Repo，一气呵成。那么我使用什么CI工具来做呢？我们可以使用像Travis CI这样的Hosted CI Service，也可以使用Jenkins或者TeamCity来搭建CI server。如果自己来搭建CI Server，费时费力，又要花钱来买Server来host CI service，肯定不是一个很好的选择。那么我们选哪个Hosted CI Service呢？其实今年在公司的一个项目中我们就选择了AppVeyor。当初在做investigation的时候，第一个想到的就是用Travis CI，然而我司大多数的开发环境都是Windows，而且当时的项目有Python, PowerShell, Java等，那时PowerShell还只支持Windows，所以需要选择一个支持Windows的CI Service。于是，Scott Hanselman安利的[AppVeyor](http://www.hanselman.com/blog/AppVeyorAGoodContinuousIntegrationSystemIsAJoyToBehold.aspx)就成为了一个备选。访问[AppVeyor官网](https://www.appveyor.com/)，映入眼帘的大标题就是`#1 Continuous Delivery service for Windows`。刚开始的时候内心一阵嘲笑，Top 10的CI Service就你支持Windows，你不是第一那谁是第一？结果在之后的项目使用中，发现AppVeyor比Travis CI好用太多。这里就不具体展开了，继续进入正题。\n\n​     使用AppVeyor来建立CI非常方便，主要是以下步骤：\n\n## 1. 注册并登陆AppVeyor\n\n   访问[AppVeyor登陆页面](https://ci.appveyor.com/login)，使用你的GitHub账号登陆即可。                                        \n\n   ​\n\n   [![login](https://formulahendry.github.io/assets/img/hexo-ci/appveyor-login.png)](https://formulahendry.github.io/assets/img/hexo-ci/appveyor-login.png)\n\n   \n\n## 2.  添加Project\n\n   在[AppVeyor Projects页面](https://ci.appveyor.com/projects/new)，添加相应的GitHub Source Repo。                                     \n\n   ​\n\n   [![add-project](https://formulahendry.github.io/assets/img/hexo-ci/appveyor-add-project.png)](https://formulahendry.github.io/assets/img/hexo-ci/appveyor-add-project.png)\n\n   ## \n\n## 3.  添加appveyor.yml到Source Repo\n\n   接下来，你需要把appveyor.yml添加到Source Repo的根目录下。具体的appveyor.yml如下:\n\n   ```bash\n   clone_depth: 5\n   environment:\n   access_token:\n       secure: [Your GitHub Access Token]\n\n   install:\n   - node --version\n   - npm --version\n   - npm install\n   - npm install hexo-cli -g\n   build_script:\n   - hexo generate\n\n   artifacts:\n   - path: public\n        on_success:\n   - git config --global credential.helper store\n   - ps: Add-Content \"$env:USERPROFILE\\.git-credentials\" \"https://$($env:access_token):x-oauth-basic@github.com`n\"\n   - git config --global user.email \"%GIT_USER_EMAIL%\"\n   - git config --global user.name \"%GIT_USER_NAME%\"\n   - git clone --depth 5 -q --branch=%TARGET_BRANCH% %STATIC_SITE_REPO% %TEMP%\\static-site\n   - cd %TEMP%\\static-site\n   - del * /f /q\n   - for /d %%p IN (*) do rmdir \"%%p\" /s /q\n   - SETLOCAL EnableDelayedExpansion & robocopy \"%APPVEYOR_BUILD_FOLDER%\\public\" \"%TEMP%\\static-site\" /e & IF !ERRORLEVEL! EQU 1 (exit 0) ELSE (IF !ERRORLEVEL! EQU 3 (exit 0) ELSE (exit 1))\n   - git add -A\n   - git commit -m \"Update Static Site\" \n   - git push origin %TARGET_BRANCH%\n   - appveyor AddMessage \"Static Site Updated\"\n   ```\n\n   你唯一需要做的就是替换[Your GitHub Access Token]，关于生成Access Token，可以参考这篇[文章](https://help.github.com/articles/creating-an-access-token-for-command-line-use/)。在GitHub生成好Access Token之后，你需要到[AppVeyor加密页面](https://ci.appveyor.com/tools/encrypt)把Access Token加密之后再替换[Your GitHub Access Token]  \n\n   ​\n\n   [![encrypt](https://formulahendry.github.io/assets/img/hexo-ci/appveyor-encrypt.png)](https://formulahendry.github.io/assets/img/hexo-ci/appveyor-encrypt.png)\n\n  \n\n## 4. 设置Appveyor\n\n   添加好appveyor.yml之后，再到Appveyor portal设置以下四个变量。STATIC_SITE_REPO就是Content Repo的地址，TARGET_BRANCH就是你Content Repo的branch，一般默认就是master，GIT_USER_EMAIL和GIT_USER_NAME就是你GitHub账号的信息。                                       \n\n   ​\n\n   [![setting](https://formulahendry.github.io/assets/img/hexo-ci/appveyor-setting.png)](https://formulahendry.github.io/assets/img/hexo-ci/appveyor-setting.png)\n\n好了，一切大功告成！试一下`git push`你的change到Source Repo，几分钟内，你的博客就自动更新了！\n\n背后的过程如下:\n\n1. Git push to Source Repo\n2. –> AppVeyor CI\n3. –> Update GitHub Pages Content Repo\n4. –> Generate your Hexo blog site\n\n\n# 折腾过程中遇到的问题\n部署成功后，所有创建的html文件全部是空的，几经周折才发现，原来是缺少主题文件，所有生成的html文件全是空的，提示错误WARN No layout，再到GitHub上一看，主题文件夹变成了灰色。具体如何解决灰色文件夹可以参考我转载的另一篇文章。\n","slug":"使用AppVeyor自动部署Hexo到Github","published":1,"updated":"2017-08-20T05:47:31.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kfg8rw000iygkvdh5uavti","content":"<h1 id=\"一、转载别人的教程\"><a href=\"#一、转载别人的教程\" class=\"headerlink\" title=\"一、转载别人的教程\"></a>一、转载别人的教程</h1><p>想必很多人会把Hexo生成出来的静态网站放到GitHub Pages来进行托管。一般发布Hexo博客的流程是，首先在本地搭建Hexo的环境，编写新文章，然后利用<code>hexo deploy</code>来发布到Git。那么对于本地的Hexo的原始文件怎么管理呢？如果换电脑了怎么办？如果没有对原始文件进行备份，突然有一天你的本地环境挂了导致源文件丢失，那不就呵呵了。也许你会想到用Dropbox或者其他方案来对源文件进行备份，但是每次更新完博客，需要备份好源文件，然后执行<code>hexo deploy</code>进行发布，是不是很麻烦？换了电脑之后又要重新搭建本地环境，是不是很蛋疼？</p>\n<p>那么接下来我们就来说说如何优雅愉快地对我们的Hexo进行版本管理和发布。</p>\n<p>​      既然我们已经用了GitHub来托管我们生成出来的静态网站，那么为什么不也把Hexo博客的源文件也host在GitHub上呢。那么问题来了，如果我们把Hexo博客的源文件托管在GitHub上，我们的发布流程就会变为：</p>\n<ol>\n<li>执行<code>git push</code>把更新的源文件push到托管源文件的GitHub Repo (我们称之为Source Repo)</li>\n<li>执行<code>hexo deploy</code>来更新托管静态网站的GitHub Pages (我们称之为Content Repo)</li>\n</ol>\n<p>​     这样看来，每次更新博客要经历两个步骤，并不是那么straightforward。那么有没有办法做到既能使用GitHub进行版本控制，又能做到一键发布呢？</p>\n<p>​      答案是肯定的。这里用到了<a href=\"https://en.wikipedia.org/wiki/Continuous_integration\" target=\"_blank\" rel=\"external\">持续集成</a>也就是我们一直所说的CI来完成一键发布：当有新的change push到Source Repo时，自动执行CI脚本，生成最新的静态网站发布到Content Repo，一气呵成。那么我使用什么CI工具来做呢？我们可以使用像Travis CI这样的Hosted CI Service，也可以使用Jenkins或者TeamCity来搭建CI server。如果自己来搭建CI Server，费时费力，又要花钱来买Server来host CI service，肯定不是一个很好的选择。那么我们选哪个Hosted CI Service呢？其实今年在公司的一个项目中我们就选择了AppVeyor。当初在做investigation的时候，第一个想到的就是用Travis CI，然而我司大多数的开发环境都是Windows，而且当时的项目有Python, PowerShell, Java等，那时PowerShell还只支持Windows，所以需要选择一个支持Windows的CI Service。于是，Scott Hanselman安利的<a href=\"http://www.hanselman.com/blog/AppVeyorAGoodContinuousIntegrationSystemIsAJoyToBehold.aspx\" target=\"_blank\" rel=\"external\">AppVeyor</a>就成为了一个备选。访问<a href=\"https://www.appveyor.com/\" target=\"_blank\" rel=\"external\">AppVeyor官网</a>，映入眼帘的大标题就是<code>#1 Continuous Delivery service for Windows</code>。刚开始的时候内心一阵嘲笑，Top 10的CI Service就你支持Windows，你不是第一那谁是第一？结果在之后的项目使用中，发现AppVeyor比Travis CI好用太多。这里就不具体展开了，继续进入正题。</p>\n<p>​     使用AppVeyor来建立CI非常方便，主要是以下步骤：</p>\n<h2 id=\"1-注册并登陆AppVeyor\"><a href=\"#1-注册并登陆AppVeyor\" class=\"headerlink\" title=\"1. 注册并登陆AppVeyor\"></a>1. 注册并登陆AppVeyor</h2><p>   访问<a href=\"https://ci.appveyor.com/login\" target=\"_blank\" rel=\"external\">AppVeyor登陆页面</a>，使用你的GitHub账号登陆即可。                                        </p>\n<p>   ​</p>\n<p>   <a href=\"https://formulahendry.github.io/assets/img/hexo-ci/appveyor-login.png\" target=\"_blank\" rel=\"external\"><img src=\"https://formulahendry.github.io/assets/img/hexo-ci/appveyor-login.png\" alt=\"login\"></a></p>\n<h2 id=\"2-添加Project\"><a href=\"#2-添加Project\" class=\"headerlink\" title=\"2.  添加Project\"></a>2.  添加Project</h2><p>   在<a href=\"https://ci.appveyor.com/projects/new\" target=\"_blank\" rel=\"external\">AppVeyor Projects页面</a>，添加相应的GitHub Source Repo。                                     </p>\n<p>   ​</p>\n<p>   <a href=\"https://formulahendry.github.io/assets/img/hexo-ci/appveyor-add-project.png\" target=\"_blank\" rel=\"external\"><img src=\"https://formulahendry.github.io/assets/img/hexo-ci/appveyor-add-project.png\" alt=\"add-project\"></a></p>\n<p>   ## </p>\n<h2 id=\"3-添加appveyor-yml到Source-Repo\"><a href=\"#3-添加appveyor-yml到Source-Repo\" class=\"headerlink\" title=\"3.  添加appveyor.yml到Source Repo\"></a>3.  添加appveyor.yml到Source Repo</h2><p>   接下来，你需要把appveyor.yml添加到Source Repo的根目录下。具体的appveyor.yml如下:</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">clone_depth: 5</div><div class=\"line\">environment:</div><div class=\"line\">access_token:</div><div class=\"line\">    secure: [Your GitHub Access Token]</div><div class=\"line\"></div><div class=\"line\">install:</div><div class=\"line\">- node --version</div><div class=\"line\">- npm --version</div><div class=\"line\">- npm install</div><div class=\"line\">- npm install hexo-cli -g</div><div class=\"line\">build_script:</div><div class=\"line\">- hexo generate</div><div class=\"line\"></div><div class=\"line\">artifacts:</div><div class=\"line\">- path: public</div><div class=\"line\">     on_success:</div><div class=\"line\">- git config --global credential.helper store</div><div class=\"line\">- ps: Add-Content <span class=\"string\">\"<span class=\"variable\">$env</span>:USERPROFILE\\.git-credentials\"</span> <span class=\"string\">\"https://<span class=\"variable\">$($env:access_token)</span>:x-oauth-basic@github.com`n\"</span></div><div class=\"line\">- git config --global user.email <span class=\"string\">\"%GIT_USER_EMAIL%\"</span></div><div class=\"line\">- git config --global user.name <span class=\"string\">\"%GIT_USER_NAME%\"</span></div><div class=\"line\">- git <span class=\"built_in\">clone</span> --depth 5 -q --branch=%TARGET_BRANCH% %STATIC_SITE_REPO% %TEMP%\\static-site</div><div class=\"line\">- <span class=\"built_in\">cd</span> %TEMP%\\static-site</div><div class=\"line\">- del * /f /q</div><div class=\"line\">- <span class=\"keyword\">for</span> /d %%p IN (*) <span class=\"keyword\">do</span> rmdir <span class=\"string\">\"%%p\"</span> /s /q</div><div class=\"line\">- SETLOCAL EnableDelayedExpansion &amp; robocopy <span class=\"string\">\"%APPVEYOR_BUILD_FOLDER%\\public\"</span> <span class=\"string\">\"%TEMP%\\static-site\"</span> /e &amp; IF !ERRORLEVEL! EQU 1 (<span class=\"built_in\">exit</span> 0) ELSE (IF !ERRORLEVEL! EQU 3 (<span class=\"built_in\">exit</span> 0) ELSE (<span class=\"built_in\">exit</span> 1))</div><div class=\"line\">- git add -A</div><div class=\"line\">- git commit -m <span class=\"string\">\"Update Static Site\"</span> </div><div class=\"line\">- git push origin %TARGET_BRANCH%</div><div class=\"line\">- appveyor AddMessage <span class=\"string\">\"Static Site Updated\"</span></div></pre></td></tr></table></figure>\n<p>   你唯一需要做的就是替换[Your GitHub Access Token]，关于生成Access Token，可以参考这篇<a href=\"https://help.github.com/articles/creating-an-access-token-for-command-line-use/\" target=\"_blank\" rel=\"external\">文章</a>。在GitHub生成好Access Token之后，你需要到<a href=\"https://ci.appveyor.com/tools/encrypt\" target=\"_blank\" rel=\"external\">AppVeyor加密页面</a>把Access Token加密之后再替换[Your GitHub Access Token]  </p>\n<p>   ​</p>\n<p>   <a href=\"https://formulahendry.github.io/assets/img/hexo-ci/appveyor-encrypt.png\" target=\"_blank\" rel=\"external\"><img src=\"https://formulahendry.github.io/assets/img/hexo-ci/appveyor-encrypt.png\" alt=\"encrypt\"></a></p>\n<h2 id=\"4-设置Appveyor\"><a href=\"#4-设置Appveyor\" class=\"headerlink\" title=\"4. 设置Appveyor\"></a>4. 设置Appveyor</h2><p>   添加好appveyor.yml之后，再到Appveyor portal设置以下四个变量。STATIC_SITE_REPO就是Content Repo的地址，TARGET_BRANCH就是你Content Repo的branch，一般默认就是master，GIT_USER_EMAIL和GIT_USER_NAME就是你GitHub账号的信息。                                       </p>\n<p>   ​</p>\n<p>   <a href=\"https://formulahendry.github.io/assets/img/hexo-ci/appveyor-setting.png\" target=\"_blank\" rel=\"external\"><img src=\"https://formulahendry.github.io/assets/img/hexo-ci/appveyor-setting.png\" alt=\"setting\"></a></p>\n<p>好了，一切大功告成！试一下<code>git push</code>你的change到Source Repo，几分钟内，你的博客就自动更新了！</p>\n<p>背后的过程如下:</p>\n<ol>\n<li>Git push to Source Repo</li>\n<li>–&gt; AppVeyor CI</li>\n<li>–&gt; Update GitHub Pages Content Repo</li>\n<li>–&gt; Generate your Hexo blog site</li>\n</ol>\n<h1 id=\"折腾过程中遇到的问题\"><a href=\"#折腾过程中遇到的问题\" class=\"headerlink\" title=\"折腾过程中遇到的问题\"></a>折腾过程中遇到的问题</h1><p>部署成功后，所有创建的html文件全部是空的，几经周折才发现，原来是缺少主题文件，所有生成的html文件全是空的，提示错误WARN No layout，再到GitHub上一看，主题文件夹变成了灰色。具体如何解决灰色文件夹可以参考我转载的另一篇文章。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一、转载别人的教程\"><a href=\"#一、转载别人的教程\" class=\"headerlink\" title=\"一、转载别人的教程\"></a>一、转载别人的教程</h1><p>想必很多人会把Hexo生成出来的静态网站放到GitHub Pages来进行托管。一般发布Hexo博客的流程是，首先在本地搭建Hexo的环境，编写新文章，然后利用<code>hexo deploy</code>来发布到Git。那么对于本地的Hexo的原始文件怎么管理呢？如果换电脑了怎么办？如果没有对原始文件进行备份，突然有一天你的本地环境挂了导致源文件丢失，那不就呵呵了。也许你会想到用Dropbox或者其他方案来对源文件进行备份，但是每次更新完博客，需要备份好源文件，然后执行<code>hexo deploy</code>进行发布，是不是很麻烦？换了电脑之后又要重新搭建本地环境，是不是很蛋疼？</p>\n<p>那么接下来我们就来说说如何优雅愉快地对我们的Hexo进行版本管理和发布。</p>\n<p>​      既然我们已经用了GitHub来托管我们生成出来的静态网站，那么为什么不也把Hexo博客的源文件也host在GitHub上呢。那么问题来了，如果我们把Hexo博客的源文件托管在GitHub上，我们的发布流程就会变为：</p>\n<ol>\n<li>执行<code>git push</code>把更新的源文件push到托管源文件的GitHub Repo (我们称之为Source Repo)</li>\n<li>执行<code>hexo deploy</code>来更新托管静态网站的GitHub Pages (我们称之为Content Repo)</li>\n</ol>\n<p>​     这样看来，每次更新博客要经历两个步骤，并不是那么straightforward。那么有没有办法做到既能使用GitHub进行版本控制，又能做到一键发布呢？</p>\n<p>​      答案是肯定的。这里用到了<a href=\"https://en.wikipedia.org/wiki/Continuous_integration\" target=\"_blank\" rel=\"external\">持续集成</a>也就是我们一直所说的CI来完成一键发布：当有新的change push到Source Repo时，自动执行CI脚本，生成最新的静态网站发布到Content Repo，一气呵成。那么我使用什么CI工具来做呢？我们可以使用像Travis CI这样的Hosted CI Service，也可以使用Jenkins或者TeamCity来搭建CI server。如果自己来搭建CI Server，费时费力，又要花钱来买Server来host CI service，肯定不是一个很好的选择。那么我们选哪个Hosted CI Service呢？其实今年在公司的一个项目中我们就选择了AppVeyor。当初在做investigation的时候，第一个想到的就是用Travis CI，然而我司大多数的开发环境都是Windows，而且当时的项目有Python, PowerShell, Java等，那时PowerShell还只支持Windows，所以需要选择一个支持Windows的CI Service。于是，Scott Hanselman安利的<a href=\"http://www.hanselman.com/blog/AppVeyorAGoodContinuousIntegrationSystemIsAJoyToBehold.aspx\" target=\"_blank\" rel=\"external\">AppVeyor</a>就成为了一个备选。访问<a href=\"https://www.appveyor.com/\" target=\"_blank\" rel=\"external\">AppVeyor官网</a>，映入眼帘的大标题就是<code>#1 Continuous Delivery service for Windows</code>。刚开始的时候内心一阵嘲笑，Top 10的CI Service就你支持Windows，你不是第一那谁是第一？结果在之后的项目使用中，发现AppVeyor比Travis CI好用太多。这里就不具体展开了，继续进入正题。</p>\n<p>​     使用AppVeyor来建立CI非常方便，主要是以下步骤：</p>\n<h2 id=\"1-注册并登陆AppVeyor\"><a href=\"#1-注册并登陆AppVeyor\" class=\"headerlink\" title=\"1. 注册并登陆AppVeyor\"></a>1. 注册并登陆AppVeyor</h2><p>   访问<a href=\"https://ci.appveyor.com/login\" target=\"_blank\" rel=\"external\">AppVeyor登陆页面</a>，使用你的GitHub账号登陆即可。                                        </p>\n<p>   ​</p>\n<p>   <a href=\"https://formulahendry.github.io/assets/img/hexo-ci/appveyor-login.png\" target=\"_blank\" rel=\"external\"><img src=\"https://formulahendry.github.io/assets/img/hexo-ci/appveyor-login.png\" alt=\"login\"></a></p>\n<h2 id=\"2-添加Project\"><a href=\"#2-添加Project\" class=\"headerlink\" title=\"2.  添加Project\"></a>2.  添加Project</h2><p>   在<a href=\"https://ci.appveyor.com/projects/new\" target=\"_blank\" rel=\"external\">AppVeyor Projects页面</a>，添加相应的GitHub Source Repo。                                     </p>\n<p>   ​</p>\n<p>   <a href=\"https://formulahendry.github.io/assets/img/hexo-ci/appveyor-add-project.png\" target=\"_blank\" rel=\"external\"><img src=\"https://formulahendry.github.io/assets/img/hexo-ci/appveyor-add-project.png\" alt=\"add-project\"></a></p>\n<p>   ## </p>\n<h2 id=\"3-添加appveyor-yml到Source-Repo\"><a href=\"#3-添加appveyor-yml到Source-Repo\" class=\"headerlink\" title=\"3.  添加appveyor.yml到Source Repo\"></a>3.  添加appveyor.yml到Source Repo</h2><p>   接下来，你需要把appveyor.yml添加到Source Repo的根目录下。具体的appveyor.yml如下:</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">clone_depth: 5</div><div class=\"line\">environment:</div><div class=\"line\">access_token:</div><div class=\"line\">    secure: [Your GitHub Access Token]</div><div class=\"line\"></div><div class=\"line\">install:</div><div class=\"line\">- node --version</div><div class=\"line\">- npm --version</div><div class=\"line\">- npm install</div><div class=\"line\">- npm install hexo-cli -g</div><div class=\"line\">build_script:</div><div class=\"line\">- hexo generate</div><div class=\"line\"></div><div class=\"line\">artifacts:</div><div class=\"line\">- path: public</div><div class=\"line\">     on_success:</div><div class=\"line\">- git config --global credential.helper store</div><div class=\"line\">- ps: Add-Content <span class=\"string\">\"<span class=\"variable\">$env</span>:USERPROFILE\\.git-credentials\"</span> <span class=\"string\">\"https://<span class=\"variable\">$($env:access_token)</span>:x-oauth-basic@github.com`n\"</span></div><div class=\"line\">- git config --global user.email <span class=\"string\">\"%GIT_USER_EMAIL%\"</span></div><div class=\"line\">- git config --global user.name <span class=\"string\">\"%GIT_USER_NAME%\"</span></div><div class=\"line\">- git <span class=\"built_in\">clone</span> --depth 5 -q --branch=%TARGET_BRANCH% %STATIC_SITE_REPO% %TEMP%\\static-site</div><div class=\"line\">- <span class=\"built_in\">cd</span> %TEMP%\\static-site</div><div class=\"line\">- del * /f /q</div><div class=\"line\">- <span class=\"keyword\">for</span> /d %%p IN (*) <span class=\"keyword\">do</span> rmdir <span class=\"string\">\"%%p\"</span> /s /q</div><div class=\"line\">- SETLOCAL EnableDelayedExpansion &amp; robocopy <span class=\"string\">\"%APPVEYOR_BUILD_FOLDER%\\public\"</span> <span class=\"string\">\"%TEMP%\\static-site\"</span> /e &amp; IF !ERRORLEVEL! EQU 1 (<span class=\"built_in\">exit</span> 0) ELSE (IF !ERRORLEVEL! EQU 3 (<span class=\"built_in\">exit</span> 0) ELSE (<span class=\"built_in\">exit</span> 1))</div><div class=\"line\">- git add -A</div><div class=\"line\">- git commit -m <span class=\"string\">\"Update Static Site\"</span> </div><div class=\"line\">- git push origin %TARGET_BRANCH%</div><div class=\"line\">- appveyor AddMessage <span class=\"string\">\"Static Site Updated\"</span></div></pre></td></tr></table></figure>\n<p>   你唯一需要做的就是替换[Your GitHub Access Token]，关于生成Access Token，可以参考这篇<a href=\"https://help.github.com/articles/creating-an-access-token-for-command-line-use/\" target=\"_blank\" rel=\"external\">文章</a>。在GitHub生成好Access Token之后，你需要到<a href=\"https://ci.appveyor.com/tools/encrypt\" target=\"_blank\" rel=\"external\">AppVeyor加密页面</a>把Access Token加密之后再替换[Your GitHub Access Token]  </p>\n<p>   ​</p>\n<p>   <a href=\"https://formulahendry.github.io/assets/img/hexo-ci/appveyor-encrypt.png\" target=\"_blank\" rel=\"external\"><img src=\"https://formulahendry.github.io/assets/img/hexo-ci/appveyor-encrypt.png\" alt=\"encrypt\"></a></p>\n<h2 id=\"4-设置Appveyor\"><a href=\"#4-设置Appveyor\" class=\"headerlink\" title=\"4. 设置Appveyor\"></a>4. 设置Appveyor</h2><p>   添加好appveyor.yml之后，再到Appveyor portal设置以下四个变量。STATIC_SITE_REPO就是Content Repo的地址，TARGET_BRANCH就是你Content Repo的branch，一般默认就是master，GIT_USER_EMAIL和GIT_USER_NAME就是你GitHub账号的信息。                                       </p>\n<p>   ​</p>\n<p>   <a href=\"https://formulahendry.github.io/assets/img/hexo-ci/appveyor-setting.png\" target=\"_blank\" rel=\"external\"><img src=\"https://formulahendry.github.io/assets/img/hexo-ci/appveyor-setting.png\" alt=\"setting\"></a></p>\n<p>好了，一切大功告成！试一下<code>git push</code>你的change到Source Repo，几分钟内，你的博客就自动更新了！</p>\n<p>背后的过程如下:</p>\n<ol>\n<li>Git push to Source Repo</li>\n<li>–&gt; AppVeyor CI</li>\n<li>–&gt; Update GitHub Pages Content Repo</li>\n<li>–&gt; Generate your Hexo blog site</li>\n</ol>\n<h1 id=\"折腾过程中遇到的问题\"><a href=\"#折腾过程中遇到的问题\" class=\"headerlink\" title=\"折腾过程中遇到的问题\"></a>折腾过程中遇到的问题</h1><p>部署成功后，所有创建的html文件全部是空的，几经周折才发现，原来是缺少主题文件，所有生成的html文件全是空的，提示错误WARN No layout，再到GitHub上一看，主题文件夹变成了灰色。具体如何解决灰色文件夹可以参考我转载的另一篇文章。</p>\n"},{"title":"使用Travis CI自动部署Hexo","date":"2017-08-19T19:41:09.000Z","_content":"前两天了解到了一个有趣的概念叫持续集成：\n\n> 持续集成是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，一般每人每天至少集成一次，也可以多次。每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。许多团队发现这种方法可以显著减少集成引起的问题，并可以加快团队合作软件开发的速度。这篇文章简要介绍了持续集成的技巧和它最新的应用。 然后想到我的博客也恰好满足这样的需求，因为我的博客一旦有了修改，就必须要重新build并且部署，那么能不能用持续集成的思想来改造我部署博客的流程呢？\n\n在这样的指导思想下，我完成了上一篇文章：[VPS搭配Github Webhook实现Hexo自动发布](https://xuanwo.org/2015/02/05/VPS-Hexo-Autodeploy/)，而今天我要介绍一下，在没有VPS的情况下，如何更方便的配置自己的持续集成的博客。\n\n# 好处\n\n- 方便：只需要一次配置，便省去了每一次编辑文档后，都需要进行`hexo d -g`的麻烦，更不必说文章增多之后渲染时间还会增长。\n- 稳定：这个是最近才发现的，Github被搞了之后，很多人反映不能更新博客了，使用`Travis CI`，你只要想办法提交一个小md文档，就能进行构建。如果自己手动构建，只要一个文件上传失败，前面的工作都白费了。\n- 快捷：即使是出差在外，只要能编辑Markdown，就可以撰写博客，使得Hexo拥有类似于WP一致的体验~\n- 协作：博客的构建完全交由`Travis CI`进行，所以完全可以通过`Hexo`+`git`构建一个多人协作的博客平台。实际上，Hexo的[官网](https://hexo.io/)正是这样构建的。\n\n# Travis CI介绍\n\n> Travis CI是在软件开发领域中的一个在线的，分布式的持续集成服务，用来构建及测试在GitHub托管的代码。这个软件的代码同时也是开源的，可以在GitHub上下载到，尽管开发者当前并不推荐在闭源项目中单独使用它。 它提供了多种编程语言的支持，包括Ruby，JavaScript，Java，Scala，PHP，Haskell和Erlang在内的多种语言。许多知名的开源项目使用它来在每次提交的时候进行构建测试，比如Ruby on Rails，Ruby和Node.js。 2012年，Travis CI 决定进行募资以支持后续的开发，在这次募资活动中，许多重量级的科技公司给予了资助。\n\n需要注意的是几个特性：\n\n- 只支持Github\n- 支持JavaScript\n- 开源，免费\n\n然后介绍一下它的原理： Travis CI会在你每一次提交之后生成一个虚拟机来执行你事先安排好的build任务，你可以调整这个虚拟机的软件环境，甚至能执行`sudo`来进行`apt-get install`。\n\n# Travis CI配置\n\n我们知道，Hexo的命令非常简单，一个`hexo d -g`就可以搞定。困难之处在于，Travis CI并没有对你的库进行push操作的权限。如果直接将私钥放在自己的开源库之中，这无异于将自己的代码库提交权限开放给了所有的Github使用者。所以，为了保护自己，我们需要采取一些配置操作。\n\n*感谢Hexo作者tommy351提供的操作流程，原文可见于用 Travis CI 自動部署網站到 GitHub*\n\n## Travis CI使用SSH 连接GitHub\n\n### 生成SSH Key\n\n参见[使用Github SSH Key以免去Hexo部署时输入密码](http://xuanwo.org/2015/02/07/generate-a-ssh-key/) 需要注意的是，这个SSH key不应成为你账号的全局SSH key*（因为这样Travis CI就获得了你所有代码库的提交权限，这是不正确的）*，而应该添加至https://github.com/username/ropename/settings/keys ，这样，你就控制了Travis CI的权限。\n\n###加密私钥\n\n下面的操作需要事先配置好gem环境，如果没有可以尝试使用[强大且配置项丰富的在线IDE应用——Cloud9](http://xuanwo.org/2014/08/07/Cloud9/)。\n\n### 安装Travis CI的命令行工具\n\n```bash\ngem install travis # 安装travis\n```\n\n### 登陆Travis CI\n\n需要输入Github账号和密码\n\n```bash\ntravis login --auto\n```\n\n### 加密私钥并上传至Travis\n\n正确生成后你会得到两个文件，一个叫`ssh_key`，一个叫`ssh_key.pub`。刚才我们将`ssh_key.pub`添加到了github，下面我们要加密`ssh_key`这个私钥并且上传到Travis。\n\n```bash\ntravis encrypt-file ssh_key --add\n```\n\n然后Travis的客户端会自动检测当前目录中的git信息，并且添加到`.travis.yml`中去。在进行此步操作前，目录下要先存在`.travis.yml`文件，否则会报错。\n\n### 指定SSH设置\n\n在当前目录下新建文件`ssh_config`，内容为\n\n```bash\nHost github.com\n  User git\n  StrictHostKeyChecking no\n  IdentityFile ~/.ssh/id_rsa\n  IdentitiesOnly yes\n```\n\n然后指定openssl解密后的生成位置，修改Travis自动插入的解密指令(不要照抄，注意修改密钥)\n\n```bash\n- openssl aes-256-cbc -K $encrypted_xxxxxxxxxx_key -iv $encrypted_xxxxxxxxxx_iv\n  -in travis.enc -out ~/.ssh/id_rsa -d\n```\n\n### 修改目录权限\n\n紧跟那条解密指令，换行输入：\n\n```bash\n- chmod 600 ~/.ssh/id_rsa\n```\n\n注意yml格式，短杠后面的空格不能省略。\n\n### 将密钥加入系统\n\n紧跟上一步操作，换行输入：\n\n```bash\n- eval $(ssh-agent)\n- ssh-add ~/.ssh/id_rsa\n```\n\n### 修改git信息\n\n将之前创建的ssh_config复制到Travis的虚拟机中去，输入：\n\n```bash\n- cp ssh_config ~/.ssh/config\n```\n\n然后指定git使用者信息：\n\n```bash\n- git config --global user.name \"username\"\n- git config --global user.email username@example.com\n```\n\n### Build配置\n\n之前的所有操作都只是为了让Travis CI拥有push权限，下面我们开始进入到真正的Build配置当中。 之前我们用到了一个名为`.travis.yml`的文件，跟build有关的所有设置都在这个文件里面，下面的操作都在这个文件当中进行。\n\n### 指定环境\n\n在文件中添加如下代码：\n\n```bash\nlanguage: node_js\n\nnode_js:\n- '0.10'   //指定使用node.js最新的稳定版0.10\n```\n\n### 指定分支\n\n在文件中添加如下代码：\n\n```bash\nbranches:\n  only:\n  - blog    //这个分支应当使用自己的源文件分支\n```\n\n差点忘了讲- -，本方案只适用于用github来托管自己自己的hexo目录的用户。这里的分支应该使用包含有.md文档的那个分支。\n\n### Hexo配置\n\n首先在虚拟机中安装Hexo：\n\n```bash\ninstall:\n- npm install hexo-cli -g\n- npm install hexo --save\n- npm install\n```\n\n然后执行Hexo的渲染操作\n\n```bash\nscript:\n- hexo clean   //分开写，方便调试可能出现的错误\n- hexo d\n- hexo g\n```\n\n到这里，你的Travis CI的持续集成已经配置完毕了，最后的`.travis.yml`文件内容可以参考如下：\n\n```bash\nbranches:\n  only:\n  - blog # 这里是你监视的分支，只有blog分支更改才触发自动部署\n\nlanguage: node_js\n\nsudo: false\n\nnode_js:\n- '0.12' \n\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_xxxxxxxxx_key -iv $encrypted_xxxxxxx_iv\n  -in doc/travis.enc -out ~/.ssh/id_rsa -d\n- chmod 600 ~/.ssh/id_rsa\n- eval $(ssh-agent)\n- ssh-add ~/.ssh/id_rsa\n- cp doc/ssh_config ~/.ssh/config\n- git config --global user.name \"yourname\"\n- git config --global user.email youremail\n- git clone -b master git@github.com:yourname/yourrepo.git .deploy_git\n\ninstall:\n- npm install hexo-cli -g\n- npm install\n- npm install hexo-generator-feed --save\n- npm install hexo-generator-sitemap --save\n- npm install hexo-deployer-git --save\n\nscript:\n- hexo clean\n- hexo g\n- hexo d\n```\n\n\n\n## Travis CI使用Token 连接GitHub\n\n- ### **安装travis**\n\n  Travis安装需要Ruby环境，所有需要安装Ruby,并且需要安装rubygems插件。\n\n  ```bash\n  # 安装travis\n  gem isntall travis\n  ```\n\n- ### 新建配置文件\n\n  首先打开博客项目文件夹，在项目根目录新建`.travis.yml`配置文件。\n\n  ```bash\n  $ cd 博客项目文件夹根目录\n  $ touch .travis.yml\n  ```\n\n- ### **登录travis**\n\n  ```bash\n  travis login --auto\n  ```\n\n  然后会提示输入github的用户名和密码。\n\n- ### **新建变量**\n\n  在项目根目录下执行:\n\n  ```bash\n  # 这里的 REPO_TOKEN 是变量名,在后面的配置文件中会用到\n  # TOKEN 是上面github生成的Token\n  travis encrypt 'REPO_TOKEN=<TOKEN>' --add\n  ```\n\n  此操作会在`.travis.yml`文件中添加下面的信息\n\n  ```bash\n  env:\n  global:\n    secure: fxBE17yzFhC2+FjwVLYbgIhggyfliv3dFCDozTJD7U3n\n  ```\n\n### 编辑配置文件\n\n​      打开Travis配置文件**.travis.yml**，添加如下信息：\n\n```bash\nlanguage: node_js\nnode_js:\n- \"4\"  # nodejs的版本\nbranches:\n  only:\n  - dev  # 设置自动化部署的源码分支\nenv:\n  global:\n    secure: [加密后的Token]\nbefore_install:\n- export TZ='Asia/Shanghai'  # 设置时区\n- npm install -g hexo\n- npm install -g hexo-cli\nbefore_script:\n# 设置github账户信息\n- git config --global user.name \"SeayXu\" #设置github用户名\n- git config --global user.email SeayXu@163.com #设置github用户邮箱\n# github仓库操作\n- sed -i'' \"s~git@github.com:SeayXu/seayxu.github.io.git~https://${REPO_TOKEN}:x-oauth-basic@github.com/SeayXu/seayxu.github.io.git~\" _config.yml\n# 安装依赖组件\ninstall:\n- npm install\n# 执行的命令\nscript:\n- hexo clean\n- hexo generate\n# 执行的成功后执行 \nafter_success:\n- hexo deploy\n```\n\n完整配置文件可以[参考这个](https://github.com/SeayXu/seayxu.github.io/blob/dev/.travis.yml~~)。\n\n转载备用，这个我没配置，因为手上没Lunix系统，等回头装个的虚拟机尝试下，我是用AppVeyor。","source":"_posts/使用Travis-CI自动部署Hexo.md","raw":"---\ntitle: 使用Travis CI自动部署Hexo\ntag:\n  - Travis\n  - git \n  - hexo\ncategories: 网络技术\ndate: 2017-08-20 03:41:09\n---\n前两天了解到了一个有趣的概念叫持续集成：\n\n> 持续集成是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，一般每人每天至少集成一次，也可以多次。每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。许多团队发现这种方法可以显著减少集成引起的问题，并可以加快团队合作软件开发的速度。这篇文章简要介绍了持续集成的技巧和它最新的应用。 然后想到我的博客也恰好满足这样的需求，因为我的博客一旦有了修改，就必须要重新build并且部署，那么能不能用持续集成的思想来改造我部署博客的流程呢？\n\n在这样的指导思想下，我完成了上一篇文章：[VPS搭配Github Webhook实现Hexo自动发布](https://xuanwo.org/2015/02/05/VPS-Hexo-Autodeploy/)，而今天我要介绍一下，在没有VPS的情况下，如何更方便的配置自己的持续集成的博客。\n\n# 好处\n\n- 方便：只需要一次配置，便省去了每一次编辑文档后，都需要进行`hexo d -g`的麻烦，更不必说文章增多之后渲染时间还会增长。\n- 稳定：这个是最近才发现的，Github被搞了之后，很多人反映不能更新博客了，使用`Travis CI`，你只要想办法提交一个小md文档，就能进行构建。如果自己手动构建，只要一个文件上传失败，前面的工作都白费了。\n- 快捷：即使是出差在外，只要能编辑Markdown，就可以撰写博客，使得Hexo拥有类似于WP一致的体验~\n- 协作：博客的构建完全交由`Travis CI`进行，所以完全可以通过`Hexo`+`git`构建一个多人协作的博客平台。实际上，Hexo的[官网](https://hexo.io/)正是这样构建的。\n\n# Travis CI介绍\n\n> Travis CI是在软件开发领域中的一个在线的，分布式的持续集成服务，用来构建及测试在GitHub托管的代码。这个软件的代码同时也是开源的，可以在GitHub上下载到，尽管开发者当前并不推荐在闭源项目中单独使用它。 它提供了多种编程语言的支持，包括Ruby，JavaScript，Java，Scala，PHP，Haskell和Erlang在内的多种语言。许多知名的开源项目使用它来在每次提交的时候进行构建测试，比如Ruby on Rails，Ruby和Node.js。 2012年，Travis CI 决定进行募资以支持后续的开发，在这次募资活动中，许多重量级的科技公司给予了资助。\n\n需要注意的是几个特性：\n\n- 只支持Github\n- 支持JavaScript\n- 开源，免费\n\n然后介绍一下它的原理： Travis CI会在你每一次提交之后生成一个虚拟机来执行你事先安排好的build任务，你可以调整这个虚拟机的软件环境，甚至能执行`sudo`来进行`apt-get install`。\n\n# Travis CI配置\n\n我们知道，Hexo的命令非常简单，一个`hexo d -g`就可以搞定。困难之处在于，Travis CI并没有对你的库进行push操作的权限。如果直接将私钥放在自己的开源库之中，这无异于将自己的代码库提交权限开放给了所有的Github使用者。所以，为了保护自己，我们需要采取一些配置操作。\n\n*感谢Hexo作者tommy351提供的操作流程，原文可见于用 Travis CI 自動部署網站到 GitHub*\n\n## Travis CI使用SSH 连接GitHub\n\n### 生成SSH Key\n\n参见[使用Github SSH Key以免去Hexo部署时输入密码](http://xuanwo.org/2015/02/07/generate-a-ssh-key/) 需要注意的是，这个SSH key不应成为你账号的全局SSH key*（因为这样Travis CI就获得了你所有代码库的提交权限，这是不正确的）*，而应该添加至https://github.com/username/ropename/settings/keys ，这样，你就控制了Travis CI的权限。\n\n###加密私钥\n\n下面的操作需要事先配置好gem环境，如果没有可以尝试使用[强大且配置项丰富的在线IDE应用——Cloud9](http://xuanwo.org/2014/08/07/Cloud9/)。\n\n### 安装Travis CI的命令行工具\n\n```bash\ngem install travis # 安装travis\n```\n\n### 登陆Travis CI\n\n需要输入Github账号和密码\n\n```bash\ntravis login --auto\n```\n\n### 加密私钥并上传至Travis\n\n正确生成后你会得到两个文件，一个叫`ssh_key`，一个叫`ssh_key.pub`。刚才我们将`ssh_key.pub`添加到了github，下面我们要加密`ssh_key`这个私钥并且上传到Travis。\n\n```bash\ntravis encrypt-file ssh_key --add\n```\n\n然后Travis的客户端会自动检测当前目录中的git信息，并且添加到`.travis.yml`中去。在进行此步操作前，目录下要先存在`.travis.yml`文件，否则会报错。\n\n### 指定SSH设置\n\n在当前目录下新建文件`ssh_config`，内容为\n\n```bash\nHost github.com\n  User git\n  StrictHostKeyChecking no\n  IdentityFile ~/.ssh/id_rsa\n  IdentitiesOnly yes\n```\n\n然后指定openssl解密后的生成位置，修改Travis自动插入的解密指令(不要照抄，注意修改密钥)\n\n```bash\n- openssl aes-256-cbc -K $encrypted_xxxxxxxxxx_key -iv $encrypted_xxxxxxxxxx_iv\n  -in travis.enc -out ~/.ssh/id_rsa -d\n```\n\n### 修改目录权限\n\n紧跟那条解密指令，换行输入：\n\n```bash\n- chmod 600 ~/.ssh/id_rsa\n```\n\n注意yml格式，短杠后面的空格不能省略。\n\n### 将密钥加入系统\n\n紧跟上一步操作，换行输入：\n\n```bash\n- eval $(ssh-agent)\n- ssh-add ~/.ssh/id_rsa\n```\n\n### 修改git信息\n\n将之前创建的ssh_config复制到Travis的虚拟机中去，输入：\n\n```bash\n- cp ssh_config ~/.ssh/config\n```\n\n然后指定git使用者信息：\n\n```bash\n- git config --global user.name \"username\"\n- git config --global user.email username@example.com\n```\n\n### Build配置\n\n之前的所有操作都只是为了让Travis CI拥有push权限，下面我们开始进入到真正的Build配置当中。 之前我们用到了一个名为`.travis.yml`的文件，跟build有关的所有设置都在这个文件里面，下面的操作都在这个文件当中进行。\n\n### 指定环境\n\n在文件中添加如下代码：\n\n```bash\nlanguage: node_js\n\nnode_js:\n- '0.10'   //指定使用node.js最新的稳定版0.10\n```\n\n### 指定分支\n\n在文件中添加如下代码：\n\n```bash\nbranches:\n  only:\n  - blog    //这个分支应当使用自己的源文件分支\n```\n\n差点忘了讲- -，本方案只适用于用github来托管自己自己的hexo目录的用户。这里的分支应该使用包含有.md文档的那个分支。\n\n### Hexo配置\n\n首先在虚拟机中安装Hexo：\n\n```bash\ninstall:\n- npm install hexo-cli -g\n- npm install hexo --save\n- npm install\n```\n\n然后执行Hexo的渲染操作\n\n```bash\nscript:\n- hexo clean   //分开写，方便调试可能出现的错误\n- hexo d\n- hexo g\n```\n\n到这里，你的Travis CI的持续集成已经配置完毕了，最后的`.travis.yml`文件内容可以参考如下：\n\n```bash\nbranches:\n  only:\n  - blog # 这里是你监视的分支，只有blog分支更改才触发自动部署\n\nlanguage: node_js\n\nsudo: false\n\nnode_js:\n- '0.12' \n\nbefore_install:\n- openssl aes-256-cbc -K $encrypted_xxxxxxxxx_key -iv $encrypted_xxxxxxx_iv\n  -in doc/travis.enc -out ~/.ssh/id_rsa -d\n- chmod 600 ~/.ssh/id_rsa\n- eval $(ssh-agent)\n- ssh-add ~/.ssh/id_rsa\n- cp doc/ssh_config ~/.ssh/config\n- git config --global user.name \"yourname\"\n- git config --global user.email youremail\n- git clone -b master git@github.com:yourname/yourrepo.git .deploy_git\n\ninstall:\n- npm install hexo-cli -g\n- npm install\n- npm install hexo-generator-feed --save\n- npm install hexo-generator-sitemap --save\n- npm install hexo-deployer-git --save\n\nscript:\n- hexo clean\n- hexo g\n- hexo d\n```\n\n\n\n## Travis CI使用Token 连接GitHub\n\n- ### **安装travis**\n\n  Travis安装需要Ruby环境，所有需要安装Ruby,并且需要安装rubygems插件。\n\n  ```bash\n  # 安装travis\n  gem isntall travis\n  ```\n\n- ### 新建配置文件\n\n  首先打开博客项目文件夹，在项目根目录新建`.travis.yml`配置文件。\n\n  ```bash\n  $ cd 博客项目文件夹根目录\n  $ touch .travis.yml\n  ```\n\n- ### **登录travis**\n\n  ```bash\n  travis login --auto\n  ```\n\n  然后会提示输入github的用户名和密码。\n\n- ### **新建变量**\n\n  在项目根目录下执行:\n\n  ```bash\n  # 这里的 REPO_TOKEN 是变量名,在后面的配置文件中会用到\n  # TOKEN 是上面github生成的Token\n  travis encrypt 'REPO_TOKEN=<TOKEN>' --add\n  ```\n\n  此操作会在`.travis.yml`文件中添加下面的信息\n\n  ```bash\n  env:\n  global:\n    secure: fxBE17yzFhC2+FjwVLYbgIhggyfliv3dFCDozTJD7U3n\n  ```\n\n### 编辑配置文件\n\n​      打开Travis配置文件**.travis.yml**，添加如下信息：\n\n```bash\nlanguage: node_js\nnode_js:\n- \"4\"  # nodejs的版本\nbranches:\n  only:\n  - dev  # 设置自动化部署的源码分支\nenv:\n  global:\n    secure: [加密后的Token]\nbefore_install:\n- export TZ='Asia/Shanghai'  # 设置时区\n- npm install -g hexo\n- npm install -g hexo-cli\nbefore_script:\n# 设置github账户信息\n- git config --global user.name \"SeayXu\" #设置github用户名\n- git config --global user.email SeayXu@163.com #设置github用户邮箱\n# github仓库操作\n- sed -i'' \"s~git@github.com:SeayXu/seayxu.github.io.git~https://${REPO_TOKEN}:x-oauth-basic@github.com/SeayXu/seayxu.github.io.git~\" _config.yml\n# 安装依赖组件\ninstall:\n- npm install\n# 执行的命令\nscript:\n- hexo clean\n- hexo generate\n# 执行的成功后执行 \nafter_success:\n- hexo deploy\n```\n\n完整配置文件可以[参考这个](https://github.com/SeayXu/seayxu.github.io/blob/dev/.travis.yml~~)。\n\n转载备用，这个我没配置，因为手上没Lunix系统，等回头装个的虚拟机尝试下，我是用AppVeyor。","slug":"使用Travis-CI自动部署Hexo","published":1,"updated":"2017-08-20T06:45:39.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kfg8ry000kygkvyk1kido3","content":"<p>前两天了解到了一个有趣的概念叫持续集成：</p>\n<blockquote>\n<p>持续集成是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，一般每人每天至少集成一次，也可以多次。每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。许多团队发现这种方法可以显著减少集成引起的问题，并可以加快团队合作软件开发的速度。这篇文章简要介绍了持续集成的技巧和它最新的应用。 然后想到我的博客也恰好满足这样的需求，因为我的博客一旦有了修改，就必须要重新build并且部署，那么能不能用持续集成的思想来改造我部署博客的流程呢？</p>\n</blockquote>\n<p>在这样的指导思想下，我完成了上一篇文章：<a href=\"https://xuanwo.org/2015/02/05/VPS-Hexo-Autodeploy/\" target=\"_blank\" rel=\"external\">VPS搭配Github Webhook实现Hexo自动发布</a>，而今天我要介绍一下，在没有VPS的情况下，如何更方便的配置自己的持续集成的博客。</p>\n<h1 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h1><ul>\n<li>方便：只需要一次配置，便省去了每一次编辑文档后，都需要进行<code>hexo d -g</code>的麻烦，更不必说文章增多之后渲染时间还会增长。</li>\n<li>稳定：这个是最近才发现的，Github被搞了之后，很多人反映不能更新博客了，使用<code>Travis CI</code>，你只要想办法提交一个小md文档，就能进行构建。如果自己手动构建，只要一个文件上传失败，前面的工作都白费了。</li>\n<li>快捷：即使是出差在外，只要能编辑Markdown，就可以撰写博客，使得Hexo拥有类似于WP一致的体验~</li>\n<li>协作：博客的构建完全交由<code>Travis CI</code>进行，所以完全可以通过<code>Hexo</code>+<code>git</code>构建一个多人协作的博客平台。实际上，Hexo的<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">官网</a>正是这样构建的。</li>\n</ul>\n<h1 id=\"Travis-CI介绍\"><a href=\"#Travis-CI介绍\" class=\"headerlink\" title=\"Travis CI介绍\"></a>Travis CI介绍</h1><blockquote>\n<p>Travis CI是在软件开发领域中的一个在线的，分布式的持续集成服务，用来构建及测试在GitHub托管的代码。这个软件的代码同时也是开源的，可以在GitHub上下载到，尽管开发者当前并不推荐在闭源项目中单独使用它。 它提供了多种编程语言的支持，包括Ruby，JavaScript，Java，Scala，PHP，Haskell和Erlang在内的多种语言。许多知名的开源项目使用它来在每次提交的时候进行构建测试，比如Ruby on Rails，Ruby和Node.js。 2012年，Travis CI 决定进行募资以支持后续的开发，在这次募资活动中，许多重量级的科技公司给予了资助。</p>\n</blockquote>\n<p>需要注意的是几个特性：</p>\n<ul>\n<li>只支持Github</li>\n<li>支持JavaScript</li>\n<li>开源，免费</li>\n</ul>\n<p>然后介绍一下它的原理： Travis CI会在你每一次提交之后生成一个虚拟机来执行你事先安排好的build任务，你可以调整这个虚拟机的软件环境，甚至能执行<code>sudo</code>来进行<code>apt-get install</code>。</p>\n<h1 id=\"Travis-CI配置\"><a href=\"#Travis-CI配置\" class=\"headerlink\" title=\"Travis CI配置\"></a>Travis CI配置</h1><p>我们知道，Hexo的命令非常简单，一个<code>hexo d -g</code>就可以搞定。困难之处在于，Travis CI并没有对你的库进行push操作的权限。如果直接将私钥放在自己的开源库之中，这无异于将自己的代码库提交权限开放给了所有的Github使用者。所以，为了保护自己，我们需要采取一些配置操作。</p>\n<p><em>感谢Hexo作者tommy351提供的操作流程，原文可见于用 Travis CI 自動部署網站到 GitHub</em></p>\n<h2 id=\"Travis-CI使用SSH-连接GitHub\"><a href=\"#Travis-CI使用SSH-连接GitHub\" class=\"headerlink\" title=\"Travis CI使用SSH 连接GitHub\"></a>Travis CI使用SSH 连接GitHub</h2><h3 id=\"生成SSH-Key\"><a href=\"#生成SSH-Key\" class=\"headerlink\" title=\"生成SSH Key\"></a>生成SSH Key</h3><p>参见<a href=\"http://xuanwo.org/2015/02/07/generate-a-ssh-key/\" target=\"_blank\" rel=\"external\">使用Github SSH Key以免去Hexo部署时输入密码</a> 需要注意的是，这个SSH key不应成为你账号的全局SSH key<em>（因为这样Travis CI就获得了你所有代码库的提交权限，这是不正确的）</em>，而应该添加至<a href=\"https://github.com/username/ropename/settings/keys\" target=\"_blank\" rel=\"external\">https://github.com/username/ropename/settings/keys</a> ，这样，你就控制了Travis CI的权限。</p>\n<p>###加密私钥</p>\n<p>下面的操作需要事先配置好gem环境，如果没有可以尝试使用<a href=\"http://xuanwo.org/2014/08/07/Cloud9/\" target=\"_blank\" rel=\"external\">强大且配置项丰富的在线IDE应用——Cloud9</a>。</p>\n<h3 id=\"安装Travis-CI的命令行工具\"><a href=\"#安装Travis-CI的命令行工具\" class=\"headerlink\" title=\"安装Travis CI的命令行工具\"></a>安装Travis CI的命令行工具</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install travis <span class=\"comment\"># 安装travis</span></div></pre></td></tr></table></figure>\n<h3 id=\"登陆Travis-CI\"><a href=\"#登陆Travis-CI\" class=\"headerlink\" title=\"登陆Travis CI\"></a>登陆Travis CI</h3><p>需要输入Github账号和密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">travis login --auto</div></pre></td></tr></table></figure>\n<h3 id=\"加密私钥并上传至Travis\"><a href=\"#加密私钥并上传至Travis\" class=\"headerlink\" title=\"加密私钥并上传至Travis\"></a>加密私钥并上传至Travis</h3><p>正确生成后你会得到两个文件，一个叫<code>ssh_key</code>，一个叫<code>ssh_key.pub</code>。刚才我们将<code>ssh_key.pub</code>添加到了github，下面我们要加密<code>ssh_key</code>这个私钥并且上传到Travis。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">travis encrypt-file ssh_key --add</div></pre></td></tr></table></figure>\n<p>然后Travis的客户端会自动检测当前目录中的git信息，并且添加到<code>.travis.yml</code>中去。在进行此步操作前，目录下要先存在<code>.travis.yml</code>文件，否则会报错。</p>\n<h3 id=\"指定SSH设置\"><a href=\"#指定SSH设置\" class=\"headerlink\" title=\"指定SSH设置\"></a>指定SSH设置</h3><p>在当前目录下新建文件<code>ssh_config</code>，内容为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host github.com</div><div class=\"line\">  User git</div><div class=\"line\">  StrictHostKeyChecking no</div><div class=\"line\">  IdentityFile ~/.ssh/id_rsa</div><div class=\"line\">  IdentitiesOnly yes</div></pre></td></tr></table></figure>\n<p>然后指定openssl解密后的生成位置，修改Travis自动插入的解密指令(不要照抄，注意修改密钥)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">- openssl aes-256-cbc -K <span class=\"variable\">$encrypted_xxxxxxxxxx_key</span> -iv <span class=\"variable\">$encrypted_xxxxxxxxxx_iv</span></div><div class=\"line\">  -<span class=\"keyword\">in</span> travis.enc -out ~/.ssh/id_rsa -d</div></pre></td></tr></table></figure>\n<h3 id=\"修改目录权限\"><a href=\"#修改目录权限\" class=\"headerlink\" title=\"修改目录权限\"></a>修改目录权限</h3><p>紧跟那条解密指令，换行输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- chmod 600 ~/.ssh/id_rsa</div></pre></td></tr></table></figure>\n<p>注意yml格式，短杠后面的空格不能省略。</p>\n<h3 id=\"将密钥加入系统\"><a href=\"#将密钥加入系统\" class=\"headerlink\" title=\"将密钥加入系统\"></a>将密钥加入系统</h3><p>紧跟上一步操作，换行输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">- <span class=\"built_in\">eval</span> $(ssh-agent)</div><div class=\"line\">- ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>\n<h3 id=\"修改git信息\"><a href=\"#修改git信息\" class=\"headerlink\" title=\"修改git信息\"></a>修改git信息</h3><p>将之前创建的ssh_config复制到Travis的虚拟机中去，输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- cp ssh_config ~/.ssh/config</div></pre></td></tr></table></figure>\n<p>然后指定git使用者信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">- git config --global user.name <span class=\"string\">\"username\"</span></div><div class=\"line\">- git config --global user.email username@example.com</div></pre></td></tr></table></figure>\n<h3 id=\"Build配置\"><a href=\"#Build配置\" class=\"headerlink\" title=\"Build配置\"></a>Build配置</h3><p>之前的所有操作都只是为了让Travis CI拥有push权限，下面我们开始进入到真正的Build配置当中。 之前我们用到了一个名为<code>.travis.yml</code>的文件，跟build有关的所有设置都在这个文件里面，下面的操作都在这个文件当中进行。</p>\n<h3 id=\"指定环境\"><a href=\"#指定环境\" class=\"headerlink\" title=\"指定环境\"></a>指定环境</h3><p>在文件中添加如下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">language: node_js</div><div class=\"line\"></div><div class=\"line\">node_js:</div><div class=\"line\">- <span class=\"string\">'0.10'</span>   //指定使用node.js最新的稳定版0.10</div></pre></td></tr></table></figure>\n<h3 id=\"指定分支\"><a href=\"#指定分支\" class=\"headerlink\" title=\"指定分支\"></a>指定分支</h3><p>在文件中添加如下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">branches:</div><div class=\"line\">  only:</div><div class=\"line\">  - blog    //这个分支应当使用自己的源文件分支</div></pre></td></tr></table></figure>\n<p>差点忘了讲- -，本方案只适用于用github来托管自己自己的hexo目录的用户。这里的分支应该使用包含有.md文档的那个分支。</p>\n<h3 id=\"Hexo配置\"><a href=\"#Hexo配置\" class=\"headerlink\" title=\"Hexo配置\"></a>Hexo配置</h3><p>首先在虚拟机中安装Hexo：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">install:</div><div class=\"line\">- npm install hexo-cli -g</div><div class=\"line\">- npm install hexo --save</div><div class=\"line\">- npm install</div></pre></td></tr></table></figure>\n<p>然后执行Hexo的渲染操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">script:</div><div class=\"line\">- hexo clean   //分开写，方便调试可能出现的错误</div><div class=\"line\">- hexo d</div><div class=\"line\">- hexo g</div></pre></td></tr></table></figure>\n<p>到这里，你的Travis CI的持续集成已经配置完毕了，最后的<code>.travis.yml</code>文件内容可以参考如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">branches:</div><div class=\"line\">  only:</div><div class=\"line\">  - blog <span class=\"comment\"># 这里是你监视的分支，只有blog分支更改才触发自动部署</span></div><div class=\"line\"></div><div class=\"line\">language: node_js</div><div class=\"line\"></div><div class=\"line\">sudo: <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">node_js:</div><div class=\"line\">- <span class=\"string\">'0.12'</span> </div><div class=\"line\"></div><div class=\"line\">before_install:</div><div class=\"line\">- openssl aes-256-cbc -K <span class=\"variable\">$encrypted_xxxxxxxxx_key</span> -iv <span class=\"variable\">$encrypted_xxxxxxx_iv</span></div><div class=\"line\">  -<span class=\"keyword\">in</span> doc/travis.enc -out ~/.ssh/id_rsa -d</div><div class=\"line\">- chmod 600 ~/.ssh/id_rsa</div><div class=\"line\">- <span class=\"built_in\">eval</span> $(ssh-agent)</div><div class=\"line\">- ssh-add ~/.ssh/id_rsa</div><div class=\"line\">- cp doc/ssh_config ~/.ssh/config</div><div class=\"line\">- git config --global user.name <span class=\"string\">\"yourname\"</span></div><div class=\"line\">- git config --global user.email youremail</div><div class=\"line\">- git <span class=\"built_in\">clone</span> -b master git@github.com:yourname/yourrepo.git .deploy_git</div><div class=\"line\"></div><div class=\"line\">install:</div><div class=\"line\">- npm install hexo-cli -g</div><div class=\"line\">- npm install</div><div class=\"line\">- npm install hexo-generator-feed --save</div><div class=\"line\">- npm install hexo-generator-sitemap --save</div><div class=\"line\">- npm install hexo-deployer-git --save</div><div class=\"line\"></div><div class=\"line\">script:</div><div class=\"line\">- hexo clean</div><div class=\"line\">- hexo g</div><div class=\"line\">- hexo d</div></pre></td></tr></table></figure>\n<h2 id=\"Travis-CI使用Token-连接GitHub\"><a href=\"#Travis-CI使用Token-连接GitHub\" class=\"headerlink\" title=\"Travis CI使用Token 连接GitHub\"></a>Travis CI使用Token 连接GitHub</h2><ul>\n<li><h3 id=\"安装travis\"><a href=\"#安装travis\" class=\"headerlink\" title=\"安装travis\"></a><strong>安装travis</strong></h3><p>Travis安装需要Ruby环境，所有需要安装Ruby,并且需要安装rubygems插件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装travis</span></div><div class=\"line\">gem isntall travis</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"新建配置文件\"><a href=\"#新建配置文件\" class=\"headerlink\" title=\"新建配置文件\"></a>新建配置文件</h3><p>首先打开博客项目文件夹，在项目根目录新建<code>.travis.yml</code>配置文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> 博客项目文件夹根目录</div><div class=\"line\">$ touch .travis.yml</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"登录travis\"><a href=\"#登录travis\" class=\"headerlink\" title=\"登录travis\"></a><strong>登录travis</strong></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">travis login --auto</div></pre></td></tr></table></figure>\n<p>然后会提示输入github的用户名和密码。</p>\n</li>\n<li><h3 id=\"新建变量\"><a href=\"#新建变量\" class=\"headerlink\" title=\"新建变量\"></a><strong>新建变量</strong></h3><p>在项目根目录下执行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 这里的 REPO_TOKEN 是变量名,在后面的配置文件中会用到</span></div><div class=\"line\"><span class=\"comment\"># TOKEN 是上面github生成的Token</span></div><div class=\"line\">travis encrypt <span class=\"string\">'REPO_TOKEN=&lt;TOKEN&gt;'</span> --add</div></pre></td></tr></table></figure>\n<p>此操作会在<code>.travis.yml</code>文件中添加下面的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">env:</div><div class=\"line\">global:</div><div class=\"line\">  secure: fxBE17yzFhC2+FjwVLYbgIhggyfliv3dFCDozTJD7U3n</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h3><p>​      打开Travis配置文件<strong>.travis.yml</strong>，添加如下信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">language: node_js</div><div class=\"line\">node_js:</div><div class=\"line\">- <span class=\"string\">\"4\"</span>  <span class=\"comment\"># nodejs的版本</span></div><div class=\"line\">branches:</div><div class=\"line\">  only:</div><div class=\"line\">  - dev  <span class=\"comment\"># 设置自动化部署的源码分支</span></div><div class=\"line\">env:</div><div class=\"line\">  global:</div><div class=\"line\">    secure: [加密后的Token]</div><div class=\"line\">before_install:</div><div class=\"line\">- <span class=\"built_in\">export</span> TZ=<span class=\"string\">'Asia/Shanghai'</span>  <span class=\"comment\"># 设置时区</span></div><div class=\"line\">- npm install -g hexo</div><div class=\"line\">- npm install -g hexo-cli</div><div class=\"line\">before_script:</div><div class=\"line\"><span class=\"comment\"># 设置github账户信息</span></div><div class=\"line\">- git config --global user.name <span class=\"string\">\"SeayXu\"</span> <span class=\"comment\">#设置github用户名</span></div><div class=\"line\">- git config --global user.email SeayXu@163.com <span class=\"comment\">#设置github用户邮箱</span></div><div class=\"line\"><span class=\"comment\"># github仓库操作</span></div><div class=\"line\">- sed -i<span class=\"string\">''</span> <span class=\"string\">\"s~git@github.com:SeayXu/seayxu.github.io.git~https://<span class=\"variable\">$&#123;REPO_TOKEN&#125;</span>:x-oauth-basic@github.com/SeayXu/seayxu.github.io.git~\"</span> _config.yml</div><div class=\"line\"><span class=\"comment\"># 安装依赖组件</span></div><div class=\"line\">install:</div><div class=\"line\">- npm install</div><div class=\"line\"><span class=\"comment\"># 执行的命令</span></div><div class=\"line\">script:</div><div class=\"line\">- hexo clean</div><div class=\"line\">- hexo generate</div><div class=\"line\"><span class=\"comment\"># 执行的成功后执行 </span></div><div class=\"line\">after_success:</div><div class=\"line\">- hexo deploy</div></pre></td></tr></table></figure>\n<p>完整配置文件可以<a href=\"https://github.com/SeayXu/seayxu.github.io/blob/dev/.travis.yml~~\" target=\"_blank\" rel=\"external\">参考这个</a>。</p>\n<p>转载备用，这个我没配置，因为手上没Lunix系统，等回头装个的虚拟机尝试下，我是用AppVeyor。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>前两天了解到了一个有趣的概念叫持续集成：</p>\n<blockquote>\n<p>持续集成是一种软件开发实践。在持续集成中，团队成员频繁集成他们的工作成果，一般每人每天至少集成一次，也可以多次。每次集成会经过自动构建（包括自动测试）的检验，以尽快发现集成错误。许多团队发现这种方法可以显著减少集成引起的问题，并可以加快团队合作软件开发的速度。这篇文章简要介绍了持续集成的技巧和它最新的应用。 然后想到我的博客也恰好满足这样的需求，因为我的博客一旦有了修改，就必须要重新build并且部署，那么能不能用持续集成的思想来改造我部署博客的流程呢？</p>\n</blockquote>\n<p>在这样的指导思想下，我完成了上一篇文章：<a href=\"https://xuanwo.org/2015/02/05/VPS-Hexo-Autodeploy/\" target=\"_blank\" rel=\"external\">VPS搭配Github Webhook实现Hexo自动发布</a>，而今天我要介绍一下，在没有VPS的情况下，如何更方便的配置自己的持续集成的博客。</p>\n<h1 id=\"好处\"><a href=\"#好处\" class=\"headerlink\" title=\"好处\"></a>好处</h1><ul>\n<li>方便：只需要一次配置，便省去了每一次编辑文档后，都需要进行<code>hexo d -g</code>的麻烦，更不必说文章增多之后渲染时间还会增长。</li>\n<li>稳定：这个是最近才发现的，Github被搞了之后，很多人反映不能更新博客了，使用<code>Travis CI</code>，你只要想办法提交一个小md文档，就能进行构建。如果自己手动构建，只要一个文件上传失败，前面的工作都白费了。</li>\n<li>快捷：即使是出差在外，只要能编辑Markdown，就可以撰写博客，使得Hexo拥有类似于WP一致的体验~</li>\n<li>协作：博客的构建完全交由<code>Travis CI</code>进行，所以完全可以通过<code>Hexo</code>+<code>git</code>构建一个多人协作的博客平台。实际上，Hexo的<a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">官网</a>正是这样构建的。</li>\n</ul>\n<h1 id=\"Travis-CI介绍\"><a href=\"#Travis-CI介绍\" class=\"headerlink\" title=\"Travis CI介绍\"></a>Travis CI介绍</h1><blockquote>\n<p>Travis CI是在软件开发领域中的一个在线的，分布式的持续集成服务，用来构建及测试在GitHub托管的代码。这个软件的代码同时也是开源的，可以在GitHub上下载到，尽管开发者当前并不推荐在闭源项目中单独使用它。 它提供了多种编程语言的支持，包括Ruby，JavaScript，Java，Scala，PHP，Haskell和Erlang在内的多种语言。许多知名的开源项目使用它来在每次提交的时候进行构建测试，比如Ruby on Rails，Ruby和Node.js。 2012年，Travis CI 决定进行募资以支持后续的开发，在这次募资活动中，许多重量级的科技公司给予了资助。</p>\n</blockquote>\n<p>需要注意的是几个特性：</p>\n<ul>\n<li>只支持Github</li>\n<li>支持JavaScript</li>\n<li>开源，免费</li>\n</ul>\n<p>然后介绍一下它的原理： Travis CI会在你每一次提交之后生成一个虚拟机来执行你事先安排好的build任务，你可以调整这个虚拟机的软件环境，甚至能执行<code>sudo</code>来进行<code>apt-get install</code>。</p>\n<h1 id=\"Travis-CI配置\"><a href=\"#Travis-CI配置\" class=\"headerlink\" title=\"Travis CI配置\"></a>Travis CI配置</h1><p>我们知道，Hexo的命令非常简单，一个<code>hexo d -g</code>就可以搞定。困难之处在于，Travis CI并没有对你的库进行push操作的权限。如果直接将私钥放在自己的开源库之中，这无异于将自己的代码库提交权限开放给了所有的Github使用者。所以，为了保护自己，我们需要采取一些配置操作。</p>\n<p><em>感谢Hexo作者tommy351提供的操作流程，原文可见于用 Travis CI 自動部署網站到 GitHub</em></p>\n<h2 id=\"Travis-CI使用SSH-连接GitHub\"><a href=\"#Travis-CI使用SSH-连接GitHub\" class=\"headerlink\" title=\"Travis CI使用SSH 连接GitHub\"></a>Travis CI使用SSH 连接GitHub</h2><h3 id=\"生成SSH-Key\"><a href=\"#生成SSH-Key\" class=\"headerlink\" title=\"生成SSH Key\"></a>生成SSH Key</h3><p>参见<a href=\"http://xuanwo.org/2015/02/07/generate-a-ssh-key/\" target=\"_blank\" rel=\"external\">使用Github SSH Key以免去Hexo部署时输入密码</a> 需要注意的是，这个SSH key不应成为你账号的全局SSH key<em>（因为这样Travis CI就获得了你所有代码库的提交权限，这是不正确的）</em>，而应该添加至<a href=\"https://github.com/username/ropename/settings/keys\" target=\"_blank\" rel=\"external\">https://github.com/username/ropename/settings/keys</a> ，这样，你就控制了Travis CI的权限。</p>\n<p>###加密私钥</p>\n<p>下面的操作需要事先配置好gem环境，如果没有可以尝试使用<a href=\"http://xuanwo.org/2014/08/07/Cloud9/\" target=\"_blank\" rel=\"external\">强大且配置项丰富的在线IDE应用——Cloud9</a>。</p>\n<h3 id=\"安装Travis-CI的命令行工具\"><a href=\"#安装Travis-CI的命令行工具\" class=\"headerlink\" title=\"安装Travis CI的命令行工具\"></a>安装Travis CI的命令行工具</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gem install travis <span class=\"comment\"># 安装travis</span></div></pre></td></tr></table></figure>\n<h3 id=\"登陆Travis-CI\"><a href=\"#登陆Travis-CI\" class=\"headerlink\" title=\"登陆Travis CI\"></a>登陆Travis CI</h3><p>需要输入Github账号和密码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">travis login --auto</div></pre></td></tr></table></figure>\n<h3 id=\"加密私钥并上传至Travis\"><a href=\"#加密私钥并上传至Travis\" class=\"headerlink\" title=\"加密私钥并上传至Travis\"></a>加密私钥并上传至Travis</h3><p>正确生成后你会得到两个文件，一个叫<code>ssh_key</code>，一个叫<code>ssh_key.pub</code>。刚才我们将<code>ssh_key.pub</code>添加到了github，下面我们要加密<code>ssh_key</code>这个私钥并且上传到Travis。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">travis encrypt-file ssh_key --add</div></pre></td></tr></table></figure>\n<p>然后Travis的客户端会自动检测当前目录中的git信息，并且添加到<code>.travis.yml</code>中去。在进行此步操作前，目录下要先存在<code>.travis.yml</code>文件，否则会报错。</p>\n<h3 id=\"指定SSH设置\"><a href=\"#指定SSH设置\" class=\"headerlink\" title=\"指定SSH设置\"></a>指定SSH设置</h3><p>在当前目录下新建文件<code>ssh_config</code>，内容为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host github.com</div><div class=\"line\">  User git</div><div class=\"line\">  StrictHostKeyChecking no</div><div class=\"line\">  IdentityFile ~/.ssh/id_rsa</div><div class=\"line\">  IdentitiesOnly yes</div></pre></td></tr></table></figure>\n<p>然后指定openssl解密后的生成位置，修改Travis自动插入的解密指令(不要照抄，注意修改密钥)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">- openssl aes-256-cbc -K <span class=\"variable\">$encrypted_xxxxxxxxxx_key</span> -iv <span class=\"variable\">$encrypted_xxxxxxxxxx_iv</span></div><div class=\"line\">  -<span class=\"keyword\">in</span> travis.enc -out ~/.ssh/id_rsa -d</div></pre></td></tr></table></figure>\n<h3 id=\"修改目录权限\"><a href=\"#修改目录权限\" class=\"headerlink\" title=\"修改目录权限\"></a>修改目录权限</h3><p>紧跟那条解密指令，换行输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- chmod 600 ~/.ssh/id_rsa</div></pre></td></tr></table></figure>\n<p>注意yml格式，短杠后面的空格不能省略。</p>\n<h3 id=\"将密钥加入系统\"><a href=\"#将密钥加入系统\" class=\"headerlink\" title=\"将密钥加入系统\"></a>将密钥加入系统</h3><p>紧跟上一步操作，换行输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">- <span class=\"built_in\">eval</span> $(ssh-agent)</div><div class=\"line\">- ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>\n<h3 id=\"修改git信息\"><a href=\"#修改git信息\" class=\"headerlink\" title=\"修改git信息\"></a>修改git信息</h3><p>将之前创建的ssh_config复制到Travis的虚拟机中去，输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- cp ssh_config ~/.ssh/config</div></pre></td></tr></table></figure>\n<p>然后指定git使用者信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">- git config --global user.name <span class=\"string\">\"username\"</span></div><div class=\"line\">- git config --global user.email username@example.com</div></pre></td></tr></table></figure>\n<h3 id=\"Build配置\"><a href=\"#Build配置\" class=\"headerlink\" title=\"Build配置\"></a>Build配置</h3><p>之前的所有操作都只是为了让Travis CI拥有push权限，下面我们开始进入到真正的Build配置当中。 之前我们用到了一个名为<code>.travis.yml</code>的文件，跟build有关的所有设置都在这个文件里面，下面的操作都在这个文件当中进行。</p>\n<h3 id=\"指定环境\"><a href=\"#指定环境\" class=\"headerlink\" title=\"指定环境\"></a>指定环境</h3><p>在文件中添加如下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">language: node_js</div><div class=\"line\"></div><div class=\"line\">node_js:</div><div class=\"line\">- <span class=\"string\">'0.10'</span>   //指定使用node.js最新的稳定版0.10</div></pre></td></tr></table></figure>\n<h3 id=\"指定分支\"><a href=\"#指定分支\" class=\"headerlink\" title=\"指定分支\"></a>指定分支</h3><p>在文件中添加如下代码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">branches:</div><div class=\"line\">  only:</div><div class=\"line\">  - blog    //这个分支应当使用自己的源文件分支</div></pre></td></tr></table></figure>\n<p>差点忘了讲- -，本方案只适用于用github来托管自己自己的hexo目录的用户。这里的分支应该使用包含有.md文档的那个分支。</p>\n<h3 id=\"Hexo配置\"><a href=\"#Hexo配置\" class=\"headerlink\" title=\"Hexo配置\"></a>Hexo配置</h3><p>首先在虚拟机中安装Hexo：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">install:</div><div class=\"line\">- npm install hexo-cli -g</div><div class=\"line\">- npm install hexo --save</div><div class=\"line\">- npm install</div></pre></td></tr></table></figure>\n<p>然后执行Hexo的渲染操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">script:</div><div class=\"line\">- hexo clean   //分开写，方便调试可能出现的错误</div><div class=\"line\">- hexo d</div><div class=\"line\">- hexo g</div></pre></td></tr></table></figure>\n<p>到这里，你的Travis CI的持续集成已经配置完毕了，最后的<code>.travis.yml</code>文件内容可以参考如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">branches:</div><div class=\"line\">  only:</div><div class=\"line\">  - blog <span class=\"comment\"># 这里是你监视的分支，只有blog分支更改才触发自动部署</span></div><div class=\"line\"></div><div class=\"line\">language: node_js</div><div class=\"line\"></div><div class=\"line\">sudo: <span class=\"literal\">false</span></div><div class=\"line\"></div><div class=\"line\">node_js:</div><div class=\"line\">- <span class=\"string\">'0.12'</span> </div><div class=\"line\"></div><div class=\"line\">before_install:</div><div class=\"line\">- openssl aes-256-cbc -K <span class=\"variable\">$encrypted_xxxxxxxxx_key</span> -iv <span class=\"variable\">$encrypted_xxxxxxx_iv</span></div><div class=\"line\">  -<span class=\"keyword\">in</span> doc/travis.enc -out ~/.ssh/id_rsa -d</div><div class=\"line\">- chmod 600 ~/.ssh/id_rsa</div><div class=\"line\">- <span class=\"built_in\">eval</span> $(ssh-agent)</div><div class=\"line\">- ssh-add ~/.ssh/id_rsa</div><div class=\"line\">- cp doc/ssh_config ~/.ssh/config</div><div class=\"line\">- git config --global user.name <span class=\"string\">\"yourname\"</span></div><div class=\"line\">- git config --global user.email youremail</div><div class=\"line\">- git <span class=\"built_in\">clone</span> -b master git@github.com:yourname/yourrepo.git .deploy_git</div><div class=\"line\"></div><div class=\"line\">install:</div><div class=\"line\">- npm install hexo-cli -g</div><div class=\"line\">- npm install</div><div class=\"line\">- npm install hexo-generator-feed --save</div><div class=\"line\">- npm install hexo-generator-sitemap --save</div><div class=\"line\">- npm install hexo-deployer-git --save</div><div class=\"line\"></div><div class=\"line\">script:</div><div class=\"line\">- hexo clean</div><div class=\"line\">- hexo g</div><div class=\"line\">- hexo d</div></pre></td></tr></table></figure>\n<h2 id=\"Travis-CI使用Token-连接GitHub\"><a href=\"#Travis-CI使用Token-连接GitHub\" class=\"headerlink\" title=\"Travis CI使用Token 连接GitHub\"></a>Travis CI使用Token 连接GitHub</h2><ul>\n<li><h3 id=\"安装travis\"><a href=\"#安装travis\" class=\"headerlink\" title=\"安装travis\"></a><strong>安装travis</strong></h3><p>Travis安装需要Ruby环境，所有需要安装Ruby,并且需要安装rubygems插件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装travis</span></div><div class=\"line\">gem isntall travis</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"新建配置文件\"><a href=\"#新建配置文件\" class=\"headerlink\" title=\"新建配置文件\"></a>新建配置文件</h3><p>首先打开博客项目文件夹，在项目根目录新建<code>.travis.yml</code>配置文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> 博客项目文件夹根目录</div><div class=\"line\">$ touch .travis.yml</div></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"登录travis\"><a href=\"#登录travis\" class=\"headerlink\" title=\"登录travis\"></a><strong>登录travis</strong></h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">travis login --auto</div></pre></td></tr></table></figure>\n<p>然后会提示输入github的用户名和密码。</p>\n</li>\n<li><h3 id=\"新建变量\"><a href=\"#新建变量\" class=\"headerlink\" title=\"新建变量\"></a><strong>新建变量</strong></h3><p>在项目根目录下执行:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 这里的 REPO_TOKEN 是变量名,在后面的配置文件中会用到</span></div><div class=\"line\"><span class=\"comment\"># TOKEN 是上面github生成的Token</span></div><div class=\"line\">travis encrypt <span class=\"string\">'REPO_TOKEN=&lt;TOKEN&gt;'</span> --add</div></pre></td></tr></table></figure>\n<p>此操作会在<code>.travis.yml</code>文件中添加下面的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">env:</div><div class=\"line\">global:</div><div class=\"line\">  secure: fxBE17yzFhC2+FjwVLYbgIhggyfliv3dFCDozTJD7U3n</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"编辑配置文件\"><a href=\"#编辑配置文件\" class=\"headerlink\" title=\"编辑配置文件\"></a>编辑配置文件</h3><p>​      打开Travis配置文件<strong>.travis.yml</strong>，添加如下信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">language: node_js</div><div class=\"line\">node_js:</div><div class=\"line\">- <span class=\"string\">\"4\"</span>  <span class=\"comment\"># nodejs的版本</span></div><div class=\"line\">branches:</div><div class=\"line\">  only:</div><div class=\"line\">  - dev  <span class=\"comment\"># 设置自动化部署的源码分支</span></div><div class=\"line\">env:</div><div class=\"line\">  global:</div><div class=\"line\">    secure: [加密后的Token]</div><div class=\"line\">before_install:</div><div class=\"line\">- <span class=\"built_in\">export</span> TZ=<span class=\"string\">'Asia/Shanghai'</span>  <span class=\"comment\"># 设置时区</span></div><div class=\"line\">- npm install -g hexo</div><div class=\"line\">- npm install -g hexo-cli</div><div class=\"line\">before_script:</div><div class=\"line\"><span class=\"comment\"># 设置github账户信息</span></div><div class=\"line\">- git config --global user.name <span class=\"string\">\"SeayXu\"</span> <span class=\"comment\">#设置github用户名</span></div><div class=\"line\">- git config --global user.email SeayXu@163.com <span class=\"comment\">#设置github用户邮箱</span></div><div class=\"line\"><span class=\"comment\"># github仓库操作</span></div><div class=\"line\">- sed -i<span class=\"string\">''</span> <span class=\"string\">\"s~git@github.com:SeayXu/seayxu.github.io.git~https://<span class=\"variable\">$&#123;REPO_TOKEN&#125;</span>:x-oauth-basic@github.com/SeayXu/seayxu.github.io.git~\"</span> _config.yml</div><div class=\"line\"><span class=\"comment\"># 安装依赖组件</span></div><div class=\"line\">install:</div><div class=\"line\">- npm install</div><div class=\"line\"><span class=\"comment\"># 执行的命令</span></div><div class=\"line\">script:</div><div class=\"line\">- hexo clean</div><div class=\"line\">- hexo generate</div><div class=\"line\"><span class=\"comment\"># 执行的成功后执行 </span></div><div class=\"line\">after_success:</div><div class=\"line\">- hexo deploy</div></pre></td></tr></table></figure>\n<p>完整配置文件可以<a href=\"https://github.com/SeayXu/seayxu.github.io/blob/dev/.travis.yml~~\" target=\"_blank\" rel=\"external\">参考这个</a>。</p>\n<p>转载备用，这个我没配置，因为手上没Lunix系统，等回头装个的虚拟机尝试下，我是用AppVeyor。</p>\n"},{"title":"使用Travis自动部署hexo","date":"2017-08-19T19:22:09.000Z","_content":"转载自http://blog.csdn.net/xuezhisdc/article/details/53130423\n## 新建Personal Access Token\n\n1. 点击右上角头像旁边的三角，在菜单中点击“Setting”，进入设置页面。 \n   ![img](http://img.zhangxuezhi.com/v90uk9inuvo8yjywxj9gm5hjb5.png)\n2. 点击左侧栏的最下面的“Personal access tokens”，创建Personal access tokens。 \n   ![img](http://img.zhangxuezhi.com/syvhuszdqc8zoe5hncv99r8ntg.png)\n3. 点击右上角的“Generate new token”，输入用户密码，进入“New personal access token”页面。 \n   ![img](http://img.zhangxuezhi.com/183vnbiixxadzm7bp75458dc59.png)\n4. 设置Token description（其实就是名称），选择相应的权限，如下图所示。 \n   ![img](http://img.zhangxuezhi.com/brnxrllts6783vig9u5o0903k5.png)\n5. 点击“Generate token”按钮，生成Personal access tokens。如下图中红线标注的部分。**注意：这行token只会在刚刚创建完成后显示一次，以后不再显示**。因此，复制并保存到本地。 \n   ![img](http://img.zhangxuezhi.com/spb4526esm5qmhvocnn24f0i19.png)\n\n## 配置Travis CI\n\n### 登录并配置Travis CI\n\n- Travis CI是目前新兴的开源持续集成构建项目。可以直接使用GitHub账号登录。\n- 将鼠标放在用户名上，在弹出的菜单中点击“Accounts”，将会显示你在GitHub上的仓库。如下图所示。 \n  ![图片名称](http://img.zhangxuezhi.com/yvrv0pcjjw1p29x879ohfhm0od.png)\n- 找到自己的博客项目，点击X号，将其变成√号。再点击右侧的齿轮，进入该仓库的配置页面。 \n  ![img](http://img.zhangxuezhi.com/ylz1rd42kfubl160tqvemhgs0p.png)\n- 在项目的设置中开启Build only if .travis.yml is present这一项。如下图所示。 \n  ![img](http://img.zhangxuezhi.com/vw68mu4fmciss8pkc6vgxu1t9b.png)\n\n### 本地安装Travis\n\n- 首先安装Ruby，直接官网下载，双击安装就OK了。\n- 在Windows下，安装travis之前，需要解决一个问题：**SSL证书问题**，否则不能成功安装。详情请点击该链接：[参考教程](http://blog.csdn.net/chancein007/article/details/52940032)。\n- 修复好上述问题后，执行下面的命令安装travis。\n\n```bash\n# 安装travis\ngem isntall travis1212\n```\n\n### 创建并修改配置文件\n\n1. 打开博客项目文件夹，在项目根目录新建.travis.yml配置文件。\n\n```bash\ncd 博客项目文件夹根目录\ntouch .travis.yml1212\n```\n\n1. 执行下面的命令，加密上面生成的Personal access tokens，并添加到.travis.yml配置文件。\n\n```bash\n# 这里的 REPO_TOKEN 是变量名,在后面的配置文件中会用到\n# TOKEN 是上面github生成的Token\ntravis encrypt 'REPO_TOKEN=<TOKEN>' --add123123\n```\n\n1. 上述命令指向完后，.travis.yml配置文件的内容如下所示。\n\n```bash\nenv:\n  global:\n    secure: F/gYu+bVe3aWs6YnuB5PNZLEmHH4CGf0najk8JI3/N+SFL0TH8tyYg+O1sXR3EIg.....省略.....iwr5HQG/G3fdL4JcXiAJIm/iH9ndDyGV5EGR1CmseNGNWrwnRZ7tlKE=123123\n```\n\n1. 使用本地编辑器打开.travis.yml配置文件，将其修改成如下所示的内容。**注意：有些内容是你自己的!!!**\n\n```bash\nlanguage: node_js\nnode_js:\n- \"4\"  # nodejs的版本\nbranches:\n  only:\n  - dev  # 设置自动化部署的源码分支\n\n# ------------------------------------------------\n# 下面是你的Token加密信息，不要替换\n# ------------------------------------------------\nenv:\n  global:  \n    secure: F/gYu+bVe3aWs6Yn.....省略..../iH9ndDyGV5EGR1CmseNGNWrwnRZ7tlKE=\n\nbefore_install:\n- export TZ='Asia/Shanghai'  \n- npm install -g hexo\n- npm install -g hexo-cli \nbefore_script:\n# ------------------------------------------------\n# 设置github账户信息 注意修改成自己的信息\n# ------------------------------------------------\n- git config --global user.name \"xuezhisd\"\n- git config --global user.email xuezhi@126.com \n# ------------------------------------------------\n# github仓库操作  注意将仓库修改成自己的\n# ------------------------------------------------\n- sed -i'' \"s~git@github.com:xuezhisd/xuezhisd.github.io.git~https://${REPO_TOKEN}:x-oauth-basic@github.com/xuezhisd/xuezhisd.github.io.git~\" _config.yml\n# 安装依赖组件\ninstall:\n- npm install\n# 执行的命令\nscript:\n- hexo clean\n- hexo generate\n# 执行的成功后执行 \nafter_success:\n- hexo deploy12345678910111213141516171819202122232425262728293031323334353637381234567891011121314151617181920212223242526272829303132333435363738\n```\n\n```\n至此，Travis CI已经配置完成了。\n```\n\n## 创建仓库，推送到GitHub\n\n- 新建仓库blog。\n\n```bash\ngit init blog\ncd blog1212\n```\n\n- 将原来博客目录下的以下内容复制到blog文件夹中。 \n  ![img](http://img.zhangxuezhi.com/747d3iy0nq4a39mdnpdx57c51a.png)\n- 修改.gitignore文件，取消对node_modules文件夹的忽略。（即删除对应的行）\n- 关联GitHub上的远程仓库。\n\n```bash\n# 将github仓库改为自己的博客仓库\ngit remote add origin git@github.com:xuezhisd/xuezhisd.github.io.git1212\n```\n\n- 提交本地修改，推送到GitHub上。\n\n```bash\n# 添加文件到暂存区\ngit add .\n# 提交修改\ngit commit -m \"test travis\"\n# 推送至远程仓库的dev分支\ngit push -u origin dev123456123456\n```\n\n- push本地的代码至远程仓库之后，在[https://travis-ci.org](https://travis-ci.org/) 后台查看相关情况。如果如下图所示，就代表成功了。 \n  ![图片名称](http://img.zhangxuezhi.com/pkv15sreco6fl4g85v8lzz4uqh.png)","source":"_posts/使用Travis自动部署hexo.md","raw":"---\ntitle: 使用Travis自动部署hexo\ntag: \n - Travis\n - hexo\ncategories: 网络技术\ndate: 2017-08-20 03:22:09\n---\n转载自http://blog.csdn.net/xuezhisdc/article/details/53130423\n## 新建Personal Access Token\n\n1. 点击右上角头像旁边的三角，在菜单中点击“Setting”，进入设置页面。 \n   ![img](http://img.zhangxuezhi.com/v90uk9inuvo8yjywxj9gm5hjb5.png)\n2. 点击左侧栏的最下面的“Personal access tokens”，创建Personal access tokens。 \n   ![img](http://img.zhangxuezhi.com/syvhuszdqc8zoe5hncv99r8ntg.png)\n3. 点击右上角的“Generate new token”，输入用户密码，进入“New personal access token”页面。 \n   ![img](http://img.zhangxuezhi.com/183vnbiixxadzm7bp75458dc59.png)\n4. 设置Token description（其实就是名称），选择相应的权限，如下图所示。 \n   ![img](http://img.zhangxuezhi.com/brnxrllts6783vig9u5o0903k5.png)\n5. 点击“Generate token”按钮，生成Personal access tokens。如下图中红线标注的部分。**注意：这行token只会在刚刚创建完成后显示一次，以后不再显示**。因此，复制并保存到本地。 \n   ![img](http://img.zhangxuezhi.com/spb4526esm5qmhvocnn24f0i19.png)\n\n## 配置Travis CI\n\n### 登录并配置Travis CI\n\n- Travis CI是目前新兴的开源持续集成构建项目。可以直接使用GitHub账号登录。\n- 将鼠标放在用户名上，在弹出的菜单中点击“Accounts”，将会显示你在GitHub上的仓库。如下图所示。 \n  ![图片名称](http://img.zhangxuezhi.com/yvrv0pcjjw1p29x879ohfhm0od.png)\n- 找到自己的博客项目，点击X号，将其变成√号。再点击右侧的齿轮，进入该仓库的配置页面。 \n  ![img](http://img.zhangxuezhi.com/ylz1rd42kfubl160tqvemhgs0p.png)\n- 在项目的设置中开启Build only if .travis.yml is present这一项。如下图所示。 \n  ![img](http://img.zhangxuezhi.com/vw68mu4fmciss8pkc6vgxu1t9b.png)\n\n### 本地安装Travis\n\n- 首先安装Ruby，直接官网下载，双击安装就OK了。\n- 在Windows下，安装travis之前，需要解决一个问题：**SSL证书问题**，否则不能成功安装。详情请点击该链接：[参考教程](http://blog.csdn.net/chancein007/article/details/52940032)。\n- 修复好上述问题后，执行下面的命令安装travis。\n\n```bash\n# 安装travis\ngem isntall travis1212\n```\n\n### 创建并修改配置文件\n\n1. 打开博客项目文件夹，在项目根目录新建.travis.yml配置文件。\n\n```bash\ncd 博客项目文件夹根目录\ntouch .travis.yml1212\n```\n\n1. 执行下面的命令，加密上面生成的Personal access tokens，并添加到.travis.yml配置文件。\n\n```bash\n# 这里的 REPO_TOKEN 是变量名,在后面的配置文件中会用到\n# TOKEN 是上面github生成的Token\ntravis encrypt 'REPO_TOKEN=<TOKEN>' --add123123\n```\n\n1. 上述命令指向完后，.travis.yml配置文件的内容如下所示。\n\n```bash\nenv:\n  global:\n    secure: F/gYu+bVe3aWs6YnuB5PNZLEmHH4CGf0najk8JI3/N+SFL0TH8tyYg+O1sXR3EIg.....省略.....iwr5HQG/G3fdL4JcXiAJIm/iH9ndDyGV5EGR1CmseNGNWrwnRZ7tlKE=123123\n```\n\n1. 使用本地编辑器打开.travis.yml配置文件，将其修改成如下所示的内容。**注意：有些内容是你自己的!!!**\n\n```bash\nlanguage: node_js\nnode_js:\n- \"4\"  # nodejs的版本\nbranches:\n  only:\n  - dev  # 设置自动化部署的源码分支\n\n# ------------------------------------------------\n# 下面是你的Token加密信息，不要替换\n# ------------------------------------------------\nenv:\n  global:  \n    secure: F/gYu+bVe3aWs6Yn.....省略..../iH9ndDyGV5EGR1CmseNGNWrwnRZ7tlKE=\n\nbefore_install:\n- export TZ='Asia/Shanghai'  \n- npm install -g hexo\n- npm install -g hexo-cli \nbefore_script:\n# ------------------------------------------------\n# 设置github账户信息 注意修改成自己的信息\n# ------------------------------------------------\n- git config --global user.name \"xuezhisd\"\n- git config --global user.email xuezhi@126.com \n# ------------------------------------------------\n# github仓库操作  注意将仓库修改成自己的\n# ------------------------------------------------\n- sed -i'' \"s~git@github.com:xuezhisd/xuezhisd.github.io.git~https://${REPO_TOKEN}:x-oauth-basic@github.com/xuezhisd/xuezhisd.github.io.git~\" _config.yml\n# 安装依赖组件\ninstall:\n- npm install\n# 执行的命令\nscript:\n- hexo clean\n- hexo generate\n# 执行的成功后执行 \nafter_success:\n- hexo deploy12345678910111213141516171819202122232425262728293031323334353637381234567891011121314151617181920212223242526272829303132333435363738\n```\n\n```\n至此，Travis CI已经配置完成了。\n```\n\n## 创建仓库，推送到GitHub\n\n- 新建仓库blog。\n\n```bash\ngit init blog\ncd blog1212\n```\n\n- 将原来博客目录下的以下内容复制到blog文件夹中。 \n  ![img](http://img.zhangxuezhi.com/747d3iy0nq4a39mdnpdx57c51a.png)\n- 修改.gitignore文件，取消对node_modules文件夹的忽略。（即删除对应的行）\n- 关联GitHub上的远程仓库。\n\n```bash\n# 将github仓库改为自己的博客仓库\ngit remote add origin git@github.com:xuezhisd/xuezhisd.github.io.git1212\n```\n\n- 提交本地修改，推送到GitHub上。\n\n```bash\n# 添加文件到暂存区\ngit add .\n# 提交修改\ngit commit -m \"test travis\"\n# 推送至远程仓库的dev分支\ngit push -u origin dev123456123456\n```\n\n- push本地的代码至远程仓库之后，在[https://travis-ci.org](https://travis-ci.org/) 后台查看相关情况。如果如下图所示，就代表成功了。 \n  ![图片名称](http://img.zhangxuezhi.com/pkv15sreco6fl4g85v8lzz4uqh.png)","slug":"使用Travis自动部署hexo","published":1,"updated":"2017-08-20T05:46:11.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kfg8s3000oygkv3qcc5p3p","content":"<p>转载自<a href=\"http://blog.csdn.net/xuezhisdc/article/details/53130423\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/xuezhisdc/article/details/53130423</a></p>\n<h2 id=\"新建Personal-Access-Token\"><a href=\"#新建Personal-Access-Token\" class=\"headerlink\" title=\"新建Personal Access Token\"></a>新建Personal Access Token</h2><ol>\n<li>点击右上角头像旁边的三角，在菜单中点击“Setting”，进入设置页面。<br><img src=\"http://img.zhangxuezhi.com/v90uk9inuvo8yjywxj9gm5hjb5.png\" alt=\"img\"></li>\n<li>点击左侧栏的最下面的“Personal access tokens”，创建Personal access tokens。<br><img src=\"http://img.zhangxuezhi.com/syvhuszdqc8zoe5hncv99r8ntg.png\" alt=\"img\"></li>\n<li>点击右上角的“Generate new token”，输入用户密码，进入“New personal access token”页面。<br><img src=\"http://img.zhangxuezhi.com/183vnbiixxadzm7bp75458dc59.png\" alt=\"img\"></li>\n<li>设置Token description（其实就是名称），选择相应的权限，如下图所示。<br><img src=\"http://img.zhangxuezhi.com/brnxrllts6783vig9u5o0903k5.png\" alt=\"img\"></li>\n<li>点击“Generate token”按钮，生成Personal access tokens。如下图中红线标注的部分。<strong>注意：这行token只会在刚刚创建完成后显示一次，以后不再显示</strong>。因此，复制并保存到本地。<br><img src=\"http://img.zhangxuezhi.com/spb4526esm5qmhvocnn24f0i19.png\" alt=\"img\"></li>\n</ol>\n<h2 id=\"配置Travis-CI\"><a href=\"#配置Travis-CI\" class=\"headerlink\" title=\"配置Travis CI\"></a>配置Travis CI</h2><h3 id=\"登录并配置Travis-CI\"><a href=\"#登录并配置Travis-CI\" class=\"headerlink\" title=\"登录并配置Travis CI\"></a>登录并配置Travis CI</h3><ul>\n<li>Travis CI是目前新兴的开源持续集成构建项目。可以直接使用GitHub账号登录。</li>\n<li>将鼠标放在用户名上，在弹出的菜单中点击“Accounts”，将会显示你在GitHub上的仓库。如下图所示。<br><img src=\"http://img.zhangxuezhi.com/yvrv0pcjjw1p29x879ohfhm0od.png\" alt=\"图片名称\"></li>\n<li>找到自己的博客项目，点击X号，将其变成√号。再点击右侧的齿轮，进入该仓库的配置页面。<br><img src=\"http://img.zhangxuezhi.com/ylz1rd42kfubl160tqvemhgs0p.png\" alt=\"img\"></li>\n<li>在项目的设置中开启Build only if .travis.yml is present这一项。如下图所示。<br><img src=\"http://img.zhangxuezhi.com/vw68mu4fmciss8pkc6vgxu1t9b.png\" alt=\"img\"></li>\n</ul>\n<h3 id=\"本地安装Travis\"><a href=\"#本地安装Travis\" class=\"headerlink\" title=\"本地安装Travis\"></a>本地安装Travis</h3><ul>\n<li>首先安装Ruby，直接官网下载，双击安装就OK了。</li>\n<li>在Windows下，安装travis之前，需要解决一个问题：<strong>SSL证书问题</strong>，否则不能成功安装。详情请点击该链接：<a href=\"http://blog.csdn.net/chancein007/article/details/52940032\" target=\"_blank\" rel=\"external\">参考教程</a>。</li>\n<li>修复好上述问题后，执行下面的命令安装travis。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装travis</span></div><div class=\"line\">gem isntall travis1212</div></pre></td></tr></table></figure>\n<h3 id=\"创建并修改配置文件\"><a href=\"#创建并修改配置文件\" class=\"headerlink\" title=\"创建并修改配置文件\"></a>创建并修改配置文件</h3><ol>\n<li>打开博客项目文件夹，在项目根目录新建.travis.yml配置文件。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> 博客项目文件夹根目录</div><div class=\"line\">touch .travis.yml1212</div></pre></td></tr></table></figure>\n<ol>\n<li>执行下面的命令，加密上面生成的Personal access tokens，并添加到.travis.yml配置文件。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 这里的 REPO_TOKEN 是变量名,在后面的配置文件中会用到</span></div><div class=\"line\"><span class=\"comment\"># TOKEN 是上面github生成的Token</span></div><div class=\"line\">travis encrypt <span class=\"string\">'REPO_TOKEN=&lt;TOKEN&gt;'</span> --add123123</div></pre></td></tr></table></figure>\n<ol>\n<li>上述命令指向完后，.travis.yml配置文件的内容如下所示。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">env:</div><div class=\"line\">  global:</div><div class=\"line\">    secure: F/gYu+bVe3aWs6YnuB5PNZLEmHH4CGf0najk8JI3/N+SFL0TH8tyYg+O1sXR3EIg.....省略.....iwr5HQG/G3fdL4JcXiAJIm/iH9ndDyGV5EGR1CmseNGNWrwnRZ7tlKE=123123</div></pre></td></tr></table></figure>\n<ol>\n<li>使用本地编辑器打开.travis.yml配置文件，将其修改成如下所示的内容。<strong>注意：有些内容是你自己的!!!</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">language: node_js</div><div class=\"line\">node_js:</div><div class=\"line\">- <span class=\"string\">\"4\"</span>  <span class=\"comment\"># nodejs的版本</span></div><div class=\"line\">branches:</div><div class=\"line\">  only:</div><div class=\"line\">  - dev  <span class=\"comment\"># 设置自动化部署的源码分支</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ------------------------------------------------</span></div><div class=\"line\"><span class=\"comment\"># 下面是你的Token加密信息，不要替换</span></div><div class=\"line\"><span class=\"comment\"># ------------------------------------------------</span></div><div class=\"line\">env:</div><div class=\"line\">  global:  </div><div class=\"line\">    secure: F/gYu+bVe3aWs6Yn.....省略..../iH9ndDyGV5EGR1CmseNGNWrwnRZ7tlKE=</div><div class=\"line\"></div><div class=\"line\">before_install:</div><div class=\"line\">- <span class=\"built_in\">export</span> TZ=<span class=\"string\">'Asia/Shanghai'</span>  </div><div class=\"line\">- npm install -g hexo</div><div class=\"line\">- npm install -g hexo-cli </div><div class=\"line\">before_script:</div><div class=\"line\"><span class=\"comment\"># ------------------------------------------------</span></div><div class=\"line\"><span class=\"comment\"># 设置github账户信息 注意修改成自己的信息</span></div><div class=\"line\"><span class=\"comment\"># ------------------------------------------------</span></div><div class=\"line\">- git config --global user.name <span class=\"string\">\"xuezhisd\"</span></div><div class=\"line\">- git config --global user.email xuezhi@126.com </div><div class=\"line\"><span class=\"comment\"># ------------------------------------------------</span></div><div class=\"line\"><span class=\"comment\"># github仓库操作  注意将仓库修改成自己的</span></div><div class=\"line\"><span class=\"comment\"># ------------------------------------------------</span></div><div class=\"line\">- sed -i<span class=\"string\">''</span> <span class=\"string\">\"s~git@github.com:xuezhisd/xuezhisd.github.io.git~https://<span class=\"variable\">$&#123;REPO_TOKEN&#125;</span>:x-oauth-basic@github.com/xuezhisd/xuezhisd.github.io.git~\"</span> _config.yml</div><div class=\"line\"><span class=\"comment\"># 安装依赖组件</span></div><div class=\"line\">install:</div><div class=\"line\">- npm install</div><div class=\"line\"><span class=\"comment\"># 执行的命令</span></div><div class=\"line\">script:</div><div class=\"line\">- hexo clean</div><div class=\"line\">- hexo generate</div><div class=\"line\"><span class=\"comment\"># 执行的成功后执行 </span></div><div class=\"line\">after_success:</div><div class=\"line\">- hexo deploy12345678910111213141516171819202122232425262728293031323334353637381234567891011121314151617181920212223242526272829303132333435363738</div></pre></td></tr></table></figure>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">至此，Travis <span class=\"keyword\">CI</span>已经配置完成了。</div></pre></td></tr></table></figure>\n<h2 id=\"创建仓库，推送到GitHub\"><a href=\"#创建仓库，推送到GitHub\" class=\"headerlink\" title=\"创建仓库，推送到GitHub\"></a>创建仓库，推送到GitHub</h2><ul>\n<li>新建仓库blog。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init blog</div><div class=\"line\"><span class=\"built_in\">cd</span> blog1212</div></pre></td></tr></table></figure>\n<ul>\n<li>将原来博客目录下的以下内容复制到blog文件夹中。<br><img src=\"http://img.zhangxuezhi.com/747d3iy0nq4a39mdnpdx57c51a.png\" alt=\"img\"></li>\n<li>修改.gitignore文件，取消对node_modules文件夹的忽略。（即删除对应的行）</li>\n<li>关联GitHub上的远程仓库。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 将github仓库改为自己的博客仓库</span></div><div class=\"line\">git remote add origin git@github.com:xuezhisd/xuezhisd.github.io.git1212</div></pre></td></tr></table></figure>\n<ul>\n<li>提交本地修改，推送到GitHub上。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 添加文件到暂存区</span></div><div class=\"line\">git add .</div><div class=\"line\"><span class=\"comment\"># 提交修改</span></div><div class=\"line\">git commit -m <span class=\"string\">\"test travis\"</span></div><div class=\"line\"><span class=\"comment\"># 推送至远程仓库的dev分支</span></div><div class=\"line\">git push -u origin dev123456123456</div></pre></td></tr></table></figure>\n<ul>\n<li>push本地的代码至远程仓库之后，在<a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"external\">https://travis-ci.org</a> 后台查看相关情况。如果如下图所示，就代表成功了。<br><img src=\"http://img.zhangxuezhi.com/pkv15sreco6fl4g85v8lzz4uqh.png\" alt=\"图片名称\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>转载自<a href=\"http://blog.csdn.net/xuezhisdc/article/details/53130423\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/xuezhisdc/article/details/53130423</a></p>\n<h2 id=\"新建Personal-Access-Token\"><a href=\"#新建Personal-Access-Token\" class=\"headerlink\" title=\"新建Personal Access Token\"></a>新建Personal Access Token</h2><ol>\n<li>点击右上角头像旁边的三角，在菜单中点击“Setting”，进入设置页面。<br><img src=\"http://img.zhangxuezhi.com/v90uk9inuvo8yjywxj9gm5hjb5.png\" alt=\"img\"></li>\n<li>点击左侧栏的最下面的“Personal access tokens”，创建Personal access tokens。<br><img src=\"http://img.zhangxuezhi.com/syvhuszdqc8zoe5hncv99r8ntg.png\" alt=\"img\"></li>\n<li>点击右上角的“Generate new token”，输入用户密码，进入“New personal access token”页面。<br><img src=\"http://img.zhangxuezhi.com/183vnbiixxadzm7bp75458dc59.png\" alt=\"img\"></li>\n<li>设置Token description（其实就是名称），选择相应的权限，如下图所示。<br><img src=\"http://img.zhangxuezhi.com/brnxrllts6783vig9u5o0903k5.png\" alt=\"img\"></li>\n<li>点击“Generate token”按钮，生成Personal access tokens。如下图中红线标注的部分。<strong>注意：这行token只会在刚刚创建完成后显示一次，以后不再显示</strong>。因此，复制并保存到本地。<br><img src=\"http://img.zhangxuezhi.com/spb4526esm5qmhvocnn24f0i19.png\" alt=\"img\"></li>\n</ol>\n<h2 id=\"配置Travis-CI\"><a href=\"#配置Travis-CI\" class=\"headerlink\" title=\"配置Travis CI\"></a>配置Travis CI</h2><h3 id=\"登录并配置Travis-CI\"><a href=\"#登录并配置Travis-CI\" class=\"headerlink\" title=\"登录并配置Travis CI\"></a>登录并配置Travis CI</h3><ul>\n<li>Travis CI是目前新兴的开源持续集成构建项目。可以直接使用GitHub账号登录。</li>\n<li>将鼠标放在用户名上，在弹出的菜单中点击“Accounts”，将会显示你在GitHub上的仓库。如下图所示。<br><img src=\"http://img.zhangxuezhi.com/yvrv0pcjjw1p29x879ohfhm0od.png\" alt=\"图片名称\"></li>\n<li>找到自己的博客项目，点击X号，将其变成√号。再点击右侧的齿轮，进入该仓库的配置页面。<br><img src=\"http://img.zhangxuezhi.com/ylz1rd42kfubl160tqvemhgs0p.png\" alt=\"img\"></li>\n<li>在项目的设置中开启Build only if .travis.yml is present这一项。如下图所示。<br><img src=\"http://img.zhangxuezhi.com/vw68mu4fmciss8pkc6vgxu1t9b.png\" alt=\"img\"></li>\n</ul>\n<h3 id=\"本地安装Travis\"><a href=\"#本地安装Travis\" class=\"headerlink\" title=\"本地安装Travis\"></a>本地安装Travis</h3><ul>\n<li>首先安装Ruby，直接官网下载，双击安装就OK了。</li>\n<li>在Windows下，安装travis之前，需要解决一个问题：<strong>SSL证书问题</strong>，否则不能成功安装。详情请点击该链接：<a href=\"http://blog.csdn.net/chancein007/article/details/52940032\" target=\"_blank\" rel=\"external\">参考教程</a>。</li>\n<li>修复好上述问题后，执行下面的命令安装travis。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 安装travis</span></div><div class=\"line\">gem isntall travis1212</div></pre></td></tr></table></figure>\n<h3 id=\"创建并修改配置文件\"><a href=\"#创建并修改配置文件\" class=\"headerlink\" title=\"创建并修改配置文件\"></a>创建并修改配置文件</h3><ol>\n<li>打开博客项目文件夹，在项目根目录新建.travis.yml配置文件。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> 博客项目文件夹根目录</div><div class=\"line\">touch .travis.yml1212</div></pre></td></tr></table></figure>\n<ol>\n<li>执行下面的命令，加密上面生成的Personal access tokens，并添加到.travis.yml配置文件。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 这里的 REPO_TOKEN 是变量名,在后面的配置文件中会用到</span></div><div class=\"line\"><span class=\"comment\"># TOKEN 是上面github生成的Token</span></div><div class=\"line\">travis encrypt <span class=\"string\">'REPO_TOKEN=&lt;TOKEN&gt;'</span> --add123123</div></pre></td></tr></table></figure>\n<ol>\n<li>上述命令指向完后，.travis.yml配置文件的内容如下所示。</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">env:</div><div class=\"line\">  global:</div><div class=\"line\">    secure: F/gYu+bVe3aWs6YnuB5PNZLEmHH4CGf0najk8JI3/N+SFL0TH8tyYg+O1sXR3EIg.....省略.....iwr5HQG/G3fdL4JcXiAJIm/iH9ndDyGV5EGR1CmseNGNWrwnRZ7tlKE=123123</div></pre></td></tr></table></figure>\n<ol>\n<li>使用本地编辑器打开.travis.yml配置文件，将其修改成如下所示的内容。<strong>注意：有些内容是你自己的!!!</strong></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\">language: node_js</div><div class=\"line\">node_js:</div><div class=\"line\">- <span class=\"string\">\"4\"</span>  <span class=\"comment\"># nodejs的版本</span></div><div class=\"line\">branches:</div><div class=\"line\">  only:</div><div class=\"line\">  - dev  <span class=\"comment\"># 设置自动化部署的源码分支</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># ------------------------------------------------</span></div><div class=\"line\"><span class=\"comment\"># 下面是你的Token加密信息，不要替换</span></div><div class=\"line\"><span class=\"comment\"># ------------------------------------------------</span></div><div class=\"line\">env:</div><div class=\"line\">  global:  </div><div class=\"line\">    secure: F/gYu+bVe3aWs6Yn.....省略..../iH9ndDyGV5EGR1CmseNGNWrwnRZ7tlKE=</div><div class=\"line\"></div><div class=\"line\">before_install:</div><div class=\"line\">- <span class=\"built_in\">export</span> TZ=<span class=\"string\">'Asia/Shanghai'</span>  </div><div class=\"line\">- npm install -g hexo</div><div class=\"line\">- npm install -g hexo-cli </div><div class=\"line\">before_script:</div><div class=\"line\"><span class=\"comment\"># ------------------------------------------------</span></div><div class=\"line\"><span class=\"comment\"># 设置github账户信息 注意修改成自己的信息</span></div><div class=\"line\"><span class=\"comment\"># ------------------------------------------------</span></div><div class=\"line\">- git config --global user.name <span class=\"string\">\"xuezhisd\"</span></div><div class=\"line\">- git config --global user.email xuezhi@126.com </div><div class=\"line\"><span class=\"comment\"># ------------------------------------------------</span></div><div class=\"line\"><span class=\"comment\"># github仓库操作  注意将仓库修改成自己的</span></div><div class=\"line\"><span class=\"comment\"># ------------------------------------------------</span></div><div class=\"line\">- sed -i<span class=\"string\">''</span> <span class=\"string\">\"s~git@github.com:xuezhisd/xuezhisd.github.io.git~https://<span class=\"variable\">$&#123;REPO_TOKEN&#125;</span>:x-oauth-basic@github.com/xuezhisd/xuezhisd.github.io.git~\"</span> _config.yml</div><div class=\"line\"><span class=\"comment\"># 安装依赖组件</span></div><div class=\"line\">install:</div><div class=\"line\">- npm install</div><div class=\"line\"><span class=\"comment\"># 执行的命令</span></div><div class=\"line\">script:</div><div class=\"line\">- hexo clean</div><div class=\"line\">- hexo generate</div><div class=\"line\"><span class=\"comment\"># 执行的成功后执行 </span></div><div class=\"line\">after_success:</div><div class=\"line\">- hexo deploy12345678910111213141516171819202122232425262728293031323334353637381234567891011121314151617181920212223242526272829303132333435363738</div></pre></td></tr></table></figure>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">至此，Travis <span class=\"keyword\">CI</span>已经配置完成了。</div></pre></td></tr></table></figure>\n<h2 id=\"创建仓库，推送到GitHub\"><a href=\"#创建仓库，推送到GitHub\" class=\"headerlink\" title=\"创建仓库，推送到GitHub\"></a>创建仓库，推送到GitHub</h2><ul>\n<li>新建仓库blog。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init blog</div><div class=\"line\"><span class=\"built_in\">cd</span> blog1212</div></pre></td></tr></table></figure>\n<ul>\n<li>将原来博客目录下的以下内容复制到blog文件夹中。<br><img src=\"http://img.zhangxuezhi.com/747d3iy0nq4a39mdnpdx57c51a.png\" alt=\"img\"></li>\n<li>修改.gitignore文件，取消对node_modules文件夹的忽略。（即删除对应的行）</li>\n<li>关联GitHub上的远程仓库。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 将github仓库改为自己的博客仓库</span></div><div class=\"line\">git remote add origin git@github.com:xuezhisd/xuezhisd.github.io.git1212</div></pre></td></tr></table></figure>\n<ul>\n<li>提交本地修改，推送到GitHub上。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># 添加文件到暂存区</span></div><div class=\"line\">git add .</div><div class=\"line\"><span class=\"comment\"># 提交修改</span></div><div class=\"line\">git commit -m <span class=\"string\">\"test travis\"</span></div><div class=\"line\"><span class=\"comment\"># 推送至远程仓库的dev分支</span></div><div class=\"line\">git push -u origin dev123456123456</div></pre></td></tr></table></figure>\n<ul>\n<li>push本地的代码至远程仓库之后，在<a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"external\">https://travis-ci.org</a> 后台查看相关情况。如果如下图所示，就代表成功了。<br><img src=\"http://img.zhangxuezhi.com/pkv15sreco6fl4g85v8lzz4uqh.png\" alt=\"图片名称\"></li>\n</ul>\n"},{"title":"远程GitHub中的灰色图标的解决办法","date":"2017-08-19T21:22:09.000Z","_content":"## 问题描述\n\n任何人都可以告诉我为什么我把我的文件推送到github时有灰色图标？在应用程序目录中，应该有模型，视图和控制器，但在远程GitHub中，我无法点击。\n\n![git,github,github-for-windows](https://imgtn.gxnotes.com/images/2017/06/d6b2d26271941e283feba737ea35c3cf.jpg)\n\n## 最佳解决方案\n\n看起来你创建了一个子模块，指向一个不可达的远程位置。\n\n见[this answer](https://gxnotes.com/link.php?target=https%3A//stackoverflow.com/questions/14448601/what-does-this-green-icon-mean-in-a-github-repository)。该图标在绿色时将指向子模块。因为子模块配置不正确，我认为你的情况是灰色的。\n\n鉴于`.gitmodules`不存在，它必须被删除，留下没有远程信息的子模块。\n\n如果进入`app`并键入`git remote -v`，您将看到该模块指向的位置。这个地方目前无法到达。\n\n在类似的情况下，我添加了一个子模块并删除了`.gitmodules`。 GitHub的结果如下所示：\n\n![git,github,github-for-windows](https://imgtn.gxnotes.com/images/2017/06/5e06b01294d7f9b6e5feba0735255969.jpg)\n\n## 次佳解决方案\n\n看起来你在文件夹中初始化了git。从子文件夹中删除git文件(rm -rf)，并创建一个新的repo并重新初始化git。\n\n## 第三种解决方案\n\n```bash\ngit rm --cached <folder_name>\n```\n\n然后转到父目录，然后执行：\n\n```bash\ngit add .\ngit commit -m \"<your_message>\"\ngit push --all\n```","source":"_posts/远程GitHub中的灰色图标的解决办法.md","raw":"---\ntitle: 远程GitHub中的灰色图标的解决办法\ntag: git\ncategories: 网络技术\ndate: 2017-08-20 05:22:09\n---\n## 问题描述\n\n任何人都可以告诉我为什么我把我的文件推送到github时有灰色图标？在应用程序目录中，应该有模型，视图和控制器，但在远程GitHub中，我无法点击。\n\n![git,github,github-for-windows](https://imgtn.gxnotes.com/images/2017/06/d6b2d26271941e283feba737ea35c3cf.jpg)\n\n## 最佳解决方案\n\n看起来你创建了一个子模块，指向一个不可达的远程位置。\n\n见[this answer](https://gxnotes.com/link.php?target=https%3A//stackoverflow.com/questions/14448601/what-does-this-green-icon-mean-in-a-github-repository)。该图标在绿色时将指向子模块。因为子模块配置不正确，我认为你的情况是灰色的。\n\n鉴于`.gitmodules`不存在，它必须被删除，留下没有远程信息的子模块。\n\n如果进入`app`并键入`git remote -v`，您将看到该模块指向的位置。这个地方目前无法到达。\n\n在类似的情况下，我添加了一个子模块并删除了`.gitmodules`。 GitHub的结果如下所示：\n\n![git,github,github-for-windows](https://imgtn.gxnotes.com/images/2017/06/5e06b01294d7f9b6e5feba0735255969.jpg)\n\n## 次佳解决方案\n\n看起来你在文件夹中初始化了git。从子文件夹中删除git文件(rm -rf)，并创建一个新的repo并重新初始化git。\n\n## 第三种解决方案\n\n```bash\ngit rm --cached <folder_name>\n```\n\n然后转到父目录，然后执行：\n\n```bash\ngit add .\ngit commit -m \"<your_message>\"\ngit push --all\n```","slug":"远程GitHub中的灰色图标的解决办法","published":1,"updated":"2017-08-20T05:48:02.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6kfg8s5000qygkv8478ef97","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>任何人都可以告诉我为什么我把我的文件推送到github时有灰色图标？在应用程序目录中，应该有模型，视图和控制器，但在远程GitHub中，我无法点击。</p>\n<p><img src=\"https://imgtn.gxnotes.com/images/2017/06/d6b2d26271941e283feba737ea35c3cf.jpg\" alt=\"git,github,github-for-windows\"></p>\n<h2 id=\"最佳解决方案\"><a href=\"#最佳解决方案\" class=\"headerlink\" title=\"最佳解决方案\"></a>最佳解决方案</h2><p>看起来你创建了一个子模块，指向一个不可达的远程位置。</p>\n<p>见<a href=\"https://gxnotes.com/link.php?target=https%3A//stackoverflow.com/questions/14448601/what-does-this-green-icon-mean-in-a-github-repository\" target=\"_blank\" rel=\"external\">this answer</a>。该图标在绿色时将指向子模块。因为子模块配置不正确，我认为你的情况是灰色的。</p>\n<p>鉴于<code>.gitmodules</code>不存在，它必须被删除，留下没有远程信息的子模块。</p>\n<p>如果进入<code>app</code>并键入<code>git remote -v</code>，您将看到该模块指向的位置。这个地方目前无法到达。</p>\n<p>在类似的情况下，我添加了一个子模块并删除了<code>.gitmodules</code>。 GitHub的结果如下所示：</p>\n<p><img src=\"https://imgtn.gxnotes.com/images/2017/06/5e06b01294d7f9b6e5feba0735255969.jpg\" alt=\"git,github,github-for-windows\"></p>\n<h2 id=\"次佳解决方案\"><a href=\"#次佳解决方案\" class=\"headerlink\" title=\"次佳解决方案\"></a>次佳解决方案</h2><p>看起来你在文件夹中初始化了git。从子文件夹中删除git文件(rm -rf)，并创建一个新的repo并重新初始化git。</p>\n<h2 id=\"第三种解决方案\"><a href=\"#第三种解决方案\" class=\"headerlink\" title=\"第三种解决方案\"></a>第三种解决方案</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rm --cached &lt;folder_name&gt;</div></pre></td></tr></table></figure>\n<p>然后转到父目录，然后执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m <span class=\"string\">\"&lt;your_message&gt;\"</span></div><div class=\"line\">git push --all</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>任何人都可以告诉我为什么我把我的文件推送到github时有灰色图标？在应用程序目录中，应该有模型，视图和控制器，但在远程GitHub中，我无法点击。</p>\n<p><img src=\"https://imgtn.gxnotes.com/images/2017/06/d6b2d26271941e283feba737ea35c3cf.jpg\" alt=\"git,github,github-for-windows\"></p>\n<h2 id=\"最佳解决方案\"><a href=\"#最佳解决方案\" class=\"headerlink\" title=\"最佳解决方案\"></a>最佳解决方案</h2><p>看起来你创建了一个子模块，指向一个不可达的远程位置。</p>\n<p>见<a href=\"https://gxnotes.com/link.php?target=https%3A//stackoverflow.com/questions/14448601/what-does-this-green-icon-mean-in-a-github-repository\" target=\"_blank\" rel=\"external\">this answer</a>。该图标在绿色时将指向子模块。因为子模块配置不正确，我认为你的情况是灰色的。</p>\n<p>鉴于<code>.gitmodules</code>不存在，它必须被删除，留下没有远程信息的子模块。</p>\n<p>如果进入<code>app</code>并键入<code>git remote -v</code>，您将看到该模块指向的位置。这个地方目前无法到达。</p>\n<p>在类似的情况下，我添加了一个子模块并删除了<code>.gitmodules</code>。 GitHub的结果如下所示：</p>\n<p><img src=\"https://imgtn.gxnotes.com/images/2017/06/5e06b01294d7f9b6e5feba0735255969.jpg\" alt=\"git,github,github-for-windows\"></p>\n<h2 id=\"次佳解决方案\"><a href=\"#次佳解决方案\" class=\"headerlink\" title=\"次佳解决方案\"></a>次佳解决方案</h2><p>看起来你在文件夹中初始化了git。从子文件夹中删除git文件(rm -rf)，并创建一个新的repo并重新初始化git。</p>\n<h2 id=\"第三种解决方案\"><a href=\"#第三种解决方案\" class=\"headerlink\" title=\"第三种解决方案\"></a>第三种解决方案</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git rm --cached &lt;folder_name&gt;</div></pre></td></tr></table></figure>\n<p>然后转到父目录，然后执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m <span class=\"string\">\"&lt;your_message&gt;\"</span></div><div class=\"line\">git push --all</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj6kfg8qs0000ygkvfmbb0376","category_id":"cj6kfg8rb0004ygkvkx0m3q3m","_id":"cj6kfg8rs000dygkvh5pleefw"},{"post_id":"cj6kfg8r00002ygkv6rmgswh7","category_id":"cj6kfg8rb0004ygkvkx0m3q3m","_id":"cj6kfg8ry000jygkvsqec19dy"},{"post_id":"cj6kfg8rw000iygkvdh5uavti","category_id":"cj6kfg8rb0004ygkvkx0m3q3m","_id":"cj6kfg8s5000pygkvomdr2f34"},{"post_id":"cj6kfg8ri0006ygkv05wl6z5d","category_id":"cj6kfg8rb0004ygkvkx0m3q3m","_id":"cj6kfg8s8000tygkvpo8dhliu"},{"post_id":"cj6kfg8ry000kygkvyk1kido3","category_id":"cj6kfg8rb0004ygkvkx0m3q3m","_id":"cj6kfg8s9000vygkv5152f4n9"},{"post_id":"cj6kfg8s3000oygkv3qcc5p3p","category_id":"cj6kfg8rb0004ygkvkx0m3q3m","_id":"cj6kfg8sa000zygkvxt4jp0gk"},{"post_id":"cj6kfg8rj0007ygkv1iceamt2","category_id":"cj6kfg8rz000lygkv2w9hva0r","_id":"cj6kfg8sb0010ygkvfz3dvhf3"},{"post_id":"cj6kfg8s5000qygkv8478ef97","category_id":"cj6kfg8rb0004ygkvkx0m3q3m","_id":"cj6kfg8sc0012ygkv0o1rz6ak"},{"post_id":"cj6kfg8rm0008ygkvyxc46h3j","category_id":"cj6kfg8s6000rygkv7leur758","_id":"cj6kfg8se0015ygkvh8wd9yqw"},{"post_id":"cj6kfg8rr000cygkv5df7lv4y","category_id":"cj6kfg8s6000rygkv7leur758","_id":"cj6kfg8sf0017ygkv9kloh275"},{"post_id":"cj6kfg8ru000eygkv3cpmuubp","category_id":"cj6kfg8s6000rygkv7leur758","_id":"cj6kfg8sj001aygkvabfdbn5l"}],"PostTag":[{"post_id":"cj6kfg8qs0000ygkvfmbb0376","tag_id":"cj6kfg8rg0005ygkvxmh5t2qu","_id":"cj6kfg8rr000bygkvsbr5rcb9"},{"post_id":"cj6kfg8r00002ygkv6rmgswh7","tag_id":"cj6kfg8rg0005ygkvxmh5t2qu","_id":"cj6kfg8rw000hygkvz9wqhglk"},{"post_id":"cj6kfg8ri0006ygkv05wl6z5d","tag_id":"cj6kfg8rg0005ygkvxmh5t2qu","_id":"cj6kfg8s2000nygkvly2y1huo"},{"post_id":"cj6kfg8rj0007ygkv1iceamt2","tag_id":"cj6kfg8s0000mygkvayq4h26u","_id":"cj6kfg8s8000uygkvhf5x8mnl"},{"post_id":"cj6kfg8s5000qygkv8478ef97","tag_id":"cj6kfg8rg0005ygkvxmh5t2qu","_id":"cj6kfg8s9000wygkv8rmddb46"},{"post_id":"cj6kfg8rm0008ygkvyxc46h3j","tag_id":"cj6kfg8s6000sygkv6t5vaguu","_id":"cj6kfg8sd0014ygkvlobth94b"},{"post_id":"cj6kfg8rm0008ygkvyxc46h3j","tag_id":"cj6kfg8s9000yygkvq1wfgn4v","_id":"cj6kfg8sf0016ygkv5ro3n6z1"},{"post_id":"cj6kfg8rr000cygkv5df7lv4y","tag_id":"cj6kfg8sd0013ygkvmc1d1z3i","_id":"cj6kfg8si0019ygkvtloe4s3k"},{"post_id":"cj6kfg8ru000eygkv3cpmuubp","tag_id":"cj6kfg8sd0013ygkvmc1d1z3i","_id":"cj6kfg8sl001cygkvkwsfcxy9"},{"post_id":"cj6kfg8rw000iygkvdh5uavti","tag_id":"cj6kfg8s0000mygkvayq4h26u","_id":"cj6kfg8sm001fygkvq50z37t1"},{"post_id":"cj6kfg8rw000iygkvdh5uavti","tag_id":"cj6kfg8sl001dygkvjwtp3kgo","_id":"cj6kfg8sn001gygkve856gbsr"},{"post_id":"cj6kfg8rw000iygkvdh5uavti","tag_id":"cj6kfg8rg0005ygkvxmh5t2qu","_id":"cj6kfg8sn001iygkvqmbr1t9p"},{"post_id":"cj6kfg8ry000kygkvyk1kido3","tag_id":"cj6kfg8sm001eygkvci1wcukj","_id":"cj6kfg8sp001kygkvv2zfh0nb"},{"post_id":"cj6kfg8ry000kygkvyk1kido3","tag_id":"cj6kfg8rg0005ygkvxmh5t2qu","_id":"cj6kfg8sp001lygkv8dmoeu1l"},{"post_id":"cj6kfg8ry000kygkvyk1kido3","tag_id":"cj6kfg8s0000mygkvayq4h26u","_id":"cj6kfg8sq001mygkve905ggt4"},{"post_id":"cj6kfg8s3000oygkv3qcc5p3p","tag_id":"cj6kfg8sm001eygkvci1wcukj","_id":"cj6kfg8sq001nygkv9gk38dt9"},{"post_id":"cj6kfg8s3000oygkv3qcc5p3p","tag_id":"cj6kfg8s0000mygkvayq4h26u","_id":"cj6kfg8sq001oygkvegfnwlmd"}],"Tag":[{"name":"git","_id":"cj6kfg8rg0005ygkvxmh5t2qu"},{"name":"hexo","_id":"cj6kfg8s0000mygkvayq4h26u"},{"name":"Linux","_id":"cj6kfg8s6000sygkv6t5vaguu"},{"name":"速锐","_id":"cj6kfg8s9000yygkvq1wfgn4v"},{"name":"v2ray","_id":"cj6kfg8sd0013ygkvmc1d1z3i"},{"name":"appveyor","_id":"cj6kfg8sl001dygkvjwtp3kgo"},{"name":"Travis","_id":"cj6kfg8sm001eygkvci1wcukj"}]}}